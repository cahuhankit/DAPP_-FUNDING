{"ast":null,"code":"import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\nexport function integer() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fullConstraints = buildCompleteIntegerConstraints(constraints);\n  if (fullConstraints.min > fullConstraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n  if (!Number.isInteger(fullConstraints.min)) {\n    throw new Error('fc.integer minimum value should be an integer');\n  }\n  if (!Number.isInteger(fullConstraints.max)) {\n    throw new Error('fc.integer maximum value should be an integer');\n  }\n  return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}","map":{"version":3,"names":["IntegerArbitrary","buildCompleteIntegerConstraints","constraints","min","undefined","max","integer","fullConstraints","Error","Number","isInteger"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/integer.js"],"sourcesContent":["import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nexport function integer(constraints = {}) {\n    const fullConstraints = buildCompleteIntegerConstraints(constraints);\n    if (fullConstraints.min > fullConstraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!Number.isInteger(fullConstraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!Number.isInteger(fullConstraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,+BAA+B,CAACC,WAAW,EAAE;EAClD,MAAMC,GAAG,GAAGD,WAAW,CAACC,GAAG,KAAKC,SAAS,GAAGF,WAAW,CAACC,GAAG,GAAG,CAAC,UAAU;EACzE,MAAME,GAAG,GAAGH,WAAW,CAACG,GAAG,KAAKD,SAAS,GAAGF,WAAW,CAACG,GAAG,GAAG,UAAU;EACxE,OAAO;IAAEF,GAAG;IAAEE;EAAI,CAAC;AACvB;AACA,OAAO,SAASC,OAAO,GAAmB;EAAA,IAAlBJ,WAAW,uEAAG,CAAC,CAAC;EACpC,MAAMK,eAAe,GAAGN,+BAA+B,CAACC,WAAW,CAAC;EACpE,IAAIK,eAAe,CAACJ,GAAG,GAAGI,eAAe,CAACF,GAAG,EAAE;IAC3C,MAAM,IAAIG,KAAK,CAAC,0EAA0E,CAAC;EAC/F;EACA,IAAI,CAACC,MAAM,CAACC,SAAS,CAACH,eAAe,CAACJ,GAAG,CAAC,EAAE;IACxC,MAAM,IAAIK,KAAK,CAAC,+CAA+C,CAAC;EACpE;EACA,IAAI,CAACC,MAAM,CAACC,SAAS,CAACH,eAAe,CAACF,GAAG,CAAC,EAAE;IACxC,MAAM,IAAIG,KAAK,CAAC,+CAA+C,CAAC;EACpE;EACA,OAAO,IAAIR,gBAAgB,CAACO,eAAe,CAACJ,GAAG,EAAEI,eAAe,CAACF,GAAG,CAAC;AACzE"},"metadata":{},"sourceType":"module"}
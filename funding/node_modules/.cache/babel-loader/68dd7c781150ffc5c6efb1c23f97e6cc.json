{"ast":null,"code":"import { integer } from './integer.js';\nimport { floatToIndex, indexToFloat, MAX_VALUE_32 } from './_internals/helpers/FloatHelpers.js';\nfunction safeFloatToIndex(f, constraintsLabel) {\n  const conversionTrick = 'you can convert any double to a 32-bit float by using `new Float32Array([myDouble])[0]`';\n  const errorMessage = 'fc.float constraints.' + constraintsLabel + ' must be a 32-bit float - ' + conversionTrick;\n  if (Number.isNaN(f) || Number.isFinite(f) && (f < -MAX_VALUE_32 || f > MAX_VALUE_32)) {\n    throw new Error(errorMessage);\n  }\n  const index = floatToIndex(f);\n  if (!Number.isInteger(index)) {\n    throw new Error(errorMessage);\n  }\n  return index;\n}\nfunction unmapperFloatToIndex(value) {\n  if (typeof value !== 'number') throw new Error('Unsupported type');\n  return floatToIndex(value);\n}\nexport function float() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    noDefaultInfinity = false,\n    noNaN = false,\n    min = noDefaultInfinity ? -MAX_VALUE_32 : Number.NEGATIVE_INFINITY,\n    max = noDefaultInfinity ? MAX_VALUE_32 : Number.POSITIVE_INFINITY\n  } = constraints;\n  const minIndex = safeFloatToIndex(min, 'min');\n  const maxIndex = safeFloatToIndex(max, 'max');\n  if (minIndex > maxIndex) {\n    throw new Error('fc.float constraints.min must be smaller or equal to constraints.max');\n  }\n  if (noNaN) {\n    return integer({\n      min: minIndex,\n      max: maxIndex\n    }).map(indexToFloat, unmapperFloatToIndex);\n  }\n  const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;\n  const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;\n  return integer({\n    min: minIndexWithNaN,\n    max: maxIndexWithNaN\n  }).map(index => {\n    if (index > maxIndex || index < minIndex) return Number.NaN;else return indexToFloat(index);\n  }, value => {\n    if (typeof value !== 'number') throw new Error('Unsupported type');\n    if (Number.isNaN(value)) return maxIndex !== maxIndexWithNaN ? maxIndexWithNaN : minIndexWithNaN;\n    return floatToIndex(value);\n  });\n}","map":{"version":3,"names":["integer","floatToIndex","indexToFloat","MAX_VALUE_32","safeFloatToIndex","f","constraintsLabel","conversionTrick","errorMessage","Number","isNaN","isFinite","Error","index","isInteger","unmapperFloatToIndex","value","float","constraints","noDefaultInfinity","noNaN","min","NEGATIVE_INFINITY","max","POSITIVE_INFINITY","minIndex","maxIndex","map","minIndexWithNaN","maxIndexWithNaN","NaN"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/float.js"],"sourcesContent":["import { integer } from './integer.js';\nimport { floatToIndex, indexToFloat, MAX_VALUE_32 } from './_internals/helpers/FloatHelpers.js';\nfunction safeFloatToIndex(f, constraintsLabel) {\n    const conversionTrick = 'you can convert any double to a 32-bit float by using `new Float32Array([myDouble])[0]`';\n    const errorMessage = 'fc.float constraints.' + constraintsLabel + ' must be a 32-bit float - ' + conversionTrick;\n    if (Number.isNaN(f) || (Number.isFinite(f) && (f < -MAX_VALUE_32 || f > MAX_VALUE_32))) {\n        throw new Error(errorMessage);\n    }\n    const index = floatToIndex(f);\n    if (!Number.isInteger(index)) {\n        throw new Error(errorMessage);\n    }\n    return index;\n}\nfunction unmapperFloatToIndex(value) {\n    if (typeof value !== 'number')\n        throw new Error('Unsupported type');\n    return floatToIndex(value);\n}\nexport function float(constraints = {}) {\n    const { noDefaultInfinity = false, noNaN = false, min = noDefaultInfinity ? -MAX_VALUE_32 : Number.NEGATIVE_INFINITY, max = noDefaultInfinity ? MAX_VALUE_32 : Number.POSITIVE_INFINITY, } = constraints;\n    const minIndex = safeFloatToIndex(min, 'min');\n    const maxIndex = safeFloatToIndex(max, 'max');\n    if (minIndex > maxIndex) {\n        throw new Error('fc.float constraints.min must be smaller or equal to constraints.max');\n    }\n    if (noNaN) {\n        return integer({ min: minIndex, max: maxIndex }).map(indexToFloat, unmapperFloatToIndex);\n    }\n    const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;\n    const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;\n    return integer({ min: minIndexWithNaN, max: maxIndexWithNaN }).map((index) => {\n        if (index > maxIndex || index < minIndex)\n            return Number.NaN;\n        else\n            return indexToFloat(index);\n    }, (value) => {\n        if (typeof value !== 'number')\n            throw new Error('Unsupported type');\n        if (Number.isNaN(value))\n            return maxIndex !== maxIndexWithNaN ? maxIndexWithNaN : minIndexWithNaN;\n        return floatToIndex(value);\n    });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,YAAY,EAAEC,YAAY,EAAEC,YAAY,QAAQ,sCAAsC;AAC/F,SAASC,gBAAgB,CAACC,CAAC,EAAEC,gBAAgB,EAAE;EAC3C,MAAMC,eAAe,GAAG,yFAAyF;EACjH,MAAMC,YAAY,GAAG,uBAAuB,GAAGF,gBAAgB,GAAG,4BAA4B,GAAGC,eAAe;EAChH,IAAIE,MAAM,CAACC,KAAK,CAACL,CAAC,CAAC,IAAKI,MAAM,CAACE,QAAQ,CAACN,CAAC,CAAC,KAAKA,CAAC,GAAG,CAACF,YAAY,IAAIE,CAAC,GAAGF,YAAY,CAAE,EAAE;IACpF,MAAM,IAAIS,KAAK,CAACJ,YAAY,CAAC;EACjC;EACA,MAAMK,KAAK,GAAGZ,YAAY,CAACI,CAAC,CAAC;EAC7B,IAAI,CAACI,MAAM,CAACK,SAAS,CAACD,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAID,KAAK,CAACJ,YAAY,CAAC;EACjC;EACA,OAAOK,KAAK;AAChB;AACA,SAASE,oBAAoB,CAACC,KAAK,EAAE;EACjC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;EACvC,OAAOX,YAAY,CAACe,KAAK,CAAC;AAC9B;AACA,OAAO,SAASC,KAAK,GAAmB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EAClC,MAAM;IAAEC,iBAAiB,GAAG,KAAK;IAAEC,KAAK,GAAG,KAAK;IAAEC,GAAG,GAAGF,iBAAiB,GAAG,CAAChB,YAAY,GAAGM,MAAM,CAACa,iBAAiB;IAAEC,GAAG,GAAGJ,iBAAiB,GAAGhB,YAAY,GAAGM,MAAM,CAACe;EAAmB,CAAC,GAAGN,WAAW;EACxM,MAAMO,QAAQ,GAAGrB,gBAAgB,CAACiB,GAAG,EAAE,KAAK,CAAC;EAC7C,MAAMK,QAAQ,GAAGtB,gBAAgB,CAACmB,GAAG,EAAE,KAAK,CAAC;EAC7C,IAAIE,QAAQ,GAAGC,QAAQ,EAAE;IACrB,MAAM,IAAId,KAAK,CAAC,sEAAsE,CAAC;EAC3F;EACA,IAAIQ,KAAK,EAAE;IACP,OAAOpB,OAAO,CAAC;MAAEqB,GAAG,EAAEI,QAAQ;MAAEF,GAAG,EAAEG;IAAS,CAAC,CAAC,CAACC,GAAG,CAACzB,YAAY,EAAEa,oBAAoB,CAAC;EAC5F;EACA,MAAMa,eAAe,GAAGF,QAAQ,GAAG,CAAC,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,CAAC;EAC9D,MAAMI,eAAe,GAAGH,QAAQ,GAAG,CAAC,GAAGA,QAAQ,GAAG,CAAC,GAAGA,QAAQ;EAC9D,OAAO1B,OAAO,CAAC;IAAEqB,GAAG,EAAEO,eAAe;IAAEL,GAAG,EAAEM;EAAgB,CAAC,CAAC,CAACF,GAAG,CAAEd,KAAK,IAAK;IAC1E,IAAIA,KAAK,GAAGa,QAAQ,IAAIb,KAAK,GAAGY,QAAQ,EACpC,OAAOhB,MAAM,CAACqB,GAAG,CAAC,KAElB,OAAO5B,YAAY,CAACW,KAAK,CAAC;EAClC,CAAC,EAAGG,KAAK,IAAK;IACV,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;IACvC,IAAIH,MAAM,CAACC,KAAK,CAACM,KAAK,CAAC,EACnB,OAAOU,QAAQ,KAAKG,eAAe,GAAGA,eAAe,GAAGD,eAAe;IAC3E,OAAO3B,YAAY,CAACe,KAAK,CAAC;EAC9B,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}
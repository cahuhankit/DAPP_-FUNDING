{"ast":null,"code":"import prand from 'pure-rand';\nimport { VerbosityLevel } from './VerbosityLevel.js';\nexport class QualifiedParameters {\n  constructor(op) {\n    const p = op || {};\n    this.seed = QualifiedParameters.readSeed(p);\n    this.randomType = QualifiedParameters.readRandomType(p);\n    this.numRuns = QualifiedParameters.readNumRuns(p);\n    this.verbose = QualifiedParameters.readVerbose(p);\n    this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n    this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n    this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n    this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n    this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n    this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n    this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n    this.logger = QualifiedParameters.readOrDefault(p, 'logger', v => {\n      console.log(v);\n    });\n    this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n    this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n    this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n    this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n    this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n    this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n  }\n  toParameters() {\n    const orUndefined = value => value !== null ? value : undefined;\n    return {\n      seed: this.seed,\n      randomType: this.randomType,\n      numRuns: this.numRuns,\n      maxSkipsPerRun: this.maxSkipsPerRun,\n      timeout: orUndefined(this.timeout),\n      skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n      interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n      markInterruptAsFailure: this.markInterruptAsFailure,\n      skipEqualValues: this.skipEqualValues,\n      ignoreEqualValues: this.ignoreEqualValues,\n      path: this.path,\n      logger: this.logger,\n      unbiased: this.unbiased,\n      verbose: this.verbose,\n      examples: this.examples,\n      endOnFailure: this.endOnFailure,\n      reporter: orUndefined(this.reporter),\n      asyncReporter: orUndefined(this.asyncReporter)\n    };\n  }\n  static read(op) {\n    return new QualifiedParameters(op);\n  }\n}\nQualifiedParameters.readSeed = p => {\n  if (p.seed == null) return Date.now() ^ Math.random() * 0x100000000;\n  const seed32 = p.seed | 0;\n  if (p.seed === seed32) return seed32;\n  const gap = p.seed - seed32;\n  return seed32 ^ gap * 0x100000000;\n};\nQualifiedParameters.readRandomType = p => {\n  if (p.randomType == null) return prand.xorshift128plus;\n  if (typeof p.randomType === 'string') {\n    switch (p.randomType) {\n      case 'mersenne':\n        return prand.mersenne;\n      case 'congruential':\n        return prand.congruential;\n      case 'congruential32':\n        return prand.congruential32;\n      case 'xorshift128plus':\n        return prand.xorshift128plus;\n      case 'xoroshiro128plus':\n        return prand.xoroshiro128plus;\n      default:\n        throw new Error(`Invalid random specified: '${p.randomType}'`);\n    }\n  }\n  return p.randomType;\n};\nQualifiedParameters.readNumRuns = p => {\n  const defaultValue = 100;\n  if (p.numRuns != null) return p.numRuns;\n  if (p.num_runs != null) return p.num_runs;\n  return defaultValue;\n};\nQualifiedParameters.readVerbose = p => {\n  if (p.verbose == null) return VerbosityLevel.None;\n  if (typeof p.verbose === 'boolean') {\n    return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;\n  }\n  if (p.verbose <= VerbosityLevel.None) {\n    return VerbosityLevel.None;\n  }\n  if (p.verbose >= VerbosityLevel.VeryVerbose) {\n    return VerbosityLevel.VeryVerbose;\n  }\n  return p.verbose | 0;\n};\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n  const value = p[key];\n  return value != null ? value : defaultValue;\n};","map":{"version":3,"names":["prand","VerbosityLevel","QualifiedParameters","constructor","op","p","seed","readSeed","randomType","readRandomType","numRuns","readNumRuns","verbose","readVerbose","maxSkipsPerRun","readOrDefault","timeout","skipAllAfterTimeLimit","interruptAfterTimeLimit","markInterruptAsFailure","readBoolean","skipEqualValues","ignoreEqualValues","logger","v","console","log","path","unbiased","examples","endOnFailure","reporter","asyncReporter","toParameters","orUndefined","value","undefined","read","Date","now","Math","random","seed32","gap","xorshift128plus","mersenne","congruential","congruential32","xoroshiro128plus","Error","defaultValue","num_runs","None","Verbose","VeryVerbose","key"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/check/runner/configuration/QualifiedParameters.js"],"sourcesContent":["import prand from 'pure-rand';\nimport { VerbosityLevel } from './VerbosityLevel.js';\nexport class QualifiedParameters {\n    constructor(op) {\n        const p = op || {};\n        this.seed = QualifiedParameters.readSeed(p);\n        this.randomType = QualifiedParameters.readRandomType(p);\n        this.numRuns = QualifiedParameters.readNumRuns(p);\n        this.verbose = QualifiedParameters.readVerbose(p);\n        this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n        this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n        this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n        this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n        this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n        this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n        this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n        this.logger = QualifiedParameters.readOrDefault(p, 'logger', (v) => {\n            console.log(v);\n        });\n        this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n        this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n        this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n        this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n        this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n        this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n    }\n    toParameters() {\n        const orUndefined = (value) => (value !== null ? value : undefined);\n        return {\n            seed: this.seed,\n            randomType: this.randomType,\n            numRuns: this.numRuns,\n            maxSkipsPerRun: this.maxSkipsPerRun,\n            timeout: orUndefined(this.timeout),\n            skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n            interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n            markInterruptAsFailure: this.markInterruptAsFailure,\n            skipEqualValues: this.skipEqualValues,\n            ignoreEqualValues: this.ignoreEqualValues,\n            path: this.path,\n            logger: this.logger,\n            unbiased: this.unbiased,\n            verbose: this.verbose,\n            examples: this.examples,\n            endOnFailure: this.endOnFailure,\n            reporter: orUndefined(this.reporter),\n            asyncReporter: orUndefined(this.asyncReporter),\n        };\n    }\n    static read(op) {\n        return new QualifiedParameters(op);\n    }\n}\nQualifiedParameters.readSeed = (p) => {\n    if (p.seed == null)\n        return Date.now() ^ (Math.random() * 0x100000000);\n    const seed32 = p.seed | 0;\n    if (p.seed === seed32)\n        return seed32;\n    const gap = p.seed - seed32;\n    return seed32 ^ (gap * 0x100000000);\n};\nQualifiedParameters.readRandomType = (p) => {\n    if (p.randomType == null)\n        return prand.xorshift128plus;\n    if (typeof p.randomType === 'string') {\n        switch (p.randomType) {\n            case 'mersenne':\n                return prand.mersenne;\n            case 'congruential':\n                return prand.congruential;\n            case 'congruential32':\n                return prand.congruential32;\n            case 'xorshift128plus':\n                return prand.xorshift128plus;\n            case 'xoroshiro128plus':\n                return prand.xoroshiro128plus;\n            default:\n                throw new Error(`Invalid random specified: '${p.randomType}'`);\n        }\n    }\n    return p.randomType;\n};\nQualifiedParameters.readNumRuns = (p) => {\n    const defaultValue = 100;\n    if (p.numRuns != null)\n        return p.numRuns;\n    if (p.num_runs != null)\n        return p.num_runs;\n    return defaultValue;\n};\nQualifiedParameters.readVerbose = (p) => {\n    if (p.verbose == null)\n        return VerbosityLevel.None;\n    if (typeof p.verbose === 'boolean') {\n        return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;\n    }\n    if (p.verbose <= VerbosityLevel.None) {\n        return VerbosityLevel.None;\n    }\n    if (p.verbose >= VerbosityLevel.VeryVerbose) {\n        return VerbosityLevel.VeryVerbose;\n    }\n    return p.verbose | 0;\n};\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n    const value = p[key];\n    return value != null ? value : defaultValue;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\nfunction dotAdapter(a) {\n  let currentLength = a[0].length;\n  for (let index = 1; index !== a.length; ++index) {\n    currentLength += 1 + a[index].length;\n    if (currentLength > 64) {\n      return {\n        adapted: true,\n        value: a.slice(0, index)\n      };\n    }\n  }\n  return {\n    adapted: false,\n    value: a\n  };\n}\nfunction dotMapper(a) {\n  return a.join('.');\n}\nfunction dotUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n  return value.split('.');\n}\nfunction atMapper(data) {\n  return `${data[0]}@${data[1]}`;\n}\nfunction atUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n  return value.split('@', 2);\n}\nexport function emailAddress() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n  const atextArb = buildLowerAlphaNumericArbitrary(others);\n  const localPartArb = adapter(array(stringOf(atextArb, {\n    minLength: 1,\n    maxLength: 64,\n    size: constraints.size\n  }), {\n    minLength: 1,\n    maxLength: 32,\n    size: constraints.size\n  }), dotAdapter).map(dotMapper, dotUnmapper);\n  return tuple(localPartArb, domain({\n    size: constraints.size\n  })).map(atMapper, atUnmapper);\n}","map":{"version":3,"names":["array","buildLowerAlphaNumericArbitrary","domain","stringOf","tuple","adapter","dotAdapter","a","currentLength","length","index","adapted","value","slice","dotMapper","join","dotUnmapper","Error","split","atMapper","data","atUnmapper","emailAddress","constraints","others","atextArb","localPartArb","minLength","maxLength","size","map"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/emailAddress.js"],"sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\nfunction dotAdapter(a) {\n    let currentLength = a[0].length;\n    for (let index = 1; index !== a.length; ++index) {\n        currentLength += 1 + a[index].length;\n        if (currentLength > 64) {\n            return { adapted: true, value: a.slice(0, index) };\n        }\n    }\n    return { adapted: false, value: a };\n}\nfunction dotMapper(a) {\n    return a.join('.');\n}\nfunction dotUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('.');\n}\nfunction atMapper(data) {\n    return `${data[0]}@${data[1]}`;\n}\nfunction atUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('@', 2);\n}\nexport function emailAddress(constraints = {}) {\n    const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n    const atextArb = buildLowerAlphaNumericArbitrary(others);\n    const localPartArb = adapter(array(stringOf(atextArb, {\n        minLength: 1,\n        maxLength: 64,\n        size: constraints.size,\n    }), { minLength: 1, maxLength: 32, size: constraints.size }), dotAdapter).map(dotMapper, dotUnmapper);\n    return tuple(localPartArb, domain({ size: constraints.size })).map(atMapper, atUnmapper);\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAASC,+BAA+B,QAAQ,yDAAyD;AACzG,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,OAAO,QAAQ,kCAAkC;AAC1D,SAASC,UAAU,CAACC,CAAC,EAAE;EACnB,IAAIC,aAAa,GAAGD,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM;EAC/B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,KAAKH,CAAC,CAACE,MAAM,EAAE,EAAEC,KAAK,EAAE;IAC7CF,aAAa,IAAI,CAAC,GAAGD,CAAC,CAACG,KAAK,CAAC,CAACD,MAAM;IACpC,IAAID,aAAa,GAAG,EAAE,EAAE;MACpB,OAAO;QAAEG,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAEL,CAAC,CAACM,KAAK,CAAC,CAAC,EAAEH,KAAK;MAAE,CAAC;IACtD;EACJ;EACA,OAAO;IAAEC,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAEL;EAAE,CAAC;AACvC;AACA,SAASO,SAAS,CAACP,CAAC,EAAE;EAClB,OAAOA,CAAC,CAACQ,IAAI,CAAC,GAAG,CAAC;AACtB;AACA,SAASC,WAAW,CAACJ,KAAK,EAAE;EACxB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIK,KAAK,CAAC,aAAa,CAAC;EAClC;EACA,OAAOL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC;AAC3B;AACA,SAASC,QAAQ,CAACC,IAAI,EAAE;EACpB,OAAQ,GAAEA,IAAI,CAAC,CAAC,CAAE,IAAGA,IAAI,CAAC,CAAC,CAAE,EAAC;AAClC;AACA,SAASC,UAAU,CAACT,KAAK,EAAE;EACvB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIK,KAAK,CAAC,aAAa,CAAC;EAClC;EACA,OAAOL,KAAK,CAACM,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;AAC9B;AACA,OAAO,SAASI,YAAY,GAAmB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EACzC,MAAMC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC9G,MAAMC,QAAQ,GAAGxB,+BAA+B,CAACuB,MAAM,CAAC;EACxD,MAAME,YAAY,GAAGrB,OAAO,CAACL,KAAK,CAACG,QAAQ,CAACsB,QAAQ,EAAE;IAClDE,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE,EAAE;IACbC,IAAI,EAAEN,WAAW,CAACM;EACtB,CAAC,CAAC,EAAE;IAAEF,SAAS,EAAE,CAAC;IAAEC,SAAS,EAAE,EAAE;IAAEC,IAAI,EAAEN,WAAW,CAACM;EAAK,CAAC,CAAC,EAAEvB,UAAU,CAAC,CAACwB,GAAG,CAAChB,SAAS,EAAEE,WAAW,CAAC;EACrG,OAAOZ,KAAK,CAACsB,YAAY,EAAExB,MAAM,CAAC;IAAE2B,IAAI,EAAEN,WAAW,CAACM;EAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACX,QAAQ,EAAEE,UAAU,CAAC;AAC5F"},"metadata":{},"sourceType":"module"}
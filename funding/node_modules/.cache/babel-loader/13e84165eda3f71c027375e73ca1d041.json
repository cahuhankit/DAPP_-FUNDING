{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { isSubarrayOf } from './helpers/IsSubarrayOf.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport class SubarrayArbitrary extends Arbitrary {\n  constructor(originalArray, isOrdered, minLength, maxLength) {\n    super();\n    this.originalArray = originalArray;\n    this.isOrdered = isOrdered;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    if (minLength < 0 || minLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n    if (maxLength < 0 || maxLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n    if (minLength > maxLength) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n    this.lengthArb = new IntegerArbitrary(minLength, maxLength);\n    this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2))) : this.lengthArb;\n  }\n  generate(mrng, biasFactor) {\n    const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n    const size = lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const remainingElements = this.originalArray.map((_v, idx) => idx);\n    const ids = [];\n    for (let index = 0; index !== sizeValue; ++index) {\n      const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n      ids.push(remainingElements[selectedIdIndex]);\n      remainingElements.splice(selectedIdIndex, 1);\n    }\n    if (this.isOrdered) {\n      ids.sort((a, b) => a - b);\n    }\n    return new Value(ids.map(i => this.originalArray[i]), size.context);\n  }\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n      return false;\n    }\n    return isSubarrayOf(this.originalArray, value);\n  }\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n    return this.lengthArb.shrink(value.length, context).map(newSize => {\n      return new Value(value.slice(value.length - newSize.value), newSize.context);\n    }).join(value.length > this.minLength ? makeLazy(() => this.shrink(value.slice(1), undefined).filter(newValue => this.minLength <= newValue.value.length + 1).map(newValue => new Value([value[0]].concat(newValue.value), undefined))) : Stream.nil());\n  }\n}","map":{"version":3,"names":["Arbitrary","Value","makeLazy","Stream","isSubarrayOf","IntegerArbitrary","SubarrayArbitrary","constructor","originalArray","isOrdered","minLength","maxLength","length","Error","lengthArb","biasedLengthArb","Math","floor","log","generate","mrng","biasFactor","undefined","nextInt","size","sizeValue","value","remainingElements","map","_v","idx","ids","index","selectedIdIndex","push","splice","sort","a","b","i","context","canShrinkWithoutContext","Array","isArray","shrink","nil","newSize","slice","join","filter","newValue","concat"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/SubarrayArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { isSubarrayOf } from './helpers/IsSubarrayOf.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport class SubarrayArbitrary extends Arbitrary {\n    constructor(originalArray, isOrdered, minLength, maxLength) {\n        super();\n        this.originalArray = originalArray;\n        this.isOrdered = isOrdered;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        if (minLength < 0 || minLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n        if (maxLength < 0 || maxLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n        if (minLength > maxLength)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n        this.lengthArb = new IntegerArbitrary(minLength, maxLength);\n        this.biasedLengthArb =\n            minLength !== maxLength\n                ? new IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2)))\n                : this.lengthArb;\n    }\n    generate(mrng, biasFactor) {\n        const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n        const size = lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const remainingElements = this.originalArray.map((_v, idx) => idx);\n        const ids = [];\n        for (let index = 0; index !== sizeValue; ++index) {\n            const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n            ids.push(remainingElements[selectedIdIndex]);\n            remainingElements.splice(selectedIdIndex, 1);\n        }\n        if (this.isOrdered) {\n            ids.sort((a, b) => a - b);\n        }\n        return new Value(ids.map((i) => this.originalArray[i]), size.context);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n            return false;\n        }\n        return isSubarrayOf(this.originalArray, value);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        return this.lengthArb\n            .shrink(value.length, context)\n            .map((newSize) => {\n            return new Value(value.slice(value.length - newSize.value), newSize.context);\n        })\n            .join(value.length > this.minLength\n            ? makeLazy(() => this.shrink(value.slice(1), undefined)\n                .filter((newValue) => this.minLength <= newValue.value.length + 1)\n                .map((newValue) => new Value([value[0]].concat(newValue.value), undefined)))\n            : Stream.nil());\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
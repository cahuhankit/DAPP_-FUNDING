{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../../utils/stringify.js';\nfunction prettyPrint(seenValuesStrings) {\n  return `Stream(${seenValuesStrings.join(',')}…)`;\n}\nexport class StreamArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n  generate(mrng, biasFactor) {\n    const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n    const enrichedProducer = () => {\n      const seenValues = [];\n      const g = function* (arb, clonedMrng) {\n        while (true) {\n          const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n          seenValues.push(value);\n          yield value;\n        }\n      };\n      const s = new Stream(g(this.arb, mrng.clone()));\n      return Object.defineProperties(s, {\n        toString: {\n          value: () => prettyPrint(seenValues.map(stringify))\n        },\n        [toStringMethod]: {\n          value: () => prettyPrint(seenValues.map(stringify))\n        },\n        [asyncToStringMethod]: {\n          value: async () => prettyPrint(await Promise.all(seenValues.map(asyncStringify)))\n        },\n        [cloneMethod]: {\n          value: enrichedProducer,\n          enumerable: true\n        }\n      });\n    };\n    return new Value(enrichedProducer(), undefined);\n  }\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n  shrink(_value, _context) {\n    return Stream.nil();\n  }\n}","map":{"version":3,"names":["Arbitrary","Value","cloneMethod","Stream","asyncStringify","asyncToStringMethod","stringify","toStringMethod","prettyPrint","seenValuesStrings","join","StreamArbitrary","constructor","arb","generate","mrng","biasFactor","appliedBiasFactor","undefined","nextInt","enrichedProducer","seenValues","g","clonedMrng","value","push","s","clone","Object","defineProperties","toString","map","Promise","all","enumerable","canShrinkWithoutContext","shrink","_value","_context","nil"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/StreamArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../../utils/stringify.js';\nfunction prettyPrint(seenValuesStrings) {\n    return `Stream(${seenValuesStrings.join(',')}…)`;\n}\nexport class StreamArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        const appliedBiasFactor = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? biasFactor : undefined;\n        const enrichedProducer = () => {\n            const seenValues = [];\n            const g = function* (arb, clonedMrng) {\n                while (true) {\n                    const value = arb.generate(clonedMrng, appliedBiasFactor).value;\n                    seenValues.push(value);\n                    yield value;\n                }\n            };\n            const s = new Stream(g(this.arb, mrng.clone()));\n            return Object.defineProperties(s, {\n                toString: { value: () => prettyPrint(seenValues.map(stringify)) },\n                [toStringMethod]: { value: () => prettyPrint(seenValues.map(stringify)) },\n                [asyncToStringMethod]: { value: async () => prettyPrint(await Promise.all(seenValues.map(asyncStringify))) },\n                [cloneMethod]: { value: enrichedProducer, enumerable: true },\n            });\n        };\n        return new Value(enrichedProducer(), undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(_value, _context) {\n        return Stream.nil();\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,+CAA+C;AACzE,SAASC,KAAK,QAAQ,2CAA2C;AACjE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,SAAS,EAAEC,cAAc,QAAQ,0BAA0B;AACzG,SAASC,WAAW,CAACC,iBAAiB,EAAE;EACpC,OAAQ,UAASA,iBAAiB,CAACC,IAAI,CAAC,GAAG,CAAE,IAAG;AACpD;AACA,OAAO,MAAMC,eAAe,SAASX,SAAS,CAAC;EAC3CY,WAAW,CAACC,GAAG,EAAE;IACb,KAAK,EAAE;IACP,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACAC,QAAQ,CAACC,IAAI,EAAEC,UAAU,EAAE;IACvB,MAAMC,iBAAiB,GAAGD,UAAU,KAAKE,SAAS,IAAIH,IAAI,CAACI,OAAO,CAAC,CAAC,EAAEH,UAAU,CAAC,KAAK,CAAC,GAAGA,UAAU,GAAGE,SAAS;IAChH,MAAME,gBAAgB,GAAG,MAAM;MAC3B,MAAMC,UAAU,GAAG,EAAE;MACrB,MAAMC,CAAC,GAAG,WAAWT,GAAG,EAAEU,UAAU,EAAE;QAClC,OAAO,IAAI,EAAE;UACT,MAAMC,KAAK,GAAGX,GAAG,CAACC,QAAQ,CAACS,UAAU,EAAEN,iBAAiB,CAAC,CAACO,KAAK;UAC/DH,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC;UACtB,MAAMA,KAAK;QACf;MACJ,CAAC;MACD,MAAME,CAAC,GAAG,IAAIvB,MAAM,CAACmB,CAAC,CAAC,IAAI,CAACT,GAAG,EAAEE,IAAI,CAACY,KAAK,EAAE,CAAC,CAAC;MAC/C,OAAOC,MAAM,CAACC,gBAAgB,CAACH,CAAC,EAAE;QAC9BI,QAAQ,EAAE;UAAEN,KAAK,EAAE,MAAMhB,WAAW,CAACa,UAAU,CAACU,GAAG,CAACzB,SAAS,CAAC;QAAE,CAAC;QACjE,CAACC,cAAc,GAAG;UAAEiB,KAAK,EAAE,MAAMhB,WAAW,CAACa,UAAU,CAACU,GAAG,CAACzB,SAAS,CAAC;QAAE,CAAC;QACzE,CAACD,mBAAmB,GAAG;UAAEmB,KAAK,EAAE,YAAYhB,WAAW,CAAC,MAAMwB,OAAO,CAACC,GAAG,CAACZ,UAAU,CAACU,GAAG,CAAC3B,cAAc,CAAC,CAAC;QAAE,CAAC;QAC5G,CAACF,WAAW,GAAG;UAAEsB,KAAK,EAAEJ,gBAAgB;UAAEc,UAAU,EAAE;QAAK;MAC/D,CAAC,CAAC;IACN,CAAC;IACD,OAAO,IAAIjC,KAAK,CAACmB,gBAAgB,EAAE,EAAEF,SAAS,CAAC;EACnD;EACAiB,uBAAuB,CAACX,KAAK,EAAE;IAC3B,OAAO,KAAK;EAChB;EACAY,MAAM,CAACC,MAAM,EAAEC,QAAQ,EAAE;IACrB,OAAOnC,MAAM,CAACoC,GAAG,EAAE;EACvB;AACJ"},"metadata":{},"sourceType":"module"}
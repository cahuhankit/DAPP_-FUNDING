{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unrecognizedNumberMessage = exports.wrongLengthMessage = exports.notABytestringMessage = exports.tooPreciseMessage = exports.overlongMessage = exports.specifiedTypeMessage = exports.wrappedTypeMessage = exports.negativeBytesMessage = exports.looseModeOnlyMessage = exports.invalidUtf16Message = exports.checksumFailedMessage = exports.outOfRangeEnumMessage = exports.outOfRangeMessage = exports.badEnumMessage = exports.nonSafeMessage = exports.nonNumericMessage = exports.nonIntegerMessage = exports.notAStringMessage = exports.errorResultMessage = exports.wrongArrayLengthMessage = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:wrap:messages\");\nconst Format = __importStar(require(\"../format\"));\nfunction wrongArrayLengthMessage(expected, got) {\n  return `Incorrect array length (expected ${expected.toString()} entries, got ${got})`;\n}\nexports.wrongArrayLengthMessage = wrongArrayLengthMessage;\nexports.errorResultMessage = \"Input is a wrapped result representing an error rather than a value\";\nexports.notAStringMessage = \"Input was not a string, type/value pair, or wrapped or boxed string\";\nexports.nonIntegerMessage = \"Input numeric value was not an integer\";\nexports.nonNumericMessage = \"Input string was not numeric\";\nexports.nonSafeMessage = \"Input number is not a Javascript safe integer\";\nexports.badEnumMessage = \"Input string was neither numeric nor a valid enum value\";\nexports.outOfRangeMessage = \"Input is outside the range of this numeric type\";\nexports.outOfRangeEnumMessage = \"Input is outside the range of this enum type\";\nexports.checksumFailedMessage = \"Address checksum failed (use all lowercase or all uppercase to circumvent)\";\nexports.invalidUtf16Message = \"Input string was not valid UTF-16\";\nexports.looseModeOnlyMessage = \"Numeric input for bytes is only allowed in loose mode and only for dynamic-length bytestrings\";\nexports.negativeBytesMessage = \"Input for bytes cannot be negative\";\nfunction wrappedTypeMessage(dataType) {\n  return `Input is a wrapped value of type ${Format.Types.typeString(dataType)}`;\n}\nexports.wrappedTypeMessage = wrappedTypeMessage;\nfunction specifiedTypeMessage(dataType) {\n  return `Input had type explicitly specified as ${dataType}`;\n}\nexports.specifiedTypeMessage = specifiedTypeMessage;\nfunction overlongMessage(expected, got) {\n  return `Input is too long for type (expected ${expected} bytes, got ${got} bytes)`;\n}\nexports.overlongMessage = overlongMessage;\nfunction tooPreciseMessage(expected, got) {\n  return `Input has too many decimal places for type (expected ${expected} decimal places, got ${got} decimal places)`;\n}\nexports.tooPreciseMessage = tooPreciseMessage;\nfunction notABytestringMessage(what) {\n  return `${what} is not a valid bytestring (even-length hex string)`;\n}\nexports.notABytestringMessage = notABytestringMessage;\nfunction wrongLengthMessage(what, expected, got) {\n  return `Input ${what} was ${got} bytes instead of ${expected} bytes`;\n}\nexports.wrongLengthMessage = wrongLengthMessage;\nfunction unrecognizedNumberMessage(dataType) {\n  const enumMessage = dataType.typeClass === \"enum\" ? \"enum value name, \" : \"\";\n  const byteArrayMessage = dataType.typeClass !== \"fixed\" && dataType.typeClass !== \"ufixed\" ? \"byte-array-like, \" : \"\";\n  return `Input was not a number, big integer, numeric string, ${enumMessage}type/value pair, boxed number, ${byteArrayMessage}wrapped number or enum, or recognized big number class`;\n}\nexports.unrecognizedNumberMessage = unrecognizedNumberMessage;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,MAAMA,KAAK,GAAG,mBAAW,EAAC,qBAAqB,CAAC;AAIhD;AAEA,SAAgBC,uBAAuB,CAACC,QAAqB,EAAEC,GAAW;EACxE,OAAO,oCAAoCD,QAAQ,CAACE,QAAQ,EAAE,iBAAiBD,GAAG,GAAG;AACvF;AAFAE;AAIaA,0BAAkB,GAC7B,qEAAqE;AAC1DA,yBAAiB,GAC5B,qEAAqE;AAC1DA,yBAAiB,GAAW,wCAAwC;AACpEA,yBAAiB,GAAW,8BAA8B;AAC1DA,sBAAc,GAAW,+CAA+C;AACxEA,sBAAc,GACzB,yDAAyD;AAC9CA,yBAAiB,GAAW,iDAAiD;AAC7EA,6BAAqB,GAAW,8CAA8C;AAC9EA,6BAAqB,GAChC,4EAA4E;AACjEA,2BAAmB,GAAY,mCAAmC;AAClEA,4BAAoB,GAAW,+FAA+F;AAC9HA,4BAAoB,GAAW,oCAAoC;AAEhF,SAAgBC,kBAAkB,CAACC,QAA2B;EAC5D,OAAO,oCAAoCC,MAAM,CAACC,KAAK,CAACC,UAAU,CAChEH,QAAQ,CACT,EAAE;AACL;AAJAF;AAKA,SAAgBM,oBAAoB,CAACJ,QAAgB;EACnD,OAAO,0CAA0CA,QAAQ,EAAE;AAC7D;AAFAF;AAGA,SAAgBO,eAAe,CAACV,QAAgB,EAAEC,GAAW;EAC3D,OAAO,wCAAwCD,QAAQ,eAAeC,GAAG,SAAS;AACpF;AAFAE;AAGA,SAAgBQ,iBAAiB,CAACX,QAAgB,EAAEC,GAAW;EAC7D,OAAO,wDAAwDD,QAAQ,wBAAwBC,GAAG,kBAAkB;AACtH;AAFAE;AAGA,SAAgBS,qBAAqB,CAACC,IAAY;EAChD,OAAO,GAAGA,IAAI,qDAAqD;AACrE;AAFAV;AAGA,SAAgBW,kBAAkB,CAChCD,IAAY,EACZb,QAAgB,EAChBC,GAAW;EAEX,OAAO,SAASY,IAAI,QAAQZ,GAAG,qBAAqBD,QAAQ,QAAQ;AACtE;AANAG;AAQA,SAAgBY,yBAAyB,CACvCV,QAAyC;EAEzC,MAAMW,WAAW,GAAGX,QAAQ,CAACY,SAAS,KAAK,MAAM,GAC7C,mBAAmB,GACnB,EAAE;EACN,MAAMC,gBAAgB,GACpBb,QAAQ,CAACY,SAAS,KAAK,OAAO,IAAIZ,QAAQ,CAACY,SAAS,KAAK,QAAQ,GAC7D,mBAAmB,GACnB,EAAE;EACR,OAAO,wDAAwDD,WAAW,kCAAkCE,gBAAgB,wDAAwD;AACtL;AAXAf","names":["debug","wrongArrayLengthMessage","expected","got","toString","exports","wrappedTypeMessage","dataType","Format","Types","typeString","specifiedTypeMessage","overlongMessage","tooPreciseMessage","notABytestringMessage","what","wrongLengthMessage","unrecognizedNumberMessage","enumMessage","typeClass","byteArrayMessage"],"sourceRoot":"","sources":["../../../lib/wrap/messages.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
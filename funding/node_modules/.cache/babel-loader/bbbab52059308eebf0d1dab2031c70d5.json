{"ast":null,"code":"/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\nconst web3Utils = require(\"web3-utils\");\n\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\nconst _convertNumber = function (val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n    case \"BN\":\n      return web3Utils.toBN(val);\n    case \"String\":\n      return val;\n    case \"BigInt\":\n      return BigInt(val);\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\nconst _convertNumberArray = function (arr, format) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (depth == 0) return arr.map(item => _convertNumber(item, format));\n  // arr is nested\n  return arr.map(item => _convertNumberArray(item, format, depth - 1));\n};\n\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\nconst numbers = function (result, abiSegment) {\n  const format = this.numberFormat;\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // larger than zero if nested array\n        let depth = output.type.split(\"[\").length - 2;\n\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format, depth);\n\n          // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(result[output.name], format, depth);\n          }\n          // output will always have an index key\n          result[i] = _convertNumberArray(result[i], format, depth);\n        }\n        //\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        }\n\n        // output will always have an index key\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\nmodule.exports = {\n  numbers: numbers\n};","map":{"version":3,"names":["BigNumber","require","web3Utils","_convertNumber","val","format","badFormatMsg","toBN","BigInt","Error","_convertNumberArray","arr","depth","map","item","numbers","result","abiSegment","numberFormat","forEach","output","i","type","includes","split","length","Array","isArray","name","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/@truffle/contract/lib/reformat.js"],"sourcesContent":["/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\nconst web3Utils = require(\"web3-utils\");\n\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\nconst _convertNumber = function(val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n    case \"BN\":\n      return web3Utils.toBN(val);\n    case \"String\":\n      return val;\n    case \"BigInt\":\n      return BigInt(val);\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\nconst _convertNumberArray = function(arr, format, depth = 0) {\n  if (depth == 0) return arr.map(item => _convertNumber(item, format));\n  // arr is nested\n  return arr.map(item => _convertNumberArray(item, format, depth - 1));\n};\n\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\nconst numbers = function(result, abiSegment) {\n  const format = this.numberFormat;\n\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // larger than zero if nested array\n        let depth = output.type.split(\"[\").length - 2;\n\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format, depth);\n\n          // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(\n              result[output.name],\n              format,\n              depth\n            );\n          }\n          // output will always have an index key\n          result[i] = _convertNumberArray(result[i], format, depth);\n        }\n        //\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        }\n\n        // output will always have an index key\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,GAAG,UAASC,GAAG,EAAEC,MAAM,EAAE;EAC3C,MAAMC,YAAY,GAAI,mDAAkDD,MAAO,EAAC;EAEhF,QAAQA,MAAM;IACZ,KAAK,WAAW;MACd,OAAO,IAAIL,SAAS,CAACI,GAAG,CAAC;IAC3B,KAAK,IAAI;MACP,OAAOF,SAAS,CAACK,IAAI,CAACH,GAAG,CAAC;IAC5B,KAAK,QAAQ;MACX,OAAOA,GAAG;IACZ,KAAK,QAAQ;MACX,OAAOI,MAAM,CAACJ,GAAG,CAAC;IACpB;MACE,MAAM,IAAIK,KAAK,CAACH,YAAY,CAAC;EAAC;AAEpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,mBAAmB,GAAG,UAASC,GAAG,EAAEN,MAAM,EAAa;EAAA,IAAXO,KAAK,uEAAG,CAAC;EACzD,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAOD,GAAG,CAACE,GAAG,CAACC,IAAI,IAAIX,cAAc,CAACW,IAAI,EAAET,MAAM,CAAC,CAAC;EACpE;EACA,OAAOM,GAAG,CAACE,GAAG,CAACC,IAAI,IAAIJ,mBAAmB,CAACI,IAAI,EAAET,MAAM,EAAEO,KAAK,GAAG,CAAC,CAAC,CAAC;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAG,UAASC,MAAM,EAAEC,UAAU,EAAE;EAC3C,MAAMZ,MAAM,GAAG,IAAI,CAACa,YAAY;EAEhCD,UAAU,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAChC;IACA,IAAID,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC/B;MACA,IAAIH,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B;QACA,IAAIX,KAAK,GAAGQ,MAAM,CAACE,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC;;QAE7C;QACA,IAAIC,KAAK,CAACC,OAAO,CAACX,MAAM,CAAC,EAAE;UACzBA,MAAM,GAAGN,mBAAmB,CAACM,MAAM,EAAEX,MAAM,EAAEO,KAAK,CAAC;;UAEnD;QACF,CAAC,MAAM;UACL;UACA,IAAIQ,MAAM,CAACQ,IAAI,CAACH,MAAM,EAAE;YACtBT,MAAM,CAACI,MAAM,CAACQ,IAAI,CAAC,GAAGlB,mBAAmB,CACvCM,MAAM,CAACI,MAAM,CAACQ,IAAI,CAAC,EACnBvB,MAAM,EACNO,KAAK,CACN;UACH;UACA;UACAI,MAAM,CAACK,CAAC,CAAC,GAAGX,mBAAmB,CAACM,MAAM,CAACK,CAAC,CAAC,EAAEhB,MAAM,EAAEO,KAAK,CAAC;QAC3D;QACA;MACF,CAAC,MAAM,IAAI,OAAOI,MAAM,KAAK,QAAQ,EAAE;QACrC;QACA,IAAII,MAAM,CAACQ,IAAI,CAACH,MAAM,EAAE;UACtBT,MAAM,CAACI,MAAM,CAACQ,IAAI,CAAC,GAAGzB,cAAc,CAACa,MAAM,CAACI,MAAM,CAACQ,IAAI,CAAC,EAAEvB,MAAM,CAAC;QACnE;;QAEA;QACAW,MAAM,CAACK,CAAC,CAAC,GAAGlB,cAAc,CAACa,MAAM,CAACK,CAAC,CAAC,EAAEhB,MAAM,CAAC;MAC/C,CAAC,MAAM;QACLW,MAAM,GAAGb,cAAc,CAACa,MAAM,EAAEX,MAAM,CAAC;MACzC;IACF;EACF,CAAC,CAAC;EACF,OAAOW,MAAM;AACf,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAG;EACff,OAAO,EAAEA;AACX,CAAC"},"metadata":{},"sourceType":"script"}
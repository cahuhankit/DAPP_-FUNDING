{"ast":null,"code":"\"use strict\";\n\nconst Blockchain = {\n  getBlockByNumber(blockNumber, provider, callback) {\n    const params = [blockNumber, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByNumber\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n  getBlockByHash(blockHash, provider, callback) {\n    const params = [blockHash, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByHash\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n  parse(uri) {\n    const parsed = {};\n    if (uri.indexOf(\"blockchain://\") !== 0) return parsed;\n    const cleanUri = uri.replace(\"blockchain://\", \"\");\n    const pieces = cleanUri.split(\"/block/\");\n    parsed.genesis_hash = `0x${pieces[0]}`;\n    parsed.block_hash = `0x${pieces[1]}`;\n    return parsed;\n  },\n  asURI(provider) {\n    return new Promise((resolve, reject) => {\n      let genesis, latest;\n      this.getBlockByNumber(\"0x0\", provider, (err, _ref) => {\n        let {\n          result\n        } = _ref;\n        if (err) return reject(err);\n        genesis = result;\n        this.getBlockByNumber(\"latest\", provider, (err, _ref2) => {\n          let {\n            result\n          } = _ref2;\n          if (err) return reject(err);\n          latest = result;\n          const url = `blockchain://${genesis.hash.replace(\"0x\", \"\")}/block/${latest.hash.replace(\"0x\", \"\")}`;\n          resolve(url);\n        });\n      });\n    });\n  },\n  matches(uri, provider) {\n    return new Promise((resolve, reject) => {\n      const parsedUri = this.parse(uri);\n      const expectedGenesis = parsedUri.genesis_hash;\n      const expectedBlock = parsedUri.block_hash;\n      this.getBlockByNumber(\"0x0\", provider, (err, _ref3) => {\n        let {\n          result\n        } = _ref3;\n        if (err) return reject(err);\n        const block = result;\n        if (block.hash !== expectedGenesis) return resolve(false);\n        this.getBlockByHash(expectedBlock, provider, (err, _ref4) => {\n          let {\n            result\n          } = _ref4;\n          // Treat an error as if the block didn't exist. This is because\n          // some clients respond differently.\n          const block = result;\n          if (err || block == null) {\n            return resolve(false);\n          }\n          resolve(true);\n        });\n      });\n    });\n  }\n};\nmodule.exports = Blockchain;","map":{"version":3,"mappings":"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","names":["Blockchain","getBlockByNumber","blockNumber","provider","callback","params","send","jsonrpc","method","id","Date","now","getBlockByHash","blockHash","parse","uri","parsed","indexOf","cleanUri","replace","pieces","split","genesis_hash","block_hash","asURI","Promise","resolve","reject","genesis","latest","err","result","url","hash","matches","parsedUri","expectedGenesis","expectedBlock","block","module"],"sourceRoot":"","sources":["../index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
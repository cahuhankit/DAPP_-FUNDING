{"ast":null,"code":"import { clone64, isEqual64 } from './ArrayInt64.js';\nconst INDEX_POSITIVE_INFINITY = {\n  sign: 1,\n  data: [2146435072, 0]\n};\nconst INDEX_NEGATIVE_INFINITY = {\n  sign: -1,\n  data: [2146435072, 1]\n};\nexport function decomposeDouble(d) {\n  const maxSignificand = 2 - Number.EPSILON;\n  for (let exponent = -1022; exponent !== 1024; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n    if (Math.abs(d) <= maxForExponent) {\n      return {\n        exponent,\n        significand: d / powExponent\n      };\n    }\n  }\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\nfunction positiveNumberToInt64(n) {\n  return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n  if (exponent === -1022) {\n    const rescaledSignificand = significand * 2 ** 52;\n    return positiveNumberToInt64(rescaledSignificand);\n  }\n  const rescaledSignificand = (significand - 1) * 2 ** 52;\n  const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n  const index = positiveNumberToInt64(rescaledSignificand);\n  index[0] += exponentOnlyHigh;\n  return index;\n}\nexport function doubleToIndex(d) {\n  if (d === Number.POSITIVE_INFINITY) {\n    return clone64(INDEX_POSITIVE_INFINITY);\n  }\n  if (d === Number.NEGATIVE_INFINITY) {\n    return clone64(INDEX_NEGATIVE_INFINITY);\n  }\n  const decomp = decomposeDouble(d);\n  const exponent = decomp.exponent;\n  const significand = decomp.significand;\n  if (d > 0 || d === 0 && 1 / d === Number.POSITIVE_INFINITY) {\n    return {\n      sign: 1,\n      data: indexInDoubleFromDecomp(exponent, significand)\n    };\n  } else {\n    const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n    if (indexOpposite[1] === 0xffffffff) {\n      indexOpposite[0] += 1;\n      indexOpposite[1] = 0;\n    } else {\n      indexOpposite[1] += 1;\n    }\n    return {\n      sign: -1,\n      data: indexOpposite\n    };\n  }\n}\nexport function indexToDouble(index) {\n  if (index.sign === -1) {\n    const indexOpposite = {\n      sign: 1,\n      data: [index.data[0], index.data[1]]\n    };\n    if (indexOpposite.data[1] === 0) {\n      indexOpposite.data[0] -= 1;\n      indexOpposite.data[1] = 0xffffffff;\n    } else {\n      indexOpposite.data[1] -= 1;\n    }\n    return -indexToDouble(indexOpposite);\n  }\n  if (isEqual64(index, INDEX_POSITIVE_INFINITY)) {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (index.data[0] < 0x200000) {\n    return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n  }\n  const postIndexHigh = index.data[0] - 0x200000;\n  const exponent = -1021 + (postIndexHigh >> 20);\n  const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n  return significand * 2 ** exponent;\n}","map":{"version":3,"names":["clone64","isEqual64","INDEX_POSITIVE_INFINITY","sign","data","INDEX_NEGATIVE_INFINITY","decomposeDouble","d","maxSignificand","Number","EPSILON","exponent","powExponent","maxForExponent","Math","abs","significand","NaN","positiveNumberToInt64","n","indexInDoubleFromDecomp","rescaledSignificand","exponentOnlyHigh","index","doubleToIndex","POSITIVE_INFINITY","NEGATIVE_INFINITY","decomp","indexOpposite","indexToDouble","postIndexHigh"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DoubleHelpers.js"],"sourcesContent":["import { clone64, isEqual64 } from './ArrayInt64.js';\nconst INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };\nconst INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };\nexport function decomposeDouble(d) {\n    const maxSignificand = 2 - Number.EPSILON;\n    for (let exponent = -1022; exponent !== 1024; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(d) <= maxForExponent) {\n            return { exponent, significand: d / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nfunction positiveNumberToInt64(n) {\n    return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n    if (exponent === -1022) {\n        const rescaledSignificand = significand * 2 ** 52;\n        return positiveNumberToInt64(rescaledSignificand);\n    }\n    const rescaledSignificand = (significand - 1) * 2 ** 52;\n    const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n    const index = positiveNumberToInt64(rescaledSignificand);\n    index[0] += exponentOnlyHigh;\n    return index;\n}\nexport function doubleToIndex(d) {\n    if (d === Number.POSITIVE_INFINITY) {\n        return clone64(INDEX_POSITIVE_INFINITY);\n    }\n    if (d === Number.NEGATIVE_INFINITY) {\n        return clone64(INDEX_NEGATIVE_INFINITY);\n    }\n    const decomp = decomposeDouble(d);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (d > 0 || (d === 0 && 1 / d === Number.POSITIVE_INFINITY)) {\n        return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };\n    }\n    else {\n        const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n        if (indexOpposite[1] === 0xffffffff) {\n            indexOpposite[0] += 1;\n            indexOpposite[1] = 0;\n        }\n        else {\n            indexOpposite[1] += 1;\n        }\n        return { sign: -1, data: indexOpposite };\n    }\n}\nexport function indexToDouble(index) {\n    if (index.sign === -1) {\n        const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };\n        if (indexOpposite.data[1] === 0) {\n            indexOpposite.data[0] -= 1;\n            indexOpposite.data[1] = 0xffffffff;\n        }\n        else {\n            indexOpposite.data[1] -= 1;\n        }\n        return -indexToDouble(indexOpposite);\n    }\n    if (isEqual64(index, INDEX_POSITIVE_INFINITY)) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index.data[0] < 0x200000) {\n        return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n    }\n    const postIndexHigh = index.data[0] - 0x200000;\n    const exponent = -1021 + (postIndexHigh >> 20);\n    const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n    return significand * 2 ** exponent;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
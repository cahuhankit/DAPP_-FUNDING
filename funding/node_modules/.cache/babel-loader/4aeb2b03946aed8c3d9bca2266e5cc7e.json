{"ast":null,"code":"const execute = require(\"../execute\");\nconst debug = require(\"debug\")(\"contract:contract:bootstrap\");\nmodule.exports = fn => {\n  // Add our static methods\n  // Add something here about excluding send, privately defined methods\n  Object.keys(fn._constructorMethods).forEach(function (key) {\n    fn[key] = fn._constructorMethods[key].bind(fn);\n  });\n\n  // Add our properties.\n  Object.keys(fn._properties).forEach(function (key) {\n    fn.addProp(key, fn._properties[key]);\n  });\n\n  // estimateGas & request as sub-property of new\n  fn[\"new\"].estimateGas = execute.estimateDeployment.bind(fn);\n  fn[\"new\"].request = execute.requestDeployment.bind(fn);\n\n  //add enumerations. (probably these should go in\n  //constructorMethods.js, but this is easier to modify... we'll\n  //redo all this in the rewrite anyway)\n  if (fn._json) {\n    //getters will throw otherwise!\n    if (fn.ast) {\n      //note this was set up earlier\n      const node = locateNode(fn.contractName, fn.ast); //name also set up earlier\n      if (node) {\n        fn.enums = extractEnums(node);\n        for (const [name, enumeration] of Object.entries(fn.enums)) {\n          //enum is a reserved word :P\n          if (!(name in fn)) {\n            //don't overwrite anything!\n            fn[name] = enumeration;\n          }\n        }\n      }\n    }\n  }\n  return fn;\n};\nfunction locateNode(name, ast) {\n  if (ast.nodeType === \"SourceUnit\") {\n    return ast.nodes.find(node => node.nodeType === \"ContractDefinition\" && node.name === name);\n  } else {\n    return undefined;\n  }\n}\nfunction extractEnums(node) {\n  return Object.assign({}, ...node.nodes.filter(definition => definition.nodeType === \"EnumDefinition\").map(definition => ({\n    [definition.name]: Object.assign({}, ...definition.members.map((member, index) => ({\n      [member.name]: index\n    })))\n  })));\n}","map":{"version":3,"names":["execute","require","debug","module","exports","fn","Object","keys","_constructorMethods","forEach","key","bind","_properties","addProp","estimateGas","estimateDeployment","request","requestDeployment","_json","ast","node","locateNode","contractName","enums","extractEnums","name","enumeration","entries","nodeType","nodes","find","undefined","assign","filter","definition","map","members","member","index"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/@truffle/contract/lib/contract/bootstrap.js"],"sourcesContent":["const execute = require(\"../execute\");\nconst debug = require(\"debug\")(\"contract:contract:bootstrap\");\n\nmodule.exports = fn => {\n  // Add our static methods\n  // Add something here about excluding send, privately defined methods\n  Object.keys(fn._constructorMethods).forEach(function (key) {\n    fn[key] = fn._constructorMethods[key].bind(fn);\n  });\n\n  // Add our properties.\n  Object.keys(fn._properties).forEach(function (key) {\n    fn.addProp(key, fn._properties[key]);\n  });\n\n  // estimateGas & request as sub-property of new\n  fn[\"new\"].estimateGas = execute.estimateDeployment.bind(fn);\n  fn[\"new\"].request = execute.requestDeployment.bind(fn);\n\n  //add enumerations. (probably these should go in\n  //constructorMethods.js, but this is easier to modify... we'll\n  //redo all this in the rewrite anyway)\n  if (fn._json) {\n    //getters will throw otherwise!\n    if (fn.ast) {\n      //note this was set up earlier\n      const node = locateNode(fn.contractName, fn.ast); //name also set up earlier\n      if (node) {\n        fn.enums = extractEnums(node);\n        for (const [name, enumeration] of Object.entries(fn.enums)) {\n          //enum is a reserved word :P\n          if (!(name in fn)) {\n            //don't overwrite anything!\n            fn[name] = enumeration;\n          }\n        }\n      }\n    }\n  }\n\n  return fn;\n};\n\nfunction locateNode(name, ast) {\n  if (ast.nodeType === \"SourceUnit\") {\n    return ast.nodes.find(\n      node => node.nodeType === \"ContractDefinition\" && node.name === name\n    );\n  } else {\n    return undefined;\n  }\n}\n\nfunction extractEnums(node) {\n  return Object.assign(\n    {},\n    ...node.nodes\n      .filter(definition => definition.nodeType === \"EnumDefinition\")\n      .map(definition => ({\n        [definition.name]: Object.assign(\n          {},\n          ...definition.members.map((member, index) => ({[member.name]: index}))\n        )\n      }))\n  );\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAAC,6BAA6B,CAAC;AAE7DE,MAAM,CAACC,OAAO,GAAGC,EAAE,IAAI;EACrB;EACA;EACAC,MAAM,CAACC,IAAI,CAACF,EAAE,CAACG,mBAAmB,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;IACzDL,EAAE,CAACK,GAAG,CAAC,GAAGL,EAAE,CAACG,mBAAmB,CAACE,GAAG,CAAC,CAACC,IAAI,CAACN,EAAE,CAAC;EAChD,CAAC,CAAC;;EAEF;EACAC,MAAM,CAACC,IAAI,CAACF,EAAE,CAACO,WAAW,CAAC,CAACH,OAAO,CAAC,UAAUC,GAAG,EAAE;IACjDL,EAAE,CAACQ,OAAO,CAACH,GAAG,EAAEL,EAAE,CAACO,WAAW,CAACF,GAAG,CAAC,CAAC;EACtC,CAAC,CAAC;;EAEF;EACAL,EAAE,CAAC,KAAK,CAAC,CAACS,WAAW,GAAGd,OAAO,CAACe,kBAAkB,CAACJ,IAAI,CAACN,EAAE,CAAC;EAC3DA,EAAE,CAAC,KAAK,CAAC,CAACW,OAAO,GAAGhB,OAAO,CAACiB,iBAAiB,CAACN,IAAI,CAACN,EAAE,CAAC;;EAEtD;EACA;EACA;EACA,IAAIA,EAAE,CAACa,KAAK,EAAE;IACZ;IACA,IAAIb,EAAE,CAACc,GAAG,EAAE;MACV;MACA,MAAMC,IAAI,GAAGC,UAAU,CAAChB,EAAE,CAACiB,YAAY,EAAEjB,EAAE,CAACc,GAAG,CAAC,CAAC,CAAC;MAClD,IAAIC,IAAI,EAAE;QACRf,EAAE,CAACkB,KAAK,GAAGC,YAAY,CAACJ,IAAI,CAAC;QAC7B,KAAK,MAAM,CAACK,IAAI,EAAEC,WAAW,CAAC,IAAIpB,MAAM,CAACqB,OAAO,CAACtB,EAAE,CAACkB,KAAK,CAAC,EAAE;UAC1D;UACA,IAAI,EAAEE,IAAI,IAAIpB,EAAE,CAAC,EAAE;YACjB;YACAA,EAAE,CAACoB,IAAI,CAAC,GAAGC,WAAW;UACxB;QACF;MACF;IACF;EACF;EAEA,OAAOrB,EAAE;AACX,CAAC;AAED,SAASgB,UAAU,CAACI,IAAI,EAAEN,GAAG,EAAE;EAC7B,IAAIA,GAAG,CAACS,QAAQ,KAAK,YAAY,EAAE;IACjC,OAAOT,GAAG,CAACU,KAAK,CAACC,IAAI,CACnBV,IAAI,IAAIA,IAAI,CAACQ,QAAQ,KAAK,oBAAoB,IAAIR,IAAI,CAACK,IAAI,KAAKA,IAAI,CACrE;EACH,CAAC,MAAM;IACL,OAAOM,SAAS;EAClB;AACF;AAEA,SAASP,YAAY,CAACJ,IAAI,EAAE;EAC1B,OAAOd,MAAM,CAAC0B,MAAM,CAClB,CAAC,CAAC,EACF,GAAGZ,IAAI,CAACS,KAAK,CACVI,MAAM,CAACC,UAAU,IAAIA,UAAU,CAACN,QAAQ,KAAK,gBAAgB,CAAC,CAC9DO,GAAG,CAACD,UAAU,KAAK;IAClB,CAACA,UAAU,CAACT,IAAI,GAAGnB,MAAM,CAAC0B,MAAM,CAC9B,CAAC,CAAC,EACF,GAAGE,UAAU,CAACE,OAAO,CAACD,GAAG,CAAC,CAACE,MAAM,EAAEC,KAAK,MAAM;MAAC,CAACD,MAAM,CAACZ,IAAI,GAAGa;IAAK,CAAC,CAAC,CAAC;EAE1E,CAAC,CAAC,CAAC,CACN;AACH"},"metadata":{},"sourceType":"script"}
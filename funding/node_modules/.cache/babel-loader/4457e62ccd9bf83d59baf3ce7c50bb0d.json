{"ast":null,"code":"import { buildPartialRecordArbitrary } from './_internals/builders/PartialRecordArbitraryBuilder.js';\nfunction record(recordModel, constraints) {\n  if (constraints == null) {\n    return buildPartialRecordArbitrary(recordModel, undefined);\n  }\n  if ('withDeletedKeys' in constraints && 'requiredKeys' in constraints) {\n    throw new Error(`requiredKeys and withDeletedKeys cannot be used together in fc.record`);\n  }\n  const requireDeletedKeys = 'requiredKeys' in constraints && constraints.requiredKeys !== undefined || 'withDeletedKeys' in constraints && !!constraints.withDeletedKeys;\n  if (!requireDeletedKeys) {\n    return buildPartialRecordArbitrary(recordModel, undefined);\n  }\n  const requiredKeys = ('requiredKeys' in constraints ? constraints.requiredKeys : undefined) || [];\n  for (let idx = 0; idx !== requiredKeys.length; ++idx) {\n    const descriptor = Object.getOwnPropertyDescriptor(recordModel, requiredKeys[idx]);\n    if (descriptor === undefined) {\n      throw new Error(`requiredKeys cannot reference keys that have not been defined in recordModel`);\n    }\n    if (!descriptor.enumerable) {\n      throw new Error(`requiredKeys cannot reference keys that have are enumerable in recordModel`);\n    }\n  }\n  return buildPartialRecordArbitrary(recordModel, requiredKeys);\n}\nexport { record };","map":{"version":3,"names":["buildPartialRecordArbitrary","record","recordModel","constraints","undefined","Error","requireDeletedKeys","requiredKeys","withDeletedKeys","idx","length","descriptor","Object","getOwnPropertyDescriptor","enumerable"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/record.js"],"sourcesContent":["import { buildPartialRecordArbitrary } from './_internals/builders/PartialRecordArbitraryBuilder.js';\nfunction record(recordModel, constraints) {\n    if (constraints == null) {\n        return buildPartialRecordArbitrary(recordModel, undefined);\n    }\n    if ('withDeletedKeys' in constraints && 'requiredKeys' in constraints) {\n        throw new Error(`requiredKeys and withDeletedKeys cannot be used together in fc.record`);\n    }\n    const requireDeletedKeys = ('requiredKeys' in constraints && constraints.requiredKeys !== undefined) ||\n        ('withDeletedKeys' in constraints && !!constraints.withDeletedKeys);\n    if (!requireDeletedKeys) {\n        return buildPartialRecordArbitrary(recordModel, undefined);\n    }\n    const requiredKeys = ('requiredKeys' in constraints ? constraints.requiredKeys : undefined) || [];\n    for (let idx = 0; idx !== requiredKeys.length; ++idx) {\n        const descriptor = Object.getOwnPropertyDescriptor(recordModel, requiredKeys[idx]);\n        if (descriptor === undefined) {\n            throw new Error(`requiredKeys cannot reference keys that have not been defined in recordModel`);\n        }\n        if (!descriptor.enumerable) {\n            throw new Error(`requiredKeys cannot reference keys that have are enumerable in recordModel`);\n        }\n    }\n    return buildPartialRecordArbitrary(recordModel, requiredKeys);\n}\nexport { record };\n"],"mappings":"AAAA,SAASA,2BAA2B,QAAQ,wDAAwD;AACpG,SAASC,MAAM,CAACC,WAAW,EAAEC,WAAW,EAAE;EACtC,IAAIA,WAAW,IAAI,IAAI,EAAE;IACrB,OAAOH,2BAA2B,CAACE,WAAW,EAAEE,SAAS,CAAC;EAC9D;EACA,IAAI,iBAAiB,IAAID,WAAW,IAAI,cAAc,IAAIA,WAAW,EAAE;IACnE,MAAM,IAAIE,KAAK,CAAE,uEAAsE,CAAC;EAC5F;EACA,MAAMC,kBAAkB,GAAI,cAAc,IAAIH,WAAW,IAAIA,WAAW,CAACI,YAAY,KAAKH,SAAS,IAC9F,iBAAiB,IAAID,WAAW,IAAI,CAAC,CAACA,WAAW,CAACK,eAAgB;EACvE,IAAI,CAACF,kBAAkB,EAAE;IACrB,OAAON,2BAA2B,CAACE,WAAW,EAAEE,SAAS,CAAC;EAC9D;EACA,MAAMG,YAAY,GAAG,CAAC,cAAc,IAAIJ,WAAW,GAAGA,WAAW,CAACI,YAAY,GAAGH,SAAS,KAAK,EAAE;EACjG,KAAK,IAAIK,GAAG,GAAG,CAAC,EAAEA,GAAG,KAAKF,YAAY,CAACG,MAAM,EAAE,EAAED,GAAG,EAAE;IAClD,MAAME,UAAU,GAAGC,MAAM,CAACC,wBAAwB,CAACX,WAAW,EAAEK,YAAY,CAACE,GAAG,CAAC,CAAC;IAClF,IAAIE,UAAU,KAAKP,SAAS,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAE,8EAA6E,CAAC;IACnG;IACA,IAAI,CAACM,UAAU,CAACG,UAAU,EAAE;MACxB,MAAM,IAAIT,KAAK,CAAE,4EAA2E,CAAC;IACjG;EACJ;EACA,OAAOL,2BAA2B,CAACE,WAAW,EAAEK,YAAY,CAAC;AACjE;AACA,SAASN,MAAM"},"metadata":{},"sourceType":"module"}
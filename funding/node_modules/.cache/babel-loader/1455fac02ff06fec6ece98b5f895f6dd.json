{"ast":null,"code":"import { Value } from '../../../check/arbitrary/definition/Value.js';\nimport { stream } from '../../../stream/Stream.js';\nfunction halvePosInteger(n) {\n  return Math.floor(n / 2);\n}\nfunction halveNegInteger(n) {\n  return Math.ceil(n / 2);\n}\nexport function shrinkInteger(current, target, tryTargetAsap) {\n  const realGap = current - target;\n  function* shrinkDecr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halvePosInteger(realGap);\n    for (let toremove = gap; toremove > 0; toremove = halvePosInteger(toremove)) {\n      const next = toremove === realGap ? target : current - toremove;\n      yield new Value(next, previous);\n      previous = next;\n    }\n  }\n  function* shrinkIncr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halveNegInteger(realGap);\n    for (let toremove = gap; toremove < 0; toremove = halveNegInteger(toremove)) {\n      const next = toremove === realGap ? target : current - toremove;\n      yield new Value(next, previous);\n      previous = next;\n    }\n  }\n  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}","map":{"version":3,"names":["Value","stream","halvePosInteger","n","Math","floor","halveNegInteger","ceil","shrinkInteger","current","target","tryTargetAsap","realGap","shrinkDecr","previous","undefined","gap","toremove","next","shrinkIncr"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkInteger.js"],"sourcesContent":["import { Value } from '../../../check/arbitrary/definition/Value.js';\nimport { stream } from '../../../stream/Stream.js';\nfunction halvePosInteger(n) {\n    return Math.floor(n / 2);\n}\nfunction halveNegInteger(n) {\n    return Math.ceil(n / 2);\n}\nexport function shrinkInteger(current, target, tryTargetAsap) {\n    const realGap = current - target;\n    function* shrinkDecr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halvePosInteger(realGap);\n        for (let toremove = gap; toremove > 0; toremove = halvePosInteger(toremove)) {\n            const next = toremove === realGap ? target : current - toremove;\n            yield new Value(next, previous);\n            previous = next;\n        }\n    }\n    function* shrinkIncr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveNegInteger(realGap);\n        for (let toremove = gap; toremove < 0; toremove = halveNegInteger(toremove)) {\n            const next = toremove === realGap ? target : current - toremove;\n            yield new Value(next, previous);\n            previous = next;\n        }\n    }\n    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,8CAA8C;AACpE,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,eAAe,CAACC,CAAC,EAAE;EACxB,OAAOC,IAAI,CAACC,KAAK,CAACF,CAAC,GAAG,CAAC,CAAC;AAC5B;AACA,SAASG,eAAe,CAACH,CAAC,EAAE;EACxB,OAAOC,IAAI,CAACG,IAAI,CAACJ,CAAC,GAAG,CAAC,CAAC;AAC3B;AACA,OAAO,SAASK,aAAa,CAACC,OAAO,EAAEC,MAAM,EAAEC,aAAa,EAAE;EAC1D,MAAMC,OAAO,GAAGH,OAAO,GAAGC,MAAM;EAChC,UAAUG,UAAU,GAAG;IACnB,IAAIC,QAAQ,GAAGH,aAAa,GAAGI,SAAS,GAAGL,MAAM;IACjD,MAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAO,GAAGV,eAAe,CAACU,OAAO,CAAC;IAC9D,KAAK,IAAIK,QAAQ,GAAGD,GAAG,EAAEC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGf,eAAe,CAACe,QAAQ,CAAC,EAAE;MACzE,MAAMC,IAAI,GAAGD,QAAQ,KAAKL,OAAO,GAAGF,MAAM,GAAGD,OAAO,GAAGQ,QAAQ;MAC/D,MAAM,IAAIjB,KAAK,CAACkB,IAAI,EAAEJ,QAAQ,CAAC;MAC/BA,QAAQ,GAAGI,IAAI;IACnB;EACJ;EACA,UAAUC,UAAU,GAAG;IACnB,IAAIL,QAAQ,GAAGH,aAAa,GAAGI,SAAS,GAAGL,MAAM;IACjD,MAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAO,GAAGN,eAAe,CAACM,OAAO,CAAC;IAC9D,KAAK,IAAIK,QAAQ,GAAGD,GAAG,EAAEC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGX,eAAe,CAACW,QAAQ,CAAC,EAAE;MACzE,MAAMC,IAAI,GAAGD,QAAQ,KAAKL,OAAO,GAAGF,MAAM,GAAGD,OAAO,GAAGQ,QAAQ;MAC/D,MAAM,IAAIjB,KAAK,CAACkB,IAAI,EAAEJ,QAAQ,CAAC;MAC/BA,QAAQ,GAAGI,IAAI;IACnB;EACJ;EACA,OAAON,OAAO,GAAG,CAAC,GAAGX,MAAM,CAACY,UAAU,EAAE,CAAC,GAAGZ,MAAM,CAACkB,UAAU,EAAE,CAAC;AACpE"},"metadata":{},"sourceType":"module"}
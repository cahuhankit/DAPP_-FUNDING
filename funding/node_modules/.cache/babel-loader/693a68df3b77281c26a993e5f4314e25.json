{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nfunction isSafeContext(context) {\n  return context !== undefined;\n}\nfunction toGeneratorValue(value) {\n  if (value.hasToBeCloned) {\n    return new Value(value.value_, {\n      generatorContext: value.context\n    }, () => value.value);\n  }\n  return new Value(value.value_, {\n    generatorContext: value.context\n  });\n}\nfunction toShrinkerValue(value) {\n  if (value.hasToBeCloned) {\n    return new Value(value.value_, {\n      shrinkerContext: value.context\n    }, () => value.value);\n  }\n  return new Value(value.value_, {\n    shrinkerContext: value.context\n  });\n}\nexport class WithShrinkFromOtherArbitrary extends Arbitrary {\n  constructor(generatorArbitrary, shrinkerArbitrary) {\n    super();\n    this.generatorArbitrary = generatorArbitrary;\n    this.shrinkerArbitrary = shrinkerArbitrary;\n  }\n  generate(mrng, biasFactor) {\n    return toGeneratorValue(this.generatorArbitrary.generate(mrng, biasFactor));\n  }\n  canShrinkWithoutContext(value) {\n    return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n  }\n  shrink(value, context) {\n    if (!isSafeContext(context)) {\n      return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerValue);\n    }\n    if ('generatorContext' in context) {\n      return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorValue);\n    }\n    return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerValue);\n  }\n}","map":{"version":3,"names":["Arbitrary","Value","isSafeContext","context","undefined","toGeneratorValue","value","hasToBeCloned","value_","generatorContext","toShrinkerValue","shrinkerContext","WithShrinkFromOtherArbitrary","constructor","generatorArbitrary","shrinkerArbitrary","generate","mrng","biasFactor","canShrinkWithoutContext","shrink","map"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/WithShrinkFromOtherArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nfunction isSafeContext(context) {\n    return context !== undefined;\n}\nfunction toGeneratorValue(value) {\n    if (value.hasToBeCloned) {\n        return new Value(value.value_, { generatorContext: value.context }, () => value.value);\n    }\n    return new Value(value.value_, { generatorContext: value.context });\n}\nfunction toShrinkerValue(value) {\n    if (value.hasToBeCloned) {\n        return new Value(value.value_, { shrinkerContext: value.context }, () => value.value);\n    }\n    return new Value(value.value_, { shrinkerContext: value.context });\n}\nexport class WithShrinkFromOtherArbitrary extends Arbitrary {\n    constructor(generatorArbitrary, shrinkerArbitrary) {\n        super();\n        this.generatorArbitrary = generatorArbitrary;\n        this.shrinkerArbitrary = shrinkerArbitrary;\n    }\n    generate(mrng, biasFactor) {\n        return toGeneratorValue(this.generatorArbitrary.generate(mrng, biasFactor));\n    }\n    canShrinkWithoutContext(value) {\n        return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        if (!isSafeContext(context)) {\n            return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerValue);\n        }\n        if ('generatorContext' in context) {\n            return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorValue);\n        }\n        return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerValue);\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,+CAA+C;AACzE,SAASC,KAAK,QAAQ,2CAA2C;AACjE,SAASC,aAAa,CAACC,OAAO,EAAE;EAC5B,OAAOA,OAAO,KAAKC,SAAS;AAChC;AACA,SAASC,gBAAgB,CAACC,KAAK,EAAE;EAC7B,IAAIA,KAAK,CAACC,aAAa,EAAE;IACrB,OAAO,IAAIN,KAAK,CAACK,KAAK,CAACE,MAAM,EAAE;MAAEC,gBAAgB,EAAEH,KAAK,CAACH;IAAQ,CAAC,EAAE,MAAMG,KAAK,CAACA,KAAK,CAAC;EAC1F;EACA,OAAO,IAAIL,KAAK,CAACK,KAAK,CAACE,MAAM,EAAE;IAAEC,gBAAgB,EAAEH,KAAK,CAACH;EAAQ,CAAC,CAAC;AACvE;AACA,SAASO,eAAe,CAACJ,KAAK,EAAE;EAC5B,IAAIA,KAAK,CAACC,aAAa,EAAE;IACrB,OAAO,IAAIN,KAAK,CAACK,KAAK,CAACE,MAAM,EAAE;MAAEG,eAAe,EAAEL,KAAK,CAACH;IAAQ,CAAC,EAAE,MAAMG,KAAK,CAACA,KAAK,CAAC;EACzF;EACA,OAAO,IAAIL,KAAK,CAACK,KAAK,CAACE,MAAM,EAAE;IAAEG,eAAe,EAAEL,KAAK,CAACH;EAAQ,CAAC,CAAC;AACtE;AACA,OAAO,MAAMS,4BAA4B,SAASZ,SAAS,CAAC;EACxDa,WAAW,CAACC,kBAAkB,EAAEC,iBAAiB,EAAE;IAC/C,KAAK,EAAE;IACP,IAAI,CAACD,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;EAC9C;EACAC,QAAQ,CAACC,IAAI,EAAEC,UAAU,EAAE;IACvB,OAAOb,gBAAgB,CAAC,IAAI,CAACS,kBAAkB,CAACE,QAAQ,CAACC,IAAI,EAAEC,UAAU,CAAC,CAAC;EAC/E;EACAC,uBAAuB,CAACb,KAAK,EAAE;IAC3B,OAAO,IAAI,CAACS,iBAAiB,CAACI,uBAAuB,CAACb,KAAK,CAAC;EAChE;EACAc,MAAM,CAACd,KAAK,EAAEH,OAAO,EAAE;IACnB,IAAI,CAACD,aAAa,CAACC,OAAO,CAAC,EAAE;MACzB,OAAO,IAAI,CAACY,iBAAiB,CAACK,MAAM,CAACd,KAAK,EAAEF,SAAS,CAAC,CAACiB,GAAG,CAACX,eAAe,CAAC;IAC/E;IACA,IAAI,kBAAkB,IAAIP,OAAO,EAAE;MAC/B,OAAO,IAAI,CAACW,kBAAkB,CAACM,MAAM,CAACd,KAAK,EAAEH,OAAO,CAACM,gBAAgB,CAAC,CAACY,GAAG,CAAChB,gBAAgB,CAAC;IAChG;IACA,OAAO,IAAI,CAACU,iBAAiB,CAACK,MAAM,CAACd,KAAK,EAAEH,OAAO,CAACQ,eAAe,CAAC,CAACU,GAAG,CAACX,eAAe,CAAC;EAC7F;AACJ"},"metadata":{},"sourceType":"module"}
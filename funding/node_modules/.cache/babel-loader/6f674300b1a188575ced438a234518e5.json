{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { CommandsIterable } from '../../check/model/commands/CommandsIterable.js';\nimport { CommandWrapper } from '../../check/model/commands/CommandWrapper.js';\nimport { ReplayPath } from '../../check/model/ReplayPath.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { oneof } from '../oneof.js';\nimport { restrictedIntegerArbitraryBuilder } from './builders/RestrictedIntegerArbitraryBuilder.js';\nexport class CommandsArbitrary extends Arbitrary {\n  constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n    super();\n    this.sourceReplayPath = sourceReplayPath;\n    this.disableReplayLog = disableReplayLog;\n    this.oneCommandArb = oneof(...commandArbs).map(c => new CommandWrapper(c));\n    this.lengthArb = restrictedIntegerArbitraryBuilder(0, maxGeneratedCommands, maxCommands);\n    this.replayPath = [];\n    this.replayPathPosition = 0;\n  }\n  metadataForReplay() {\n    return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath.stringify(this.replayPath))}`;\n  }\n  buildValueFor(items, shrunkOnce) {\n    const commands = items.map(item => item.value_);\n    const context = {\n      shrunkOnce,\n      items\n    };\n    return new Value(new CommandsIterable(commands, () => this.metadataForReplay()), context);\n  }\n  generate(mrng) {\n    const size = this.lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const items = Array(sizeValue);\n    for (let idx = 0; idx !== sizeValue; ++idx) {\n      const item = this.oneCommandArb.generate(mrng, undefined);\n      items[idx] = item;\n    }\n    this.replayPathPosition = 0;\n    return this.buildValueFor(items, false);\n  }\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n  filterOnExecution(itemsRaw) {\n    const items = [];\n    for (const c of itemsRaw) {\n      if (c.value_.hasRan) {\n        this.replayPath.push(true);\n        items.push(c);\n      } else this.replayPath.push(false);\n    }\n    return items;\n  }\n  filterOnReplay(itemsRaw) {\n    return itemsRaw.filter((c, idx) => {\n      const state = this.replayPath[this.replayPathPosition + idx];\n      if (state === undefined) throw new Error(`Too short replayPath`);\n      if (!state && c.value_.hasRan) throw new Error(`Mismatch between replayPath and real execution`);\n      return state;\n    });\n  }\n  filterForShrinkImpl(itemsRaw) {\n    if (this.replayPathPosition === 0) {\n      this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];\n    }\n    const items = this.replayPathPosition < this.replayPath.length ? this.filterOnReplay(itemsRaw) : this.filterOnExecution(itemsRaw);\n    this.replayPathPosition += itemsRaw.length;\n    return items;\n  }\n  shrink(_value, context) {\n    if (context === undefined) {\n      return Stream.nil();\n    }\n    const safeContext = context;\n    const shrunkOnce = safeContext.shrunkOnce;\n    const itemsRaw = safeContext.items;\n    const items = this.filterForShrinkImpl(itemsRaw);\n    if (items.length === 0) {\n      return Stream.nil();\n    }\n    const rootShrink = shrunkOnce ? Stream.nil() : new Stream([[]][Symbol.iterator]());\n    const nextShrinks = [];\n    for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n      nextShrinks.push(makeLazy(() => {\n        const fixedStart = items.slice(0, numToKeep);\n        return this.lengthArb.shrink(items.length - 1 - numToKeep, undefined).map(l => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n      }));\n    }\n    for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n      nextShrinks.push(makeLazy(() => this.oneCommandArb.shrink(items[itemAt].value_, items[itemAt].context).map(v => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n    }\n    return rootShrink.join(...nextShrinks).map(shrinkables => {\n      return this.buildValueFor(shrinkables.map(c => new Value(c.value_.clone(), c.context)), true);\n    });\n  }\n}","map":{"version":3,"names":["Arbitrary","Value","CommandsIterable","CommandWrapper","ReplayPath","makeLazy","Stream","oneof","restrictedIntegerArbitraryBuilder","CommandsArbitrary","constructor","commandArbs","maxGeneratedCommands","maxCommands","sourceReplayPath","disableReplayLog","oneCommandArb","map","c","lengthArb","replayPath","replayPathPosition","metadataForReplay","JSON","stringify","buildValueFor","items","shrunkOnce","commands","item","value_","context","generate","mrng","size","undefined","sizeValue","value","Array","idx","canShrinkWithoutContext","filterOnExecution","itemsRaw","hasRan","push","filterOnReplay","filter","state","Error","filterForShrinkImpl","parse","length","shrink","_value","nil","safeContext","rootShrink","Symbol","iterator","nextShrinks","numToKeep","fixedStart","slice","l","concat","itemAt","v","join","shrinkables","clone"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/CommandsArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { CommandsIterable } from '../../check/model/commands/CommandsIterable.js';\nimport { CommandWrapper } from '../../check/model/commands/CommandWrapper.js';\nimport { ReplayPath } from '../../check/model/ReplayPath.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { oneof } from '../oneof.js';\nimport { restrictedIntegerArbitraryBuilder } from './builders/RestrictedIntegerArbitraryBuilder.js';\nexport class CommandsArbitrary extends Arbitrary {\n    constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n        super();\n        this.sourceReplayPath = sourceReplayPath;\n        this.disableReplayLog = disableReplayLog;\n        this.oneCommandArb = oneof(...commandArbs).map((c) => new CommandWrapper(c));\n        this.lengthArb = restrictedIntegerArbitraryBuilder(0, maxGeneratedCommands, maxCommands);\n        this.replayPath = [];\n        this.replayPathPosition = 0;\n    }\n    metadataForReplay() {\n        return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath.stringify(this.replayPath))}`;\n    }\n    buildValueFor(items, shrunkOnce) {\n        const commands = items.map((item) => item.value_);\n        const context = { shrunkOnce, items };\n        return new Value(new CommandsIterable(commands, () => this.metadataForReplay()), context);\n    }\n    generate(mrng) {\n        const size = this.lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const items = Array(sizeValue);\n        for (let idx = 0; idx !== sizeValue; ++idx) {\n            const item = this.oneCommandArb.generate(mrng, undefined);\n            items[idx] = item;\n        }\n        this.replayPathPosition = 0;\n        return this.buildValueFor(items, false);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    filterOnExecution(itemsRaw) {\n        const items = [];\n        for (const c of itemsRaw) {\n            if (c.value_.hasRan) {\n                this.replayPath.push(true);\n                items.push(c);\n            }\n            else\n                this.replayPath.push(false);\n        }\n        return items;\n    }\n    filterOnReplay(itemsRaw) {\n        return itemsRaw.filter((c, idx) => {\n            const state = this.replayPath[this.replayPathPosition + idx];\n            if (state === undefined)\n                throw new Error(`Too short replayPath`);\n            if (!state && c.value_.hasRan)\n                throw new Error(`Mismatch between replayPath and real execution`);\n            return state;\n        });\n    }\n    filterForShrinkImpl(itemsRaw) {\n        if (this.replayPathPosition === 0) {\n            this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];\n        }\n        const items = this.replayPathPosition < this.replayPath.length\n            ? this.filterOnReplay(itemsRaw)\n            : this.filterOnExecution(itemsRaw);\n        this.replayPathPosition += itemsRaw.length;\n        return items;\n    }\n    shrink(_value, context) {\n        if (context === undefined) {\n            return Stream.nil();\n        }\n        const safeContext = context;\n        const shrunkOnce = safeContext.shrunkOnce;\n        const itemsRaw = safeContext.items;\n        const items = this.filterForShrinkImpl(itemsRaw);\n        if (items.length === 0) {\n            return Stream.nil();\n        }\n        const rootShrink = shrunkOnce\n            ? Stream.nil()\n            : new Stream([[]][Symbol.iterator]());\n        const nextShrinks = [];\n        for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n            nextShrinks.push(makeLazy(() => {\n                const fixedStart = items.slice(0, numToKeep);\n                return this.lengthArb\n                    .shrink(items.length - 1 - numToKeep, undefined)\n                    .map((l) => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n            }));\n        }\n        for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n            nextShrinks.push(makeLazy(() => this.oneCommandArb\n                .shrink(items[itemAt].value_, items[itemAt].context)\n                .map((v) => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n        }\n        return rootShrink.join(...nextShrinks).map((shrinkables) => {\n            return this.buildValueFor(shrinkables.map((c) => new Value(c.value_.clone(), c.context)), true);\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,+CAA+C;AACzE,SAASC,KAAK,QAAQ,2CAA2C;AACjE,SAASC,gBAAgB,QAAQ,gDAAgD;AACjF,SAASC,cAAc,QAAQ,8CAA8C;AAC7E,SAASC,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,QAAQ,QAAQ,sCAAsC;AAC/D,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,iCAAiC,QAAQ,iDAAiD;AACnG,OAAO,MAAMC,iBAAiB,SAAST,SAAS,CAAC;EAC7CU,WAAW,CAACC,WAAW,EAAEC,oBAAoB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAE;IAC5F,KAAK,EAAE;IACP,IAAI,CAACD,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,aAAa,GAAGT,KAAK,CAAC,GAAGI,WAAW,CAAC,CAACM,GAAG,CAAEC,CAAC,IAAK,IAAIf,cAAc,CAACe,CAAC,CAAC,CAAC;IAC5E,IAAI,CAACC,SAAS,GAAGX,iCAAiC,CAAC,CAAC,EAAEI,oBAAoB,EAAEC,WAAW,CAAC;IACxF,IAAI,CAACO,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,kBAAkB,GAAG,CAAC;EAC/B;EACAC,iBAAiB,GAAG;IAChB,OAAO,IAAI,CAACP,gBAAgB,GAAG,EAAE,GAAI,cAAaQ,IAAI,CAACC,SAAS,CAACpB,UAAU,CAACoB,SAAS,CAAC,IAAI,CAACJ,UAAU,CAAC,CAAE,EAAC;EAC7G;EACAK,aAAa,CAACC,KAAK,EAAEC,UAAU,EAAE;IAC7B,MAAMC,QAAQ,GAAGF,KAAK,CAACT,GAAG,CAAEY,IAAI,IAAKA,IAAI,CAACC,MAAM,CAAC;IACjD,MAAMC,OAAO,GAAG;MAAEJ,UAAU;MAAED;IAAM,CAAC;IACrC,OAAO,IAAIzB,KAAK,CAAC,IAAIC,gBAAgB,CAAC0B,QAAQ,EAAE,MAAM,IAAI,CAACN,iBAAiB,EAAE,CAAC,EAAES,OAAO,CAAC;EAC7F;EACAC,QAAQ,CAACC,IAAI,EAAE;IACX,MAAMC,IAAI,GAAG,IAAI,CAACf,SAAS,CAACa,QAAQ,CAACC,IAAI,EAAEE,SAAS,CAAC;IACrD,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK;IAC5B,MAAMX,KAAK,GAAGY,KAAK,CAACF,SAAS,CAAC;IAC9B,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,KAAKH,SAAS,EAAE,EAAEG,GAAG,EAAE;MACxC,MAAMV,IAAI,GAAG,IAAI,CAACb,aAAa,CAACgB,QAAQ,CAACC,IAAI,EAAEE,SAAS,CAAC;MACzDT,KAAK,CAACa,GAAG,CAAC,GAAGV,IAAI;IACrB;IACA,IAAI,CAACR,kBAAkB,GAAG,CAAC;IAC3B,OAAO,IAAI,CAACI,aAAa,CAACC,KAAK,EAAE,KAAK,CAAC;EAC3C;EACAc,uBAAuB,CAACH,KAAK,EAAE;IAC3B,OAAO,KAAK;EAChB;EACAI,iBAAiB,CAACC,QAAQ,EAAE;IACxB,MAAMhB,KAAK,GAAG,EAAE;IAChB,KAAK,MAAMR,CAAC,IAAIwB,QAAQ,EAAE;MACtB,IAAIxB,CAAC,CAACY,MAAM,CAACa,MAAM,EAAE;QACjB,IAAI,CAACvB,UAAU,CAACwB,IAAI,CAAC,IAAI,CAAC;QAC1BlB,KAAK,CAACkB,IAAI,CAAC1B,CAAC,CAAC;MACjB,CAAC,MAEG,IAAI,CAACE,UAAU,CAACwB,IAAI,CAAC,KAAK,CAAC;IACnC;IACA,OAAOlB,KAAK;EAChB;EACAmB,cAAc,CAACH,QAAQ,EAAE;IACrB,OAAOA,QAAQ,CAACI,MAAM,CAAC,CAAC5B,CAAC,EAAEqB,GAAG,KAAK;MAC/B,MAAMQ,KAAK,GAAG,IAAI,CAAC3B,UAAU,CAAC,IAAI,CAACC,kBAAkB,GAAGkB,GAAG,CAAC;MAC5D,IAAIQ,KAAK,KAAKZ,SAAS,EACnB,MAAM,IAAIa,KAAK,CAAE,sBAAqB,CAAC;MAC3C,IAAI,CAACD,KAAK,IAAI7B,CAAC,CAACY,MAAM,CAACa,MAAM,EACzB,MAAM,IAAIK,KAAK,CAAE,gDAA+C,CAAC;MACrE,OAAOD,KAAK;IAChB,CAAC,CAAC;EACN;EACAE,mBAAmB,CAACP,QAAQ,EAAE;IAC1B,IAAI,IAAI,CAACrB,kBAAkB,KAAK,CAAC,EAAE;MAC/B,IAAI,CAACD,UAAU,GAAG,IAAI,CAACN,gBAAgB,KAAK,IAAI,GAAGV,UAAU,CAAC8C,KAAK,CAAC,IAAI,CAACpC,gBAAgB,CAAC,GAAG,EAAE;IACnG;IACA,MAAMY,KAAK,GAAG,IAAI,CAACL,kBAAkB,GAAG,IAAI,CAACD,UAAU,CAAC+B,MAAM,GACxD,IAAI,CAACN,cAAc,CAACH,QAAQ,CAAC,GAC7B,IAAI,CAACD,iBAAiB,CAACC,QAAQ,CAAC;IACtC,IAAI,CAACrB,kBAAkB,IAAIqB,QAAQ,CAACS,MAAM;IAC1C,OAAOzB,KAAK;EAChB;EACA0B,MAAM,CAACC,MAAM,EAAEtB,OAAO,EAAE;IACpB,IAAIA,OAAO,KAAKI,SAAS,EAAE;MACvB,OAAO7B,MAAM,CAACgD,GAAG,EAAE;IACvB;IACA,MAAMC,WAAW,GAAGxB,OAAO;IAC3B,MAAMJ,UAAU,GAAG4B,WAAW,CAAC5B,UAAU;IACzC,MAAMe,QAAQ,GAAGa,WAAW,CAAC7B,KAAK;IAClC,MAAMA,KAAK,GAAG,IAAI,CAACuB,mBAAmB,CAACP,QAAQ,CAAC;IAChD,IAAIhB,KAAK,CAACyB,MAAM,KAAK,CAAC,EAAE;MACpB,OAAO7C,MAAM,CAACgD,GAAG,EAAE;IACvB;IACA,MAAME,UAAU,GAAG7B,UAAU,GACvBrB,MAAM,CAACgD,GAAG,EAAE,GACZ,IAAIhD,MAAM,CAAC,CAAC,EAAE,CAAC,CAACmD,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzC,MAAMC,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,KAAKlC,KAAK,CAACyB,MAAM,EAAE,EAAES,SAAS,EAAE;MAC7DD,WAAW,CAACf,IAAI,CAACvC,QAAQ,CAAC,MAAM;QAC5B,MAAMwD,UAAU,GAAGnC,KAAK,CAACoC,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC;QAC5C,OAAO,IAAI,CAACzC,SAAS,CAChBiC,MAAM,CAAC1B,KAAK,CAACyB,MAAM,GAAG,CAAC,GAAGS,SAAS,EAAEzB,SAAS,CAAC,CAC/ClB,GAAG,CAAE8C,CAAC,IAAKF,UAAU,CAACG,MAAM,CAACtC,KAAK,CAACoC,KAAK,CAACpC,KAAK,CAACyB,MAAM,IAAIY,CAAC,CAAC1B,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACjF,CAAC,CAAC,CAAC;IACP;IACA,KAAK,IAAI4B,MAAM,GAAG,CAAC,EAAEA,MAAM,KAAKvC,KAAK,CAACyB,MAAM,EAAE,EAAEc,MAAM,EAAE;MACpDN,WAAW,CAACf,IAAI,CAACvC,QAAQ,CAAC,MAAM,IAAI,CAACW,aAAa,CAC7CoC,MAAM,CAAC1B,KAAK,CAACuC,MAAM,CAAC,CAACnC,MAAM,EAAEJ,KAAK,CAACuC,MAAM,CAAC,CAAClC,OAAO,CAAC,CACnDd,GAAG,CAAEiD,CAAC,IAAKxC,KAAK,CAACoC,KAAK,CAAC,CAAC,EAAEG,MAAM,CAAC,CAACD,MAAM,CAAC,CAACE,CAAC,CAAC,EAAExC,KAAK,CAACoC,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF;IACA,OAAOT,UAAU,CAACW,IAAI,CAAC,GAAGR,WAAW,CAAC,CAAC1C,GAAG,CAAEmD,WAAW,IAAK;MACxD,OAAO,IAAI,CAAC3C,aAAa,CAAC2C,WAAW,CAACnD,GAAG,CAAEC,CAAC,IAAK,IAAIjB,KAAK,CAACiB,CAAC,CAACY,MAAM,CAACuC,KAAK,EAAE,EAAEnD,CAAC,CAACa,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;IACnG,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module"}
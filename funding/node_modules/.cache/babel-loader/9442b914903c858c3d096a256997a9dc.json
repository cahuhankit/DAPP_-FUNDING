{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:memory:allocate\");\nconst Evm = __importStar(require(\"../../evm\"));\nfunction getMemoryAllocations(userDefinedTypes) {\n  let allocations = {};\n  for (const dataType of Object.values(userDefinedTypes)) {\n    if (dataType.typeClass === \"struct\") {\n      allocations[dataType.id] = allocateStruct(dataType);\n    }\n  }\n  return allocations;\n}\nexports.getMemoryAllocations = getMemoryAllocations;\nfunction isSkippedInMemoryStructs(dataType) {\n  if (dataType.typeClass === \"mapping\") {\n    return true;\n  } else if (dataType.typeClass === \"array\") {\n    return isSkippedInMemoryStructs(dataType.baseType);\n  } else {\n    return false;\n  }\n}\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs;\n//unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\nfunction allocateStruct(dataType) {\n  let memberAllocations = [];\n  let position = 0;\n  for (const {\n    name,\n    type: memberType\n  } of dataType.memberTypes) {\n    const length = isSkippedInMemoryStructs(memberType) ? 0 : Evm.Utils.WORD_SIZE;\n    memberAllocations.push({\n      name,\n      type: memberType,\n      pointer: {\n        location: \"memory\",\n        start: position,\n        length\n      }\n    });\n    position += length;\n  }\n  return {\n    members: memberAllocations\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,MAAMA,KAAK,GAAG,mBAAW,EAAC,uBAAuB,CAAC;AAOlD;AAKA,SAAgBC,oBAAoB,CAClCC,gBAAwC;EAExC,IAAIC,WAAW,GAAsB,EAAE;EACvC,KAAK,MAAMC,QAAQ,IAAIC,MAAM,CAACC,MAAM,CAACJ,gBAAgB,CAAC,EAAE;IACtD,IAAIE,QAAQ,CAACG,SAAS,KAAK,QAAQ,EAAE;MACnCJ,WAAW,CAACC,QAAQ,CAACI,EAAE,CAAC,GAAGC,cAAc,CAACL,QAAQ,CAAC;;;EAGvD,OAAOD,WAAW;AACpB;AAVAO;AAYA,SAAgBC,wBAAwB,CAACP,QAA2B;EAClE,IAAIA,QAAQ,CAACG,SAAS,KAAK,SAAS,EAAE;IACpC,OAAO,IAAI;GACZ,MAAM,IAAIH,QAAQ,CAACG,SAAS,KAAK,OAAO,EAAE;IACzC,OAAOI,wBAAwB,CAACP,QAAQ,CAACQ,QAAQ,CAAC;GACnD,MAAM;IACL,OAAO,KAAK;;AAEhB;AARAF;AAUA;AACA;AACA,SAASD,cAAc,CAACL,QAAiC;EACvD,IAAIS,iBAAiB,GAA6B,EAAE;EACpD,IAAIC,QAAQ,GAAG,CAAC;EAChB,KAAK,MAAM;IAAEC,IAAI;IAAEC,IAAI,EAAEC;EAAU,CAAE,IAAIb,QAAQ,CAACc,WAAW,EAAE;IAC7D,MAAMC,MAAM,GAAGR,wBAAwB,CAACM,UAAU,CAAC,GAC/C,CAAC,GACDG,GAAG,CAACC,KAAK,CAACC,SAAS;IACvBT,iBAAiB,CAACU,IAAI,CAAC;MACrBR,IAAI;MACJC,IAAI,EAAEC,UAAU;MAChBO,OAAO,EAAE;QACPC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAEZ,QAAQ;QACfK;;KAEH,CAAC;IACFL,QAAQ,IAAIK,MAAM;;EAGpB,OAAO;IACLQ,OAAO,EAAEd;GACV;AACH","names":["debug","getMemoryAllocations","userDefinedTypes","allocations","dataType","Object","values","typeClass","id","allocateStruct","exports","isSkippedInMemoryStructs","baseType","memberAllocations","position","name","type","memberType","memberTypes","length","Evm","Utils","WORD_SIZE","push","pointer","location","start","members"],"sourceRoot":"","sources":["../../../../lib/memory/allocate/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
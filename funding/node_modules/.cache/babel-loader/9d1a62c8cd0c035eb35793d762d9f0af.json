{"ast":null,"code":"import { isArbitrary } from '../check/arbitrary/definition/Arbitrary.js';\nimport { FrequencyArbitrary } from './_internals/FrequencyArbitrary.js';\nfunction isOneOfContraints(param) {\n  return param != null && typeof param === 'object' && !('generate' in param) && !('arbitrary' in param) && !('weight' in param);\n}\nfunction toWeightedArbitrary(maybeWeightedArbitrary) {\n  if (isArbitrary(maybeWeightedArbitrary)) {\n    return {\n      arbitrary: maybeWeightedArbitrary,\n      weight: 1\n    };\n  }\n  return maybeWeightedArbitrary;\n}\nfunction oneof() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const constraints = args[0];\n  if (isOneOfContraints(constraints)) {\n    const weightedArbs = args.slice(1).map(toWeightedArbitrary);\n    return FrequencyArbitrary.from(weightedArbs, constraints, 'fc.oneof');\n  }\n  const weightedArbs = args.map(toWeightedArbitrary);\n  return FrequencyArbitrary.from(weightedArbs, {}, 'fc.oneof');\n}\nexport { oneof };","map":{"version":3,"names":["isArbitrary","FrequencyArbitrary","isOneOfContraints","param","toWeightedArbitrary","maybeWeightedArbitrary","arbitrary","weight","oneof","args","constraints","weightedArbs","slice","map","from"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/oneof.js"],"sourcesContent":["import { isArbitrary } from '../check/arbitrary/definition/Arbitrary.js';\nimport { FrequencyArbitrary } from './_internals/FrequencyArbitrary.js';\nfunction isOneOfContraints(param) {\n    return (param != null &&\n        typeof param === 'object' &&\n        !('generate' in param) &&\n        !('arbitrary' in param) &&\n        !('weight' in param));\n}\nfunction toWeightedArbitrary(maybeWeightedArbitrary) {\n    if (isArbitrary(maybeWeightedArbitrary)) {\n        return { arbitrary: maybeWeightedArbitrary, weight: 1 };\n    }\n    return maybeWeightedArbitrary;\n}\nfunction oneof(...args) {\n    const constraints = args[0];\n    if (isOneOfContraints(constraints)) {\n        const weightedArbs = args.slice(1).map(toWeightedArbitrary);\n        return FrequencyArbitrary.from(weightedArbs, constraints, 'fc.oneof');\n    }\n    const weightedArbs = args.map(toWeightedArbitrary);\n    return FrequencyArbitrary.from(weightedArbs, {}, 'fc.oneof');\n}\nexport { oneof };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,4CAA4C;AACxE,SAASC,kBAAkB,QAAQ,oCAAoC;AACvE,SAASC,iBAAiB,CAACC,KAAK,EAAE;EAC9B,OAAQA,KAAK,IAAI,IAAI,IACjB,OAAOA,KAAK,KAAK,QAAQ,IACzB,EAAE,UAAU,IAAIA,KAAK,CAAC,IACtB,EAAE,WAAW,IAAIA,KAAK,CAAC,IACvB,EAAE,QAAQ,IAAIA,KAAK,CAAC;AAC5B;AACA,SAASC,mBAAmB,CAACC,sBAAsB,EAAE;EACjD,IAAIL,WAAW,CAACK,sBAAsB,CAAC,EAAE;IACrC,OAAO;MAAEC,SAAS,EAAED,sBAAsB;MAAEE,MAAM,EAAE;IAAE,CAAC;EAC3D;EACA,OAAOF,sBAAsB;AACjC;AACA,SAASG,KAAK,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EAClB,MAAMC,WAAW,GAAGD,IAAI,CAAC,CAAC,CAAC;EAC3B,IAAIP,iBAAiB,CAACQ,WAAW,CAAC,EAAE;IAChC,MAAMC,YAAY,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACT,mBAAmB,CAAC;IAC3D,OAAOH,kBAAkB,CAACa,IAAI,CAACH,YAAY,EAAED,WAAW,EAAE,UAAU,CAAC;EACzE;EACA,MAAMC,YAAY,GAAGF,IAAI,CAACI,GAAG,CAACT,mBAAmB,CAAC;EAClD,OAAOH,kBAAkB,CAACa,IAAI,CAACH,YAAY,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC;AAChE;AACA,SAASH,KAAK"},"metadata":{},"sourceType":"module"}
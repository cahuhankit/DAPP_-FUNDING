{"ast":null,"code":"const TruffleError = require(\"@truffle/error\");\nconst utils = require(\"./utils\");\nconst defaultGas = 90000;\nclass StatusError extends TruffleError {\n  constructor(args, tx, receipt, reason) {\n    let message;\n    const gasLimit = args.gas || defaultGas;\n    let reasonString = \"\";\n    if (reason) reasonString = `Reason given: ${reason}.`;\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message = `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n    super(message);\n    this.tx = tx;\n    this.receipt = receipt;\n    this.reason = reason;\n  }\n}\nmodule.exports = StatusError;","map":{"version":3,"names":["TruffleError","require","utils","defaultGas","StatusError","constructor","args","tx","receipt","reason","message","gasLimit","gas","reasonString","bigNumberify","gasUsed","eq","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/@truffle/contract/lib/statuserror.js"],"sourcesContent":["const TruffleError = require(\"@truffle/error\");\nconst utils = require(\"./utils\");\n\nconst defaultGas = 90000;\n\nclass StatusError extends TruffleError {\n  constructor(args, tx, receipt, reason) {\n    let message;\n    const gasLimit = args.gas || defaultGas;\n    let reasonString = \"\";\n\n    if (reason) reasonString = `Reason given: ${reason}.`;\n\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message =\n        \"Transaction: \" +\n        tx +\n        \" exited with an error (status 0) after consuming all gas.\\n\" +\n        \"     Please check that the transaction:\\n\" +\n        \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" +\n        \"     - has enough gas to execute the full transaction.\\n\" +\n        \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message =\n        `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` +\n        \"     Please check that the transaction:\\n\" +\n        \"     - satisfies all conditions set by Solidity `require` statements.\\n\" +\n        \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n\n    super(message);\n    this.tx = tx;\n    this.receipt = receipt;\n    this.reason = reason;\n  }\n}\n\nmodule.exports = StatusError;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAME,UAAU,GAAG,KAAK;AAExB,MAAMC,WAAW,SAASJ,YAAY,CAAC;EACrCK,WAAW,CAACC,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACrC,IAAIC,OAAO;IACX,MAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAG,IAAIT,UAAU;IACvC,IAAIU,YAAY,GAAG,EAAE;IAErB,IAAIJ,MAAM,EAAEI,YAAY,GAAI,iBAAgBJ,MAAO,GAAE;IAErD,IAAIP,KAAK,CAACY,YAAY,CAACN,OAAO,CAACO,OAAO,CAAC,CAACC,EAAE,CAACd,KAAK,CAACY,YAAY,CAACH,QAAQ,CAAC,CAAC,EAAE;MACxED,OAAO,GACL,eAAe,GACfH,EAAE,GACF,6DAA6D,GAC7D,2CAA2C,GAC3C,wEAAwE,GACxE,0DAA0D,GAC1D,kGAAkG;IACtG,CAAC,MAAM;MACLG,OAAO,GACJ,gBAAeH,EAAG,qCAAoCM,YAAa,IAAG,GACvE,2CAA2C,GAC3C,yEAAyE,GACzE,0DAA0D;IAC9D;IAEA,KAAK,CAACH,OAAO,CAAC;IACd,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;AACF;AAEAQ,MAAM,CAACC,OAAO,GAAGd,WAAW"},"metadata":{},"sourceType":"script"}
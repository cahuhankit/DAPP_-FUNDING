{"ast":null,"code":"import { hash } from '../utils/hash.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../check/symbols.js';\nimport { array } from './array.js';\nimport { integer } from './integer.js';\nimport { tuple } from './tuple.js';\nimport { escapeForMultilineComments } from './_internals/helpers/TextEscaper.js';\nexport function func(arb) {\n  return tuple(array(arb, {\n    minLength: 1\n  }), integer().noShrink()).map(_ref => {\n    let [outs, seed] = _ref;\n    const producer = () => {\n      const recorded = {};\n      const f = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        const repr = stringify(args);\n        const val = outs[hash(`${seed}${repr}`) % outs.length];\n        recorded[repr] = val;\n        return hasCloneMethod(val) ? val[cloneMethod]() : val;\n      };\n      function prettyPrint(stringifiedOuts) {\n        const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify(recorded[k])}`).map(line => `/* ${escapeForMultilineComments(line)} */`);\n        return `function(...args) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const outs = ${stringifiedOuts};\n  return outs[hash('${seed}' + stringify(args)) % outs.length];\n}`;\n      }\n      return Object.defineProperties(f, {\n        toString: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [toStringMethod]: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [asyncToStringMethod]: {\n          value: async () => prettyPrint(await asyncStringify(outs))\n        },\n        [cloneMethod]: {\n          value: producer,\n          configurable: true\n        }\n      });\n    };\n    return producer();\n  });\n}","map":{"version":3,"names":["hash","asyncStringify","asyncToStringMethod","stringify","toStringMethod","cloneMethod","hasCloneMethod","array","integer","tuple","escapeForMultilineComments","func","arb","minLength","noShrink","map","outs","seed","producer","recorded","f","args","repr","val","length","prettyPrint","stringifiedOuts","seenValues","Object","keys","sort","k","line","join","defineProperties","toString","value","configurable"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/func.js"],"sourcesContent":["import { hash } from '../utils/hash.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../check/symbols.js';\nimport { array } from './array.js';\nimport { integer } from './integer.js';\nimport { tuple } from './tuple.js';\nimport { escapeForMultilineComments } from './_internals/helpers/TextEscaper.js';\nexport function func(arb) {\n    return tuple(array(arb, { minLength: 1 }), integer().noShrink()).map(([outs, seed]) => {\n        const producer = () => {\n            const recorded = {};\n            const f = (...args) => {\n                const repr = stringify(args);\n                const val = outs[hash(`${seed}${repr}`) % outs.length];\n                recorded[repr] = val;\n                return hasCloneMethod(val) ? val[cloneMethod]() : val;\n            };\n            function prettyPrint(stringifiedOuts) {\n                const seenValues = Object.keys(recorded)\n                    .sort()\n                    .map((k) => `${k} => ${stringify(recorded[k])}`)\n                    .map((line) => `/* ${escapeForMultilineComments(line)} */`);\n                return `function(...args) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const outs = ${stringifiedOuts};\n  return outs[hash('${seed}' + stringify(args)) % outs.length];\n}`;\n            }\n            return Object.defineProperties(f, {\n                toString: { value: () => prettyPrint(stringify(outs)) },\n                [toStringMethod]: { value: () => prettyPrint(stringify(outs)) },\n                [asyncToStringMethod]: { value: async () => prettyPrint(await asyncStringify(outs)) },\n                [cloneMethod]: { value: producer, configurable: true },\n            });\n        };\n        return producer();\n    });\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,SAAS,EAAEC,cAAc,QAAQ,uBAAuB;AACtG,SAASC,WAAW,EAAEC,cAAc,QAAQ,qBAAqB;AACjE,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,OAAO,SAASC,IAAI,CAACC,GAAG,EAAE;EACtB,OAAOH,KAAK,CAACF,KAAK,CAACK,GAAG,EAAE;IAAEC,SAAS,EAAE;EAAE,CAAC,CAAC,EAAEL,OAAO,EAAE,CAACM,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,QAAkB;IAAA,IAAjB,CAACC,IAAI,EAAEC,IAAI,CAAC;IAC9E,MAAMC,QAAQ,GAAG,MAAM;MACnB,MAAMC,QAAQ,GAAG,CAAC,CAAC;MACnB,MAAMC,CAAC,GAAG,YAAa;QAAA,kCAATC,IAAI;UAAJA,IAAI;QAAA;QACd,MAAMC,IAAI,GAAGnB,SAAS,CAACkB,IAAI,CAAC;QAC5B,MAAME,GAAG,GAAGP,IAAI,CAAChB,IAAI,CAAE,GAAEiB,IAAK,GAAEK,IAAK,EAAC,CAAC,GAAGN,IAAI,CAACQ,MAAM,CAAC;QACtDL,QAAQ,CAACG,IAAI,CAAC,GAAGC,GAAG;QACpB,OAAOjB,cAAc,CAACiB,GAAG,CAAC,GAAGA,GAAG,CAAClB,WAAW,CAAC,EAAE,GAAGkB,GAAG;MACzD,CAAC;MACD,SAASE,WAAW,CAACC,eAAe,EAAE;QAClC,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACV,QAAQ,CAAC,CACnCW,IAAI,EAAE,CACNf,GAAG,CAAEgB,CAAC,IAAM,GAAEA,CAAE,OAAM5B,SAAS,CAACgB,QAAQ,CAACY,CAAC,CAAC,CAAE,EAAC,CAAC,CAC/ChB,GAAG,CAAEiB,IAAI,IAAM,MAAKtB,0BAA0B,CAACsB,IAAI,CAAE,KAAI,CAAC;QAC/D,OAAQ;AACxB,qDAAqDL,UAAU,CAACH,MAAM,KAAK,CAAC,GAAI,OAAMG,UAAU,CAACM,IAAI,CAAC,MAAM,CAAE,EAAC,GAAG,EAAG;AACrH,iBAAiBP,eAAgB;AACjC,sBAAsBT,IAAK;AAC3B,EAAE;MACU;MACA,OAAOW,MAAM,CAACM,gBAAgB,CAACd,CAAC,EAAE;QAC9Be,QAAQ,EAAE;UAAEC,KAAK,EAAE,MAAMX,WAAW,CAACtB,SAAS,CAACa,IAAI,CAAC;QAAE,CAAC;QACvD,CAACZ,cAAc,GAAG;UAAEgC,KAAK,EAAE,MAAMX,WAAW,CAACtB,SAAS,CAACa,IAAI,CAAC;QAAE,CAAC;QAC/D,CAACd,mBAAmB,GAAG;UAAEkC,KAAK,EAAE,YAAYX,WAAW,CAAC,MAAMxB,cAAc,CAACe,IAAI,CAAC;QAAE,CAAC;QACrF,CAACX,WAAW,GAAG;UAAE+B,KAAK,EAAElB,QAAQ;UAAEmB,YAAY,EAAE;QAAK;MACzD,CAAC,CAAC;IACN,CAAC;IACD,OAAOnB,QAAQ,EAAE;EACrB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}
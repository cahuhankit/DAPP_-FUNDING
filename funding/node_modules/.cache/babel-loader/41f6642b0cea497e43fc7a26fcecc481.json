{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction array(arb) {\n  let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const size = constraints.size;\n  const minLength = constraints.minLength || 0;\n  const maxLengthOrUnset = constraints.maxLength;\n  const depthIdentifier = constraints.depthIdentifier;\n  const maxLength = maxLengthOrUnset !== undefined ? maxLengthOrUnset : MaxLengthUpperBound;\n  const specifiedMaxLength = maxLengthOrUnset !== undefined;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength);\n  const customSlices = constraints.experimentalCustomSlices || [];\n  return new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, undefined, customSlices);\n}\nexport { array };","map":{"version":3,"names":["ArrayArbitrary","MaxLengthUpperBound","maxGeneratedLengthFromSizeForArbitrary","array","arb","constraints","size","minLength","maxLengthOrUnset","maxLength","depthIdentifier","undefined","specifiedMaxLength","maxGeneratedLength","customSlices","experimentalCustomSlices"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/array.js"],"sourcesContent":["import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary, } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction array(arb, constraints = {}) {\n    const size = constraints.size;\n    const minLength = constraints.minLength || 0;\n    const maxLengthOrUnset = constraints.maxLength;\n    const depthIdentifier = constraints.depthIdentifier;\n    const maxLength = maxLengthOrUnset !== undefined ? maxLengthOrUnset : MaxLengthUpperBound;\n    const specifiedMaxLength = maxLengthOrUnset !== undefined;\n    const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength);\n    const customSlices = constraints.experimentalCustomSlices || [];\n    return new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, undefined, customSlices);\n}\nexport { array };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,mBAAmB,EAAEC,sCAAsC,QAAS,gDAAgD;AAC7H,SAASC,KAAK,CAACC,GAAG,EAAoB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EAChC,MAAMC,IAAI,GAAGD,WAAW,CAACC,IAAI;EAC7B,MAAMC,SAAS,GAAGF,WAAW,CAACE,SAAS,IAAI,CAAC;EAC5C,MAAMC,gBAAgB,GAAGH,WAAW,CAACI,SAAS;EAC9C,MAAMC,eAAe,GAAGL,WAAW,CAACK,eAAe;EACnD,MAAMD,SAAS,GAAGD,gBAAgB,KAAKG,SAAS,GAAGH,gBAAgB,GAAGP,mBAAmB;EACzF,MAAMW,kBAAkB,GAAGJ,gBAAgB,KAAKG,SAAS;EACzD,MAAME,kBAAkB,GAAGX,sCAAsC,CAACI,IAAI,EAAEC,SAAS,EAAEE,SAAS,EAAEG,kBAAkB,CAAC;EACjH,MAAME,YAAY,GAAGT,WAAW,CAACU,wBAAwB,IAAI,EAAE;EAC/D,OAAO,IAAIf,cAAc,CAACI,GAAG,EAAEG,SAAS,EAAEM,kBAAkB,EAAEJ,SAAS,EAAEC,eAAe,EAAEC,SAAS,EAAEG,YAAY,CAAC;AACtH;AACA,SAASX,KAAK"},"metadata":{},"sourceType":"module"}
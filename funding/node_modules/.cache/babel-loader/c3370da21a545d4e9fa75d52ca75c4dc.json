{"ast":null,"code":"const {\n  default: ENSJS,\n  getEnsAddress\n} = require(\"@ensdomains/ensjs\");\nconst {\n  isAddress\n} = require(\"web3-utils\");\nmodule.exports = {\n  convertENSNames: async function (_ref) {\n    let {\n      ens,\n      inputArgs,\n      methodABI,\n      inputParams,\n      web3,\n      networkId\n    } = _ref;\n    const {\n      registryAddress\n    } = ens;\n    let args;\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n    let params;\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n    return {\n      args,\n      params\n    };\n  },\n  getNewENSJS: function (_ref2) {\n    let {\n      provider,\n      registryAddress,\n      networkId\n    } = _ref2;\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: async function (_ref3) {\n    let {\n      name,\n      provider,\n      registryAddress,\n      networkId\n    } = _ref3;\n    let ensjs;\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n  convertENSArgsNames: function (_ref4) {\n    let {\n      inputArgs,\n      methodABI,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref4;\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: async function (_ref5) {\n    let {\n      inputParams,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref5;\n    let outputParams = inputParams;\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      outputParams = {\n        ...outputParams,\n        from: newFrom\n      };\n    }\n    if (inputParams.accessList && Array.isArray(inputParams.accessList)) {\n      const newAccessList = await Promise.all(inputParams.accessList.map(async entry => {\n        if (entry && entry.address && !isAddress(entry.address)) {\n          const newAddress = await this.resolveNameToAddress({\n            name: entry.address,\n            provider: web3.currentProvider,\n            networkId,\n            registryAddress\n          });\n          return {\n            ...entry,\n            address: newAddress\n          };\n        } else {\n          return entry;\n        }\n      }));\n      outputParams = {\n        ...outputParams,\n        accessList: newAccessList\n      };\n    }\n    return outputParams;\n  }\n};","map":{"version":3,"names":["default","ENSJS","getEnsAddress","require","isAddress","module","exports","convertENSNames","ens","inputArgs","methodABI","inputParams","web3","networkId","registryAddress","args","length","convertENSArgsNames","params","convertENSParamsNames","getNewENSJS","provider","ensAddress","resolveNameToAddress","name","ensjs","error","message","Error","getAddress","inputs","convertedNames","map","argument","index","type","argIsAddress","currentProvider","Promise","all","outputParams","from","newFrom","accessList","Array","isArray","newAccessList","entry","address","newAddress"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/@truffle/contract/lib/utils/ens.js"],"sourcesContent":["const { default: ENSJS, getEnsAddress } = require(\"@ensdomains/ensjs\");\nconst { isAddress } = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: async function ({\n    ens,\n    inputArgs,\n    methodABI,\n    inputParams,\n    web3,\n    networkId\n  }) {\n    const { registryAddress } = ens;\n    let args;\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n    let params;\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n    return { args, params };\n  },\n\n  getNewENSJS: function ({ provider, registryAddress, networkId }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n\n  resolveNameToAddress: async function ({\n    name,\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    let ensjs;\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message =\n        \"There was a problem initializing the ENS library.\" +\n        \"Please ensure you have the address of the registry set correctly.\" +\n        ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n\n  convertENSParamsNames: async function ({\n    inputParams,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    let outputParams = inputParams;\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      outputParams = {\n        ...outputParams,\n        from: newFrom\n      };\n    }\n    if (inputParams.accessList && Array.isArray(inputParams.accessList)) {\n      const newAccessList = await Promise.all(\n        inputParams.accessList.map(async (entry) => {\n          if (entry && entry.address && !isAddress(entry.address)) {\n            const newAddress = await this.resolveNameToAddress({\n              name: entry.address,\n              provider: web3.currentProvider,\n              networkId,\n              registryAddress\n            });\n            return {\n              ...entry,\n              address: newAddress\n            };\n          } else {\n            return entry;\n          }\n        })\n      );\n      outputParams = {\n        ...outputParams,\n        accessList: newAccessList\n      };\n    }\n    return outputParams;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
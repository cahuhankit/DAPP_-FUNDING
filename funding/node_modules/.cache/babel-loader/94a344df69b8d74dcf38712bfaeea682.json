{"ast":null,"code":"import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n  return tuple(integer().noShrink(), integer({\n    min: 1,\n    max: 0xffffffff\n  }).noShrink()).map(_ref => {\n    let [seed, hashEnvSize] = _ref;\n    const producer = () => {\n      const recorded = {};\n      const f = (a, b) => {\n        const reprA = stringify(a);\n        const reprB = stringify(b);\n        const hA = hash(`${seed}${reprA}`) % hashEnvSize;\n        const hB = hash(`${seed}${reprB}`) % hashEnvSize;\n        const val = cmp(hA, hB);\n        recorded[`[${reprA},${reprB}]`] = val;\n        return val;\n      };\n      return Object.assign(f, {\n        toString: () => {\n          const seenValues = Object.keys(recorded).sort().map(k => `${k} => ${stringify(recorded[k])}`).map(line => `/* ${escapeForMultilineComments(line)} */`);\n          return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n        },\n        [cloneMethod]: producer\n      });\n    };\n    return producer();\n  });\n}","map":{"version":3,"names":["escapeForMultilineComments","cloneMethod","hash","stringify","integer","tuple","buildCompareFunctionArbitrary","cmp","noShrink","min","max","map","seed","hashEnvSize","producer","recorded","f","a","b","reprA","reprB","hA","hB","val","Object","assign","toString","seenValues","keys","sort","k","line","length","join"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CompareFunctionArbitraryBuilder.js"],"sourcesContent":["import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n    return tuple(integer().noShrink(), integer({ min: 1, max: 0xffffffff }).noShrink()).map(([seed, hashEnvSize]) => {\n        const producer = () => {\n            const recorded = {};\n            const f = (a, b) => {\n                const reprA = stringify(a);\n                const reprB = stringify(b);\n                const hA = hash(`${seed}${reprA}`) % hashEnvSize;\n                const hB = hash(`${seed}${reprB}`) % hashEnvSize;\n                const val = cmp(hA, hB);\n                recorded[`[${reprA},${reprB}]`] = val;\n                return val;\n            };\n            return Object.assign(f, {\n                toString: () => {\n                    const seenValues = Object.keys(recorded)\n                        .sort()\n                        .map((k) => `${k} => ${stringify(recorded[k])}`)\n                        .map((line) => `/* ${escapeForMultilineComments(line)} */`);\n                    return `function(a, b) {\n  // With hash and stringify coming from fast-check${seenValues.length !== 0 ? `\\n  ${seenValues.join('\\n  ')}` : ''}\n  const cmp = ${cmp};\n  const hA = hash('${seed}' + stringify(a)) % ${hashEnvSize};\n  const hB = hash('${seed}' + stringify(b)) % ${hashEnvSize};\n  return cmp(hA, hB);\n}`;\n                },\n                [cloneMethod]: producer,\n            });\n        };\n        return producer();\n    });\n}\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,2BAA2B;AACtE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,SAASC,6BAA6B,CAACC,GAAG,EAAE;EAC/C,OAAOF,KAAK,CAACD,OAAO,EAAE,CAACI,QAAQ,EAAE,EAAEJ,OAAO,CAAC;IAAEK,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAW,CAAC,CAAC,CAACF,QAAQ,EAAE,CAAC,CAACG,GAAG,CAAC,QAAyB;IAAA,IAAxB,CAACC,IAAI,EAAEC,WAAW,CAAC;IACxG,MAAMC,QAAQ,GAAG,MAAM;MACnB,MAAMC,QAAQ,GAAG,CAAC,CAAC;MACnB,MAAMC,CAAC,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;QAChB,MAAMC,KAAK,GAAGhB,SAAS,CAACc,CAAC,CAAC;QAC1B,MAAMG,KAAK,GAAGjB,SAAS,CAACe,CAAC,CAAC;QAC1B,MAAMG,EAAE,GAAGnB,IAAI,CAAE,GAAEU,IAAK,GAAEO,KAAM,EAAC,CAAC,GAAGN,WAAW;QAChD,MAAMS,EAAE,GAAGpB,IAAI,CAAE,GAAEU,IAAK,GAAEQ,KAAM,EAAC,CAAC,GAAGP,WAAW;QAChD,MAAMU,GAAG,GAAGhB,GAAG,CAACc,EAAE,EAAEC,EAAE,CAAC;QACvBP,QAAQ,CAAE,IAAGI,KAAM,IAAGC,KAAM,GAAE,CAAC,GAAGG,GAAG;QACrC,OAAOA,GAAG;MACd,CAAC;MACD,OAAOC,MAAM,CAACC,MAAM,CAACT,CAAC,EAAE;QACpBU,QAAQ,EAAE,MAAM;UACZ,MAAMC,UAAU,GAAGH,MAAM,CAACI,IAAI,CAACb,QAAQ,CAAC,CACnCc,IAAI,EAAE,CACNlB,GAAG,CAAEmB,CAAC,IAAM,GAAEA,CAAE,OAAM3B,SAAS,CAACY,QAAQ,CAACe,CAAC,CAAC,CAAE,EAAC,CAAC,CAC/CnB,GAAG,CAAEoB,IAAI,IAAM,MAAK/B,0BAA0B,CAAC+B,IAAI,CAAE,KAAI,CAAC;UAC/D,OAAQ;AAC5B,qDAAqDJ,UAAU,CAACK,MAAM,KAAK,CAAC,GAAI,OAAML,UAAU,CAACM,IAAI,CAAC,MAAM,CAAE,EAAC,GAAG,EAAG;AACrH,gBAAgB1B,GAAI;AACpB,qBAAqBK,IAAK,uBAAsBC,WAAY;AAC5D,qBAAqBD,IAAK,uBAAsBC,WAAY;AAC5D;AACA,EAAE;QACc,CAAC;QACD,CAACZ,WAAW,GAAGa;MACnB,CAAC,CAAC;IACN,CAAC;IACD,OAAOA,QAAQ,EAAE;EACrB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}
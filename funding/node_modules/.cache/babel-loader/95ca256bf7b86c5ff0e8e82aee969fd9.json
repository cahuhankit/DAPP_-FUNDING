{"ast":null,"code":"import { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nfunction base64String() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    minLength: unscaledMinLength = 0,\n    maxLength: unscaledMaxLength = MaxLengthUpperBound,\n    size\n  } = constraints;\n  const minLength = unscaledMinLength + 3 - (unscaledMinLength + 3) % 4;\n  const maxLength = unscaledMaxLength - unscaledMaxLength % 4;\n  const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n  if (minLength > maxLength) throw new Error('Minimal length should be inferior or equal to maximal length');\n  if (minLength % 4 !== 0) throw new Error('Minimal length of base64 strings must be a multiple of 4');\n  if (maxLength % 4 !== 0) throw new Error('Maximal length of base64 strings must be a multiple of 4');\n  const charArbitrary = base64();\n  const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n  const enrichedConstraints = {\n    minLength,\n    maxLength,\n    size: requestedSize,\n    experimentalCustomSlices\n  };\n  return array(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper).map(stringToBase64Mapper, stringToBase64Unmapper);\n}\nexport { base64String };","map":{"version":3,"names":["array","base64","MaxLengthUpperBound","codePointsToStringMapper","codePointsToStringUnmapper","stringToBase64Mapper","stringToBase64Unmapper","createSlicesForString","base64String","constraints","minLength","unscaledMinLength","maxLength","unscaledMaxLength","size","requestedSize","undefined","Error","charArbitrary","experimentalCustomSlices","enrichedConstraints","map"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/base64String.js"],"sourcesContent":["import { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nfunction base64String(constraints = {}) {\n    const { minLength: unscaledMinLength = 0, maxLength: unscaledMaxLength = MaxLengthUpperBound, size } = constraints;\n    const minLength = unscaledMinLength + 3 - ((unscaledMinLength + 3) % 4);\n    const maxLength = unscaledMaxLength - (unscaledMaxLength % 4);\n    const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n    if (minLength > maxLength)\n        throw new Error('Minimal length should be inferior or equal to maximal length');\n    if (minLength % 4 !== 0)\n        throw new Error('Minimal length of base64 strings must be a multiple of 4');\n    if (maxLength % 4 !== 0)\n        throw new Error('Maximal length of base64 strings must be a multiple of 4');\n    const charArbitrary = base64();\n    const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n    const enrichedConstraints = {\n        minLength,\n        maxLength,\n        size: requestedSize,\n        experimentalCustomSlices,\n    };\n    return array(charArbitrary, enrichedConstraints)\n        .map(codePointsToStringMapper, codePointsToStringUnmapper)\n        .map(stringToBase64Mapper, stringToBase64Unmapper);\n}\nexport { base64String };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,mBAAmB,QAAQ,gDAAgD;AACpF,SAASC,wBAAwB,EAAEC,0BAA0B,QAAQ,4CAA4C;AACjH,SAASC,oBAAoB,EAAEC,sBAAsB,QAAQ,wCAAwC;AACrG,SAASC,qBAAqB,QAAQ,gDAAgD;AACtF,SAASC,YAAY,GAAmB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EAClC,MAAM;IAAEC,SAAS,EAAEC,iBAAiB,GAAG,CAAC;IAAEC,SAAS,EAAEC,iBAAiB,GAAGX,mBAAmB;IAAEY;EAAK,CAAC,GAAGL,WAAW;EAClH,MAAMC,SAAS,GAAGC,iBAAiB,GAAG,CAAC,GAAI,CAACA,iBAAiB,GAAG,CAAC,IAAI,CAAE;EACvE,MAAMC,SAAS,GAAGC,iBAAiB,GAAIA,iBAAiB,GAAG,CAAE;EAC7D,MAAME,aAAa,GAAGN,WAAW,CAACG,SAAS,KAAKI,SAAS,IAAIF,IAAI,KAAKE,SAAS,GAAG,GAAG,GAAGF,IAAI;EAC5F,IAAIJ,SAAS,GAAGE,SAAS,EACrB,MAAM,IAAIK,KAAK,CAAC,8DAA8D,CAAC;EACnF,IAAIP,SAAS,GAAG,CAAC,KAAK,CAAC,EACnB,MAAM,IAAIO,KAAK,CAAC,0DAA0D,CAAC;EAC/E,IAAIL,SAAS,GAAG,CAAC,KAAK,CAAC,EACnB,MAAM,IAAIK,KAAK,CAAC,0DAA0D,CAAC;EAC/E,MAAMC,aAAa,GAAGjB,MAAM,EAAE;EAC9B,MAAMkB,wBAAwB,GAAGZ,qBAAqB,CAACW,aAAa,EAAEd,0BAA0B,CAAC;EACjG,MAAMgB,mBAAmB,GAAG;IACxBV,SAAS;IACTE,SAAS;IACTE,IAAI,EAAEC,aAAa;IACnBI;EACJ,CAAC;EACD,OAAOnB,KAAK,CAACkB,aAAa,EAAEE,mBAAmB,CAAC,CAC3CC,GAAG,CAAClB,wBAAwB,EAAEC,0BAA0B,CAAC,CACzDiB,GAAG,CAAChB,oBAAoB,EAAEC,sBAAsB,CAAC;AAC1D;AACA,SAASE,YAAY"},"metadata":{},"sourceType":"module"}
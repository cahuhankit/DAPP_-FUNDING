{"ast":null,"code":"export function wordsToJoinedStringMapper(words) {\n  return words.map(w => w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n    const words = [];\n    for (const candidate of value.split(' ')) {\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n    return words;\n  };\n}\nexport function wordsToSentenceMapper(words) {\n  let sentence = words.join(' ');\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n    const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    const words = [];\n    const candidates = adaptedValue.split(' ');\n    for (let idx = 0; idx !== candidates.length; ++idx) {\n      const candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n    return words;\n  };\n}\nexport function sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n  const sentences = value.split('. ');\n  for (let idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n  return sentences;\n}","map":{"version":3,"names":["wordsToJoinedStringMapper","words","map","w","length","substr","join","wordsToJoinedStringUnmapperFor","wordsArbitrary","wordsToJoinedStringUnmapper","value","Error","candidate","split","canShrinkWithoutContext","push","wordsToSentenceMapper","sentence","toUpperCase","substring","wordsToSentenceUnmapperFor","wordsToSentenceUnmapper","toLowerCase","adaptedValue","candidates","idx","sentencesToParagraphMapper","sentences","sentencesToParagraphUnmapper"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/WordsToLorem.js"],"sourcesContent":["export function wordsToJoinedStringMapper(words) {\n    return words.map((w) => (w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w)).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n    return function wordsToJoinedStringUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        const words = [];\n        for (const candidate of value.split(' ')) {\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexport function wordsToSentenceMapper(words) {\n    let sentence = words.join(' ');\n    if (sentence[sentence.length - 1] === ',') {\n        sentence = sentence.substr(0, sentence.length - 1);\n    }\n    return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n    return function wordsToSentenceUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        if (value.length < 2 ||\n            value[value.length - 1] !== '.' ||\n            value[value.length - 2] === ',' ||\n            value[0].toLowerCase().toUpperCase() !== value[0]) {\n            throw new Error('Unsupported value');\n        }\n        const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n        const words = [];\n        const candidates = adaptedValue.split(' ');\n        for (let idx = 0; idx !== candidates.length; ++idx) {\n            const candidate = candidates[idx];\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexport function sentencesToParagraphMapper(sentences) {\n    return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const sentences = value.split('. ');\n    for (let idx = 0; idx < sentences.length - 1; ++idx) {\n        sentences[idx] += '.';\n    }\n    return sentences;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forBytecode = exports.forContract = exports.forContracts = void 0;\nfunction forContracts(contracts) {\n  // convert to list\n  return Object.values(contracts).map(forContract);\n}\nexports.forContracts = forContracts;\nfunction forContract(contract) {\n  const {\n    contractName,\n    contract_name,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode,\n    deployedBytecode,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  } = contract;\n  return {\n    contractName: contract_name || contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: bytecode ? forBytecode(bytecode) : undefined,\n    deployedBytecode: deployedBytecode ? forBytecode(deployedBytecode) : undefined,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  };\n}\nexports.forContract = forContract;\nfunction forBytecode(bytecode) {\n  if (typeof bytecode === \"object\") {\n    return bytecode;\n  }\n  const linkReferences = [];\n  const bytes = bytecode.slice(2) // remove 0x prefix\n  .replace(/__[^_]+_*/g, (linkReference, characterOffset) => {\n    const match = linkReference.match(/__([^_]+)_*/);\n    if (match === null) {\n      //this can't actually happen, but strictNullChecks requires it\n      throw new Error(\"Could not extract link reference name\");\n    }\n    const name = match[1];\n    const characterLength = linkReference.length;\n    const offset = characterOffset / 2;\n    const length = characterLength / 2;\n    linkReferences.push({\n      offsets: [offset],\n      name,\n      length\n    });\n    return \"0\".repeat(characterLength);\n  });\n  return {\n    bytes,\n    linkReferences\n  };\n}\nexports.forBytecode = forBytecode;","map":{"version":3,"mappings":";;;;;;AAEA,SAAgBA,YAAY,CAACC,SAAgB;EAC3C;EACA,OAAOC,MAAM,CAACC,MAAM,CAACF,SAAS,CAAC,CAACG,GAAG,CAACC,WAAW,CAAC;AAClD;AAHAC;AAKA,SAAgBD,WAAW,CAACE,QAAa;EACvC,MAAM;IACJC,YAAY;IACZC,aAAa;IACbC,UAAU;IACVC,MAAM;IACNC,SAAS;IACTC,iBAAiB;IACjBC,SAAS;IACTC,GAAG;IACHC,GAAG;IACHC,QAAQ;IACRC,QAAQ;IACRC,gBAAgB;IAChBC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,mBAAmB;IACnBC,gBAAgB;IAChBC,wBAAwB;IACxBC;EAAE,CACH,GAAGnB,QAAQ;EAEZ,OAAO;IACLC,YAAY,EAAEC,aAAa,IAAID,YAAY;IAC3CE,UAAU;IACVC,MAAM;IACNC,SAAS;IACTC,iBAAiB;IACjBC,SAAS;IACTC,GAAG;IACHC,GAAG;IACHC,QAAQ;IACRC,QAAQ,EAAEA,QAAQ,GAAGS,WAAW,CAACT,QAAQ,CAAC,GAAGU,SAAS;IACtDT,gBAAgB,EAAEA,gBAAgB,GAC9BQ,WAAW,CAACR,gBAAgB,CAAC,GAC7BS,SAAS;IACbR,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,mBAAmB;IACnBC,gBAAgB;IAChBC,wBAAwB;IACxBC;GACD;AACH;AA7CApB;AA+CA,SAAgBqB,WAAW,CAACT,QAAgB;EAC1C,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;;EAGjB,MAAMW,cAAc,GAAoB,EAAE;EAE1C,MAAMC,KAAK,GAAGZ,QAAQ,CACnBa,KAAK,CAAC,CAAC,CAAC,CAAC;EAAA,CACTC,OAAO,CAAC,YAAY,EAAE,CAACC,aAAa,EAAEC,eAAe,KAAI;IACxD,MAAMC,KAAK,GAAGF,aAAa,CAACE,KAAK,CAAC,aAAa,CAAC;IAChD,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB;MACA,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;;IAE1D,MAAMC,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;IAErB,MAAMG,eAAe,GAAGL,aAAa,CAACM,MAAM;IAE5C,MAAMC,MAAM,GAAGN,eAAe,GAAG,CAAC;IAClC,MAAMK,MAAM,GAAGD,eAAe,GAAG,CAAC;IAElCT,cAAc,CAACY,IAAI,CAAC;MAClBC,OAAO,EAAE,CAACF,MAAM,CAAC;MACjBH,IAAI;MACJE;KACD,CAAC;IAEF,OAAO,GAAG,CAACI,MAAM,CAACL,eAAe,CAAC;EACpC,CAAC,CAAC;EAEJ,OAAO;IAAER,KAAK;IAAED;EAAc,CAAE;AAClC;AAhCAvB","names":["forContracts","contracts","Object","values","map","forContract","exports","contract","contractName","contract_name","sourcePath","source","sourceMap","deployedSourceMap","legacyAST","ast","abi","metadata","bytecode","deployedBytecode","compiler","devdoc","userdoc","immutableReferences","generatedSources","deployedGeneratedSources","db","forBytecode","undefined","linkReferences","bytes","slice","replace","linkReference","characterOffset","match","Error","name","characterLength","length","offset","push","offsets","repeat"],"sourceRoot":"","sources":["../../../src/shims/LegacyToNew.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
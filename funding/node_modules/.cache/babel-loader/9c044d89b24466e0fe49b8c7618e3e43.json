{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nfunction isNegativeLookbehindAvailable() {\n  try {\n    new RegExp('(?<!.)');\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\n//like a C number, except:\n//1. no octal literals (leading zeroes disallowed)\n//2. underscores (1 apiece) are allowed between consecutive digits\n//(including hex digits)\n//also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n//NOTE: we use string rather than regexp in the case where negative lookbehind\n//is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\nvar SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)(?!\\w|\\$)/;\nif (isNegativeLookbehindAvailable()) {\n  SOL_NUMBER_RE = SOL_NUMBER_RE.source.replace(/\\\\b/g, '(?<!\\\\$)\\\\b');\n}\nvar SOL_NUMBER = {\n  className: 'number',\n  begin: SOL_NUMBER_RE,\n  relevance: 0\n};\nvar SOL_ASSEMBLY_KEYWORDS = {\n  keyword: 'assembly ' + 'let function ' + 'if switch case default for leave ' + 'break continue ' + 'u256 ' +\n  //not in old-style assembly, but in Yul\n  //NOTE: We're counting most opcodes as builtins, but the following ones we're\n  //treating as keywords because they alter control flow or halt execution\n  'jump jumpi ' + 'stop return revert selfdestruct invalid',\n  built_in:\n  //NOTE that push1 through push32, as well as jumpdest, are not included\n  'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' + 'and or xor byte shl shr sar ' + 'addmod mulmod signextend keccak256 ' + 'pc pop ' + 'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' + 'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' + 'mload mstore mstore8 sload sstore msize ' + 'gas address balance selfbalance caller callvalue ' + 'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' + 'create create2 call callcode delegatecall staticcall ' + 'log0 log1 log2 log3 log4 ' + 'chainid origin gasprice basefee blockhash coinbase timestamp number difficulty gaslimit',\n  literal: 'true false'\n};\nvar HEX_APOS_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/ //please also update HEX_QUOTE_STRING_MODE\n};\n\nvar HEX_QUOTE_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/ //please also update HEX_APOS_STRING_MODE\n};\n\n//I've set these up exactly like hljs's builtin STRING_MODEs,\n//except with the optional initial \"unicode\" text\nfunction solAposStringMode(hljs) {\n  return hljs.inherit(hljs.APOS_STRING_MODE,\n  //please also update solQuoteStringMode\n  {\n    begin: /(\\bunicode)?'/\n  });\n}\nfunction solQuoteStringMode(hljs) {\n  return hljs.inherit(hljs.QUOTE_STRING_MODE,\n  //please also update solAposStringMode\n  {\n    begin: /(\\bunicode)?\"/\n  });\n}\nfunction baseAssembly(hljs) {\n  //this function defines a \"basic\" assembly environment;\n  //we use it several times below with hljs.inherit to provide\n  //elaborations upon this basic assembly environment\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n  //in assembly, identifiers can contain periods (but may not start with them)\n  var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n  var SOL_ASSEMBLY_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS\n  });\n  var SOL_ASSEMBLY_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER]\n  };\n\n  //note: we always put operators below comments so\n  //it won't interfere with comments\n  var SOL_ASSEMBLY_OPERATORS = {\n    className: 'operator',\n    begin: /:=|->/\n  };\n  return {\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    contains: [SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_ASSEMBLY_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n      beginKeywords: 'function',\n      end: '{',\n      excludeEnd: true,\n      contains: [SOL_ASSEMBLY_TITLE_MODE, SOL_ASSEMBLY_FUNC_PARAMS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_ASSEMBLY_OPERATORS]\n    }]\n  };\n}\nmodule.exports = {\n  SOL_ASSEMBLY_KEYWORDS,\n  baseAssembly,\n  solAposStringMode,\n  solQuoteStringMode,\n  HEX_APOS_STRING_MODE,\n  HEX_QUOTE_STRING_MODE,\n  SOL_NUMBER,\n  isNegativeLookbehindAvailable\n};","map":{"version":3,"names":["isNegativeLookbehindAvailable","RegExp","_","SOL_NUMBER_RE","source","replace","SOL_NUMBER","className","begin","relevance","SOL_ASSEMBLY_KEYWORDS","keyword","built_in","literal","HEX_APOS_STRING_MODE","HEX_QUOTE_STRING_MODE","solAposStringMode","hljs","inherit","APOS_STRING_MODE","solQuoteStringMode","QUOTE_STRING_MODE","baseAssembly","SOL_APOS_STRING_MODE","SOL_QUOTE_STRING_MODE","SOL_ASSEMBLY_LEXEMES_RE","SOL_ASSEMBLY_TITLE_MODE","TITLE_MODE","lexemes","keywords","SOL_ASSEMBLY_FUNC_PARAMS","end","excludeBegin","excludeEnd","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","SOL_ASSEMBLY_OPERATORS","beginKeywords","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/highlightjs-solidity/src/common.js"],"sourcesContent":["/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nfunction isNegativeLookbehindAvailable() {\n    try {\n        new RegExp('(?<!.)');\n        return true;\n    } catch (_) {\n        return false;\n    }\n}\n\n//like a C number, except:\n//1. no octal literals (leading zeroes disallowed)\n//2. underscores (1 apiece) are allowed between consecutive digits\n//(including hex digits)\n//also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n//NOTE: we use string rather than regexp in the case where negative lookbehind\n//is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\nvar SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)(?!\\w|\\$)/;\nif (isNegativeLookbehindAvailable()) {\n    SOL_NUMBER_RE = SOL_NUMBER_RE.source.replace(/\\\\b/g, '(?<!\\\\$)\\\\b');\n}\n\nvar SOL_NUMBER = {\n    className: 'number',\n    begin: SOL_NUMBER_RE,\n    relevance: 0,\n};\n\nvar SOL_ASSEMBLY_KEYWORDS = {\n    keyword:\n        'assembly ' +\n        'let function ' +\n        'if switch case default for leave ' +\n        'break continue ' +\n        'u256 ' + //not in old-style assembly, but in Yul\n        //NOTE: We're counting most opcodes as builtins, but the following ones we're\n        //treating as keywords because they alter control flow or halt execution\n        'jump jumpi ' +\n        'stop return revert selfdestruct invalid',\n    built_in:\n        //NOTE that push1 through push32, as well as jumpdest, are not included\n        'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' +\n        'and or xor byte shl shr sar ' +\n        'addmod mulmod signextend keccak256 ' +\n        'pc pop ' +\n        'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' +\n        'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' +\n        'mload mstore mstore8 sload sstore msize ' +\n        'gas address balance selfbalance caller callvalue ' +\n        'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' +\n        'create create2 call callcode delegatecall staticcall ' +\n        'log0 log1 log2 log3 log4 ' +\n        'chainid origin gasprice basefee blockhash coinbase timestamp number difficulty gaslimit',\n    literal:\n        'true false'\n};\n\nvar HEX_APOS_STRING_MODE = {\n    className: 'string',\n    begin: /\\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/, //please also update HEX_QUOTE_STRING_MODE\n};\n\nvar HEX_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: /\\bhex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/, //please also update HEX_APOS_STRING_MODE\n};\n\n//I've set these up exactly like hljs's builtin STRING_MODEs,\n//except with the optional initial \"unicode\" text\nfunction solAposStringMode(hljs) {\n    return hljs.inherit(\n        hljs.APOS_STRING_MODE, //please also update solQuoteStringMode\n        { begin: /(\\bunicode)?'/ }\n    );\n}\n\nfunction solQuoteStringMode(hljs) {\n    return hljs.inherit(\n        hljs.QUOTE_STRING_MODE, //please also update solAposStringMode\n        { begin: /(\\bunicode)?\"/ }\n    );\n}\n\nfunction baseAssembly(hljs) {\n    //this function defines a \"basic\" assembly environment;\n    //we use it several times below with hljs.inherit to provide\n    //elaborations upon this basic assembly environment\n    var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n    var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n    //in assembly, identifiers can contain periods (but may not start with them)\n    var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n\n    var SOL_ASSEMBLY_TITLE_MODE =\n        hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n            lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n            keywords: SOL_ASSEMBLY_KEYWORDS\n        });\n\n    var SOL_ASSEMBLY_FUNC_PARAMS = {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n        keywords: SOL_ASSEMBLY_KEYWORDS,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            SOL_NUMBER\n        ]\n    };\n\n    //note: we always put operators below comments so\n    //it won't interfere with comments\n    var SOL_ASSEMBLY_OPERATORS = {\n        className: 'operator',\n        begin: /:=|->/\n    };\n\n    return {\n        keywords: SOL_ASSEMBLY_KEYWORDS,\n        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n        contains: [\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            HEX_APOS_STRING_MODE,\n            HEX_QUOTE_STRING_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_NUMBER,\n            SOL_ASSEMBLY_OPERATORS,\n            { // functions\n                className: 'function',\n                lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n                beginKeywords: 'function', end: '{', excludeEnd: true,\n                contains: [\n                    SOL_ASSEMBLY_TITLE_MODE,\n                    SOL_ASSEMBLY_FUNC_PARAMS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_ASSEMBLY_OPERATORS\n                ],\n            }\n        ]\n    };\n}\n\nmodule.exports = {\n    SOL_ASSEMBLY_KEYWORDS,\n    baseAssembly,\n    solAposStringMode,\n    solQuoteStringMode,\n    HEX_APOS_STRING_MODE,\n    HEX_QUOTE_STRING_MODE,\n    SOL_NUMBER,\n    isNegativeLookbehindAvailable\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
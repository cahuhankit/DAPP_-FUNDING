{"ast":null,"code":"import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n  switch (size) {\n    case 'xsmall':\n      return Math.floor(1.1 * minLength) + 1;\n    case 'small':\n      return 2 * minLength + 10;\n    case 'medium':\n      return 11 * minLength + 100;\n    case 'large':\n      return 101 * minLength + 1000;\n    case 'xlarge':\n      return 1001 * minLength + 10000;\n    default:\n      throw new Error(`Unable to compute lengths based on received size: ${size}`);\n  }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n  const sizeInRelative = orderedRelativeSize.indexOf(size);\n  if (sizeInRelative === -1) {\n    return size;\n  }\n  const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n  if (defaultSizeInSize === -1) {\n    throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n  }\n  const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n  return resultingSizeInSize < 0 ? orderedSize[0] : resultingSizeInSize >= orderedSize.length ? orderedSize[orderedSize.length - 1] : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n  const {\n    baseSize: defaultSize = DefaultSize,\n    defaultSizeToMaxWhenMaxSpecified\n  } = readConfigureGlobal() || {};\n  const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n  if (definedSize === 'max') {\n    return maxLength;\n  }\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n  return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function depthBiasFromSizeForArbitrary(depthSizeOrSize, specifiedMaxDepth) {\n  if (typeof depthSizeOrSize === 'number') {\n    return 1 / depthSizeOrSize;\n  }\n  const {\n    baseSize: defaultSize = DefaultSize,\n    defaultSizeToMaxWhenMaxSpecified\n  } = readConfigureGlobal() || {};\n  const definedSize = depthSizeOrSize !== undefined ? depthSizeOrSize : specifiedMaxDepth && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n  if (definedSize === 'max') {\n    return 0;\n  }\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n  switch (finalSize) {\n    case 'xsmall':\n      return 1;\n    case 'small':\n      return 0.5;\n    case 'medium':\n      return 0.25;\n    case 'large':\n      return 0.125;\n    case 'xlarge':\n      return 0.0625;\n  }\n}\nexport function resolveSize(size) {\n  const {\n    baseSize: defaultSize = DefaultSize\n  } = readConfigureGlobal() || {};\n  if (size === undefined) {\n    return defaultSize;\n  }\n  return relativeSizeToSize(size, defaultSize);\n}","map":{"version":3,"names":["readConfigureGlobal","MaxLengthUpperBound","orderedSize","orderedRelativeSize","DefaultSize","maxLengthFromMinLength","minLength","size","Math","floor","Error","relativeSizeToSize","defaultSize","sizeInRelative","indexOf","defaultSizeInSize","resultingSizeInSize","length","maxGeneratedLengthFromSizeForArbitrary","maxLength","specifiedMaxLength","baseSize","defaultSizeToMaxWhenMaxSpecified","definedSize","undefined","finalSize","min","depthBiasFromSizeForArbitrary","depthSizeOrSize","specifiedMaxDepth","resolveSize"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/MaxLengthFromMinLength.js"],"sourcesContent":["import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n    switch (size) {\n        case 'xsmall':\n            return Math.floor(1.1 * minLength) + 1;\n        case 'small':\n            return 2 * minLength + 10;\n        case 'medium':\n            return 11 * minLength + 100;\n        case 'large':\n            return 101 * minLength + 1000;\n        case 'xlarge':\n            return 1001 * minLength + 10000;\n        default:\n            throw new Error(`Unable to compute lengths based on received size: ${size}`);\n    }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n    const sizeInRelative = orderedRelativeSize.indexOf(size);\n    if (sizeInRelative === -1) {\n        return size;\n    }\n    const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n    if (defaultSizeInSize === -1) {\n        throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n    }\n    const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n    return resultingSizeInSize < 0\n        ? orderedSize[0]\n        : resultingSizeInSize >= orderedSize.length\n            ? orderedSize[orderedSize.length - 1]\n            : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n    const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};\n    const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n    if (definedSize === 'max') {\n        return maxLength;\n    }\n    const finalSize = relativeSizeToSize(definedSize, defaultSize);\n    return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function depthBiasFromSizeForArbitrary(depthSizeOrSize, specifiedMaxDepth) {\n    if (typeof depthSizeOrSize === 'number') {\n        return 1 / depthSizeOrSize;\n    }\n    const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};\n    const definedSize = depthSizeOrSize !== undefined\n        ? depthSizeOrSize\n        : specifiedMaxDepth && defaultSizeToMaxWhenMaxSpecified\n            ? 'max'\n            : defaultSize;\n    if (definedSize === 'max') {\n        return 0;\n    }\n    const finalSize = relativeSizeToSize(definedSize, defaultSize);\n    switch (finalSize) {\n        case 'xsmall':\n            return 1;\n        case 'small':\n            return 0.5;\n        case 'medium':\n            return 0.25;\n        case 'large':\n            return 0.125;\n        case 'xlarge':\n            return 0.0625;\n    }\n}\nexport function resolveSize(size) {\n    const { baseSize: defaultSize = DefaultSize } = readConfigureGlobal() || {};\n    if (size === undefined) {\n        return defaultSize;\n    }\n    return relativeSizeToSize(size, defaultSize);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMagic = exports.decodeSpecial = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:special:decode\");\nconst Basic = __importStar(require(\"../../basic\"));\nconst Bytes = __importStar(require(\"../../bytes\"));\nconst Compiler = __importStar(require(\"../../compiler\"));\nconst Evm = __importStar(require(\"../../evm\"));\nfunction* decodeSpecial(dataType, pointer, info) {\n  if (dataType.typeClass === \"magic\") {\n    return yield* decodeMagic(dataType, pointer, info);\n  } else {\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n  }\n}\nexports.decodeSpecial = decodeSpecial;\nfunction* decodeMagic(dataType, pointer, info) {\n  let {\n    state\n  } = info;\n  switch (pointer.special) {\n    case \"msg\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          data: yield* Bytes.Decode.decodeBytes({\n            typeClass: \"bytes\",\n            kind: \"dynamic\",\n            location: \"calldata\"\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: state.calldata.length\n          }, info),\n          sig: yield* Basic.Decode.decodeBasic({\n            typeClass: \"bytes\",\n            kind: \"static\",\n            length: Evm.Utils.SELECTOR_SIZE\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: Evm.Utils.SELECTOR_SIZE\n          }, info),\n          sender: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"sender\"\n          }, info),\n          value: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"value\"\n          }, info)\n        }\n      };\n    case \"tx\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          origin: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"origin\"\n          }, info),\n          gasprice: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"gasprice\"\n          }, info)\n        }\n      };\n    case \"block\":\n      let block = {\n        coinbase: yield* Basic.Decode.decodeBasic(coinbaseType(info.currentContext.compiler), {\n          location: \"special\",\n          special: \"coinbase\"\n        }, info)\n      };\n      //the other ones are all uint's, so let's handle them all at once; due to\n      //the lack of generator arrow functions, we do it by mutating block\n      const variables = [\"difficulty\", \"gaslimit\", \"number\", \"timestamp\"];\n      if (solidityVersionHasChainId(info.currentContext.compiler)) {\n        variables.push(\"chainid\");\n      }\n      if (solidityVersionHasBaseFee(info.currentContext.compiler)) {\n        variables.push(\"basefee\");\n      }\n      for (let variable of variables) {\n        block[variable] = yield* Basic.Decode.decodeBasic({\n          typeClass: \"uint\",\n          bits: 256\n        }, {\n          location: \"special\",\n          special: variable\n        }, info);\n      }\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: block\n      };\n  }\n}\nexports.decodeMagic = decodeMagic;\nfunction senderType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n    case \"0.5.x\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n    default:\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: false\n      };\n  }\n}\nfunction coinbaseType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n    case \"0.5.x\":\n    case \"0.8.x\":\n    case \"0.8.7+\":\n    case \"0.8.9+\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n  }\n}\nfunction solidityVersionHasChainId(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n      return false;\n    default:\n      return true;\n  }\n}\nfunction solidityVersionHasBaseFee(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n    case \"0.8.x\":\n      return false;\n    default:\n      return true;\n  }\n}","map":{"version":3,"mappings":"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","names":["debug","decodeSpecial","dataType","pointer","info","typeClass","decodeMagic","Basic","Decode","decodeBasic","exports","state","special","type","kind","value","data","Bytes","decodeBytes","location","start","length","calldata","sig","Evm","Utils","SELECTOR_SIZE","sender","senderType","currentContext","compiler","bits","origin","gasprice","block","coinbase","coinbaseType","variables","solidityVersionHasChainId","push","solidityVersionHasBaseFee","variable","Compiler","solidityFamily","payable"],"sourceRoot":"","sources":["../../../../lib/special/decode/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
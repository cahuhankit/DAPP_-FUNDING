{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nconst {\n  baseAssembly,\n  solAposStringMode,\n  solQuoteStringMode,\n  HEX_APOS_STRING_MODE,\n  HEX_QUOTE_STRING_MODE,\n  SOL_NUMBER,\n  isNegativeLookbehindAvailable\n} = require(\"../common.js\");\nfunction hljsDefineSolidity(hljs) {\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n  //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n  //NOTE: unparameterized versions are *not* included here, those are included\n  //manually\n  var byteSizes = [];\n  for (var i = 0; i < 32; i++) {\n    byteSizes[i] = i + 1;\n  }\n  var numSizes = byteSizes.map(function (bytes) {\n    return bytes * 8;\n  });\n  var precisions = [];\n  for (i = 0; i <= 80; i++) {\n    precisions[i] = i;\n  }\n  var bytesTypes = byteSizes.map(function (size) {\n    return 'bytes' + size;\n  });\n  var bytesTypesString = bytesTypes.join(' ') + ' ';\n  var uintTypes = numSizes.map(function (size) {\n    return 'uint' + size;\n  });\n  var uintTypesString = uintTypes.join(' ') + ' ';\n  var intTypes = numSizes.map(function (size) {\n    return 'int' + size;\n  });\n  var intTypesString = intTypes.join(' ') + ' ';\n  var sizePrecisionPairs = [].concat.apply([], numSizes.map(function (size) {\n    return precisions.map(function (precision) {\n      return size + 'x' + precision;\n    });\n  }));\n  var fixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'fixed' + pair;\n  });\n  var fixedTypesString = fixedTypes.join(' ') + ' ';\n  var ufixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'ufixed' + pair;\n  });\n  var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n  var SOL_KEYWORDS = {\n    keyword: 'var bool string ' + 'int uint ' + intTypesString + uintTypesString + 'byte bytes ' + bytesTypesString + 'fixed ufixed ' + fixedTypesString + ufixedTypesString + 'enum struct mapping address ' + 'new delete ' + 'if else for while continue break return throw emit try catch revert ' + 'unchecked ' +\n    //NOTE: doesn't always act as a keyword, but seems fine to include\n    '_ ' + 'function modifier event constructor fallback receive error ' + 'virtual override ' + 'constant immutable anonymous indexed ' + 'storage memory calldata ' + 'external public internal payable pure view private returns ' + 'import from as using global pragma ' + 'contract interface library is abstract ' + 'type ' + 'assembly',\n    literal: 'true false ' + 'wei gwei szabo finney ether ' + 'seconds minutes hours days weeks years',\n    built_in: 'self ' +\n    // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n    'this super selfdestruct suicide ' + 'now ' + 'msg block tx abi ' + 'blockhash gasleft ' + 'assert require ' + 'Error Panic ' + 'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' + 'log0 log1 log2 log3 log4'\n  };\n\n  //note: we always put operators below comments so\n  //it won't interfere with comments\n  var SOL_OPERATORS = {\n    className: 'operator',\n    begin: /[+\\-!~*\\/%<>&^|=]/ //excluding ?: because having : as operator causes problems\n  };\n\n  var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*/;\n  var SOL_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER, 'self' //to account for mappings and fn variables\n    ]\n  };\n\n  var SOL_RESERVED_MEMBERS = {\n    begin: /\\.\\s*/,\n    // match any property access up to start of prop\n    end: /[^A-Za-z0-9$_\\.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'gas value selector address length push pop ' +\n      //members of external functions; members of arrays\n      'send transfer call callcode delegatecall staticcall ' +\n      //members of addresses\n      'balance code codehash ' +\n      //more members of addresses\n      'wrap unwrap ' +\n      //members of UDVTs (the types not the values)\n      'name creationCode runtimeCode interfaceId min max' //members of type(...)\n    },\n\n    relevance: 2\n  };\n  var SOL_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS\n  });\n\n  //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n  var SOL_SPECIAL_PARAMETERS_LIST = ['gas', 'value', 'salt'];\n  var SOL_SPECIAL_PARAMETERS_PARTIAL_RE = '(' + SOL_SPECIAL_PARAMETERS_LIST.join('|') + ')(?=:)';\n  var SOL_SPECIAL_PARAMETERS = {\n    className: 'built_in',\n    begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + SOL_SPECIAL_PARAMETERS_PARTIAL_RE\n  };\n  function makeBuiltinProps(obj, props) {\n    return {\n      begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n      end: /[^A-Za-z0-9$_\\.]/,\n      excludeBegin: false,\n      excludeEnd: true,\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        built_in: obj + ' ' + props\n      },\n      contains: [SOL_RESERVED_MEMBERS],\n      relevance: 10\n    };\n  }\n\n  //covers the special slot/offset notation in assembly\n  //(old-style, with an underscore)\n  var SOL_ASSEMBLY_MEMBERS_OLD = {\n    begin: /_/,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset'\n    },\n    relevance: 2\n  };\n\n  //covers the special slot/offset notation in assembly\n  //(new-style, with a dot; keeping this separate as it\n  //may be expanded in the future)\n  var SOL_ASSEMBLY_MEMBERS = {\n    begin: /\\./,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset length address selector'\n    },\n    relevance: 2\n  };\n  var BASE_ASSEMBLY_ENVIRONMENT = baseAssembly(hljs);\n  var SOL_ASSEMBLY_ENVIRONMENT = hljs.inherit(BASE_ASSEMBLY_ENVIRONMENT, {\n    contains: BASE_ASSEMBLY_ENVIRONMENT.contains.concat([SOL_ASSEMBLY_MEMBERS, SOL_ASSEMBLY_MEMBERS_OLD])\n  });\n  return {\n    aliases: ['sol'],\n    keywords: SOL_KEYWORDS,\n    lexemes: SOL_LEXEMES_RE,\n    contains: [\n    // basic literal definitions\n    SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_SPECIAL_PARAMETERS, SOL_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'function modifier event constructor fallback receive error',\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n      illegal: /%/\n    },\n    // built-in members\n    makeBuiltinProps('msg', 'gas value data sender sig'), makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit basefee number timestamp chainid'), makeBuiltinProps('tx', 'gasprice origin'), makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall'), makeBuiltinProps('bytes', 'concat'), makeBuiltinProps('string', 'concat'), SOL_RESERVED_MEMBERS, {\n      // contracts & libraries & interfaces\n      className: 'class',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'contract interface library',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'is',\n        lexemes: SOL_LEXEMES_RE\n      }, SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // structs & enums\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'struct enum',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // imports\n      beginKeywords: 'import',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'import from as',\n      contains: [SOL_TITLE_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // using\n      beginKeywords: 'using',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'using for global',\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // pragmas\n      className: 'meta',\n      beginKeywords: 'pragma',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        keyword: 'pragma solidity experimental abicoder',\n        built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n      },\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      })]\n    }, {\n      //assembly section\n      beginKeywords: 'assembly',\n      end: /\\b\\B/,\n      //unsatisfiable regex; ended by endsParent instead\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }),\n      //going to count \"memory-safe\" etc as meta-strings\n      hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n        //the actual *block* in the assembly section\n        begin: '{',\n        end: '}',\n        endsParent: true,\n        contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat([hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n          //block within assembly\n          begin: '{',\n          end: '}',\n          contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat(['self'])\n        })])\n      })]\n    }],\n    illegal: /#/\n  };\n}\nmodule.exports = hljsDefineSolidity;","map":{"version":3,"names":["baseAssembly","solAposStringMode","solQuoteStringMode","HEX_APOS_STRING_MODE","HEX_QUOTE_STRING_MODE","SOL_NUMBER","isNegativeLookbehindAvailable","require","hljsDefineSolidity","hljs","SOL_APOS_STRING_MODE","SOL_QUOTE_STRING_MODE","byteSizes","i","numSizes","map","bytes","precisions","bytesTypes","size","bytesTypesString","join","uintTypes","uintTypesString","intTypes","intTypesString","sizePrecisionPairs","concat","apply","precision","fixedTypes","pair","fixedTypesString","ufixedTypes","ufixedTypesString","SOL_KEYWORDS","keyword","literal","built_in","SOL_OPERATORS","className","begin","SOL_LEXEMES_RE","SOL_FUNC_PARAMS","end","excludeBegin","excludeEnd","lexemes","keywords","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","SOL_RESERVED_MEMBERS","relevance","SOL_TITLE_MODE","inherit","TITLE_MODE","SOL_SPECIAL_PARAMETERS_LIST","SOL_SPECIAL_PARAMETERS_PARTIAL_RE","SOL_SPECIAL_PARAMETERS","makeBuiltinProps","obj","props","SOL_ASSEMBLY_MEMBERS_OLD","SOL_ASSEMBLY_MEMBERS","BASE_ASSEMBLY_ENVIRONMENT","SOL_ASSEMBLY_ENVIRONMENT","aliases","beginKeywords","illegal","endsParent","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/highlightjs-solidity/src/languages/solidity.js"],"sourcesContent":["/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nconst {\n    baseAssembly,\n    solAposStringMode,\n    solQuoteStringMode,\n    HEX_APOS_STRING_MODE,\n    HEX_QUOTE_STRING_MODE,\n    SOL_NUMBER,\n    isNegativeLookbehindAvailable\n} = require(\"../common.js\");\n\nfunction hljsDefineSolidity(hljs) {\n\n    var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n    var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n    //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n    //NOTE: unparameterized versions are *not* included here, those are included\n    //manually\n    var byteSizes = [];\n    for(var i = 0; i < 32; i++) {\n        byteSizes[i] = i+1;\n    }\n    var numSizes = byteSizes.map(function(bytes) { return bytes * 8 } );\n    var precisions = [];\n    for(i = 0; i <= 80; i++) {\n        precisions[i] = i;\n    }\n\n    var bytesTypes = byteSizes.map(function(size) { return 'bytes' + size });\n    var bytesTypesString = bytesTypes.join(' ') + ' ';\n\n    var uintTypes = numSizes.map(function(size) { return 'uint' + size });\n    var uintTypesString = uintTypes.join(' ') + ' ';\n\n    var intTypes = numSizes.map(function(size) { return 'int' + size });\n    var intTypesString = intTypes.join(' ') + ' ';\n\n    var sizePrecisionPairs = [].concat.apply([],\n        numSizes.map(function(size) {\n            return precisions.map(function(precision) {\n                return size + 'x' + precision;\n            })\n        })\n    );\n\n    var fixedTypes = sizePrecisionPairs.map(function(pair) { return 'fixed' + pair });\n    var fixedTypesString = fixedTypes.join(' ') + ' ';\n\n    var ufixedTypes = sizePrecisionPairs.map(function(pair) { return 'ufixed' + pair });\n    var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n\n    var SOL_KEYWORDS = {\n        keyword:\n            'var bool string ' +\n            'int uint ' + intTypesString + uintTypesString +\n            'byte bytes ' + bytesTypesString +\n            'fixed ufixed ' + fixedTypesString + ufixedTypesString +\n            'enum struct mapping address ' +\n\n            'new delete ' +\n            'if else for while continue break return throw emit try catch revert ' +\n            'unchecked ' +\n            //NOTE: doesn't always act as a keyword, but seems fine to include\n            '_ ' +\n\n            'function modifier event constructor fallback receive error ' +\n            'virtual override ' +\n            'constant immutable anonymous indexed ' +\n            'storage memory calldata ' +\n            'external public internal payable pure view private returns ' +\n\n            'import from as using global pragma ' +\n            'contract interface library is abstract ' +\n            'type ' +\n            'assembly',\n        literal:\n            'true false ' +\n            'wei gwei szabo finney ether ' +\n            'seconds minutes hours days weeks years',\n        built_in:\n            'self ' +   // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n            'this super selfdestruct suicide ' +\n            'now ' +\n            'msg block tx abi ' +\n            'blockhash gasleft ' +\n            'assert require ' +\n            'Error Panic ' +\n            'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' +\n            'log0 log1 log2 log3 log4'\n    };\n\n    //note: we always put operators below comments so\n    //it won't interfere with comments\n    var SOL_OPERATORS = {\n        className: 'operator',\n        begin: /[+\\-!~*\\/%<>&^|=]/ //excluding ?: because having : as operator causes problems\n    };\n\n    var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*/;\n\n    var SOL_FUNC_PARAMS = {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        lexemes: SOL_LEXEMES_RE,\n        keywords: SOL_KEYWORDS,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            SOL_NUMBER,\n            'self' //to account for mappings and fn variables\n        ]\n    };\n\n    var SOL_RESERVED_MEMBERS = {\n        begin: /\\.\\s*/,  // match any property access up to start of prop\n        end: /[^A-Za-z0-9$_\\.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'gas value selector address length push pop ' + //members of external functions; members of arrays\n                'send transfer call callcode delegatecall staticcall ' + //members of addresses\n                'balance code codehash ' + //more members of addresses\n                'wrap unwrap ' + //members of UDVTs (the types not the values)\n                'name creationCode runtimeCode interfaceId min max' //members of type(...)\n        },\n        relevance: 2,\n    };\n\n    var SOL_TITLE_MODE =\n        hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: SOL_KEYWORDS\n        });\n\n    //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n    var SOL_SPECIAL_PARAMETERS_LIST = ['gas', 'value', 'salt'];\n    var SOL_SPECIAL_PARAMETERS_PARTIAL_RE = '(' + SOL_SPECIAL_PARAMETERS_LIST.join('|') + ')(?=:)';\n    var SOL_SPECIAL_PARAMETERS = {\n        className: 'built_in',\n        begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + SOL_SPECIAL_PARAMETERS_PARTIAL_RE\n    };\n\n    function makeBuiltinProps(obj, props) {\n        return {\n            begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n            end: /[^A-Za-z0-9$_\\.]/,\n            excludeBegin: false,\n            excludeEnd: true,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: {\n                built_in: obj + ' ' + props,\n            },\n            contains: [\n                SOL_RESERVED_MEMBERS\n            ],\n            relevance: 10,\n        };\n    }\n\n    //covers the special slot/offset notation in assembly\n    //(old-style, with an underscore)\n    var SOL_ASSEMBLY_MEMBERS_OLD = {\n        begin: /_/,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset'\n        },\n        relevance: 2,\n    };\n\n    //covers the special slot/offset notation in assembly\n    //(new-style, with a dot; keeping this separate as it\n    //may be expanded in the future)\n    var SOL_ASSEMBLY_MEMBERS = {\n        begin: /\\./,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset length address selector'\n        },\n        relevance: 2,\n    };\n\n    var BASE_ASSEMBLY_ENVIRONMENT = baseAssembly(hljs);\n    var SOL_ASSEMBLY_ENVIRONMENT = hljs.inherit(BASE_ASSEMBLY_ENVIRONMENT, {\n        contains: BASE_ASSEMBLY_ENVIRONMENT.contains.concat([\n            SOL_ASSEMBLY_MEMBERS,\n            SOL_ASSEMBLY_MEMBERS_OLD\n        ])\n    });\n\n    return {\n        aliases: ['sol'],\n        keywords: SOL_KEYWORDS,\n        lexemes: SOL_LEXEMES_RE,\n        contains: [\n            // basic literal definitions\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            HEX_APOS_STRING_MODE,\n            HEX_QUOTE_STRING_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_NUMBER,\n            SOL_SPECIAL_PARAMETERS,\n            SOL_OPERATORS,\n            { // functions\n                className: 'function',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'function modifier event constructor fallback receive error', end: /[{;]/, excludeEnd: true,\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ],\n                illegal: /%/,\n            },\n            // built-in members\n            makeBuiltinProps('msg', 'gas value data sender sig'),\n            makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit basefee number timestamp chainid'),\n            makeBuiltinProps('tx', 'gasprice origin'),\n            makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall'),\n            makeBuiltinProps('bytes', 'concat'),\n            makeBuiltinProps('string', 'concat'),\n            SOL_RESERVED_MEMBERS,\n            { // contracts & libraries & interfaces\n                className: 'class',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'contract interface library', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    { beginKeywords: 'is', lexemes: SOL_LEXEMES_RE },\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // structs & enums\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'struct enum', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // imports\n                beginKeywords: 'import', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'import from as',\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_APOS_STRING_MODE,\n                    SOL_QUOTE_STRING_MODE,\n                    HEX_APOS_STRING_MODE,\n                    HEX_QUOTE_STRING_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_OPERATORS\n                ]\n            },\n            { // using\n                beginKeywords: 'using', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'using for global',\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_OPERATORS\n                ]\n            },\n            { // pragmas\n                className: 'meta',\n                beginKeywords: 'pragma', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: {\n                    keyword: 'pragma solidity experimental abicoder',\n                    built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n                },\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.inherit(SOL_APOS_STRING_MODE, { className: 'meta-string' }),\n                    hljs.inherit(SOL_QUOTE_STRING_MODE, { className: 'meta-string' })\n                ]\n            },\n            { //assembly section\n                beginKeywords: 'assembly',\n                end: /\\b\\B/, //unsatisfiable regex; ended by endsParent instead\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.inherit(SOL_APOS_STRING_MODE, { className: 'meta-string' }), //going to count \"memory-safe\" etc as meta-strings\n                    hljs.inherit(SOL_QUOTE_STRING_MODE, { className: 'meta-string' }),\n                    hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, { //the actual *block* in the assembly section\n                        begin: '{', end: '}',\n                        endsParent: true,\n                        contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat([\n                            hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, { //block within assembly\n                                begin: '{', end: '}',\n                                contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat(['self'])\n                            })\n                        ])\n                    })\n                ]\n            }\n        ],\n        illegal: /#/\n    };\n}\n\nmodule.exports = hljsDefineSolidity;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
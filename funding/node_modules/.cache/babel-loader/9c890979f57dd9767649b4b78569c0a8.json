{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nexport class TupleArbitrary extends Arbitrary {\n  constructor(arbs) {\n    super();\n    this.arbs = arbs;\n    for (let idx = 0; idx !== arbs.length; ++idx) {\n      const arb = arbs[idx];\n      if (arb == null || arb.generate == null) throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);\n    }\n  }\n  static makeItCloneable(vs, values) {\n    return Object.defineProperty(vs, cloneMethod, {\n      value: () => {\n        const cloned = [];\n        for (let idx = 0; idx !== values.length; ++idx) {\n          cloned.push(values[idx].value);\n        }\n        TupleArbitrary.makeItCloneable(cloned, values);\n        return cloned;\n      }\n    });\n  }\n  static wrapper(values) {\n    let cloneable = false;\n    const vs = [];\n    const ctxs = [];\n    for (let idx = 0; idx !== values.length; ++idx) {\n      const v = values[idx];\n      cloneable = cloneable || v.hasToBeCloned;\n      vs.push(v.value);\n      ctxs.push(v.context);\n    }\n    if (cloneable) {\n      TupleArbitrary.makeItCloneable(vs, values);\n    }\n    return new Value(vs, ctxs);\n  }\n  generate(mrng, biasFactor) {\n    return TupleArbitrary.wrapper(this.arbs.map(a => a.generate(mrng, biasFactor)));\n  }\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || value.length !== this.arbs.length) {\n      return false;\n    }\n    for (let index = 0; index !== this.arbs.length; ++index) {\n      if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  shrink(value, context) {\n    let s = Stream.nil();\n    const safeContext = Array.isArray(context) ? context : [];\n    for (let idx = 0; idx !== this.arbs.length; ++idx) {\n      const shrinksForIndex = this.arbs[idx].shrink(value[idx], safeContext[idx]).map(v => {\n        const nextValues = value.map((v, idx) => new Value(cloneIfNeeded(v), safeContext[idx]));\n        return nextValues.slice(0, idx).concat([v]).concat(nextValues.slice(idx + 1));\n      }).map(values => TupleArbitrary.wrapper(values));\n      s = s.join(shrinksForIndex);\n    }\n    return s;\n  }\n}","map":{"version":3,"names":["Stream","cloneIfNeeded","cloneMethod","Arbitrary","Value","TupleArbitrary","constructor","arbs","idx","length","arb","generate","Error","makeItCloneable","vs","values","Object","defineProperty","value","cloned","push","wrapper","cloneable","ctxs","v","hasToBeCloned","context","mrng","biasFactor","map","a","canShrinkWithoutContext","Array","isArray","index","shrink","s","nil","safeContext","shrinksForIndex","nextValues","slice","concat","join"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/TupleArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nexport class TupleArbitrary extends Arbitrary {\n    constructor(arbs) {\n        super();\n        this.arbs = arbs;\n        for (let idx = 0; idx !== arbs.length; ++idx) {\n            const arb = arbs[idx];\n            if (arb == null || arb.generate == null)\n                throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);\n        }\n    }\n    static makeItCloneable(vs, values) {\n        return Object.defineProperty(vs, cloneMethod, {\n            value: () => {\n                const cloned = [];\n                for (let idx = 0; idx !== values.length; ++idx) {\n                    cloned.push(values[idx].value);\n                }\n                TupleArbitrary.makeItCloneable(cloned, values);\n                return cloned;\n            },\n        });\n    }\n    static wrapper(values) {\n        let cloneable = false;\n        const vs = [];\n        const ctxs = [];\n        for (let idx = 0; idx !== values.length; ++idx) {\n            const v = values[idx];\n            cloneable = cloneable || v.hasToBeCloned;\n            vs.push(v.value);\n            ctxs.push(v.context);\n        }\n        if (cloneable) {\n            TupleArbitrary.makeItCloneable(vs, values);\n        }\n        return new Value(vs, ctxs);\n    }\n    generate(mrng, biasFactor) {\n        return TupleArbitrary.wrapper(this.arbs.map((a) => a.generate(mrng, biasFactor)));\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.arbs.length) {\n            return false;\n        }\n        for (let index = 0; index !== this.arbs.length; ++index) {\n            if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    shrink(value, context) {\n        let s = Stream.nil();\n        const safeContext = Array.isArray(context) ? context : [];\n        for (let idx = 0; idx !== this.arbs.length; ++idx) {\n            const shrinksForIndex = this.arbs[idx]\n                .shrink(value[idx], safeContext[idx])\n                .map((v) => {\n                const nextValues = value.map((v, idx) => new Value(cloneIfNeeded(v), safeContext[idx]));\n                return nextValues\n                    .slice(0, idx)\n                    .concat([v])\n                    .concat(nextValues.slice(idx + 1));\n            })\n                .map((values) => TupleArbitrary.wrapper(values));\n            s = s.join(shrinksForIndex);\n        }\n        return s;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
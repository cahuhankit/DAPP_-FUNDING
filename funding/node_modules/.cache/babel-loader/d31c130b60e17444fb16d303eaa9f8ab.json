{"ast":null,"code":"import { option } from '../../option.js';\nimport { tuple } from '../../tuple.js';\nimport { extractEnumerableKeys } from '../helpers/EnumerableKeysExtractor.js';\nimport { buildValuesAndSeparateKeysToObjectMapper, buildValuesAndSeparateKeysToObjectUnmapper } from '../mappers/ValuesAndSeparateKeysToObject.js';\nconst noKeyValue = Symbol('no-key');\nexport function buildPartialRecordArbitrary(recordModel, requiredKeys) {\n  const keys = extractEnumerableKeys(recordModel);\n  const arbs = [];\n  for (let index = 0; index !== keys.length; ++index) {\n    const k = keys[index];\n    const requiredArbitrary = recordModel[k];\n    if (requiredKeys === undefined || requiredKeys.indexOf(k) !== -1) arbs.push(requiredArbitrary);else arbs.push(option(requiredArbitrary, {\n      nil: noKeyValue\n    }));\n  }\n  return tuple(...arbs).map(buildValuesAndSeparateKeysToObjectMapper(keys, noKeyValue), buildValuesAndSeparateKeysToObjectUnmapper(keys, noKeyValue));\n}","map":{"version":3,"names":["option","tuple","extractEnumerableKeys","buildValuesAndSeparateKeysToObjectMapper","buildValuesAndSeparateKeysToObjectUnmapper","noKeyValue","Symbol","buildPartialRecordArbitrary","recordModel","requiredKeys","keys","arbs","index","length","k","requiredArbitrary","undefined","indexOf","push","nil","map"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/PartialRecordArbitraryBuilder.js"],"sourcesContent":["import { option } from '../../option.js';\nimport { tuple } from '../../tuple.js';\nimport { extractEnumerableKeys } from '../helpers/EnumerableKeysExtractor.js';\nimport { buildValuesAndSeparateKeysToObjectMapper, buildValuesAndSeparateKeysToObjectUnmapper, } from '../mappers/ValuesAndSeparateKeysToObject.js';\nconst noKeyValue = Symbol('no-key');\nexport function buildPartialRecordArbitrary(recordModel, requiredKeys) {\n    const keys = extractEnumerableKeys(recordModel);\n    const arbs = [];\n    for (let index = 0; index !== keys.length; ++index) {\n        const k = keys[index];\n        const requiredArbitrary = recordModel[k];\n        if (requiredKeys === undefined || requiredKeys.indexOf(k) !== -1)\n            arbs.push(requiredArbitrary);\n        else\n            arbs.push(option(requiredArbitrary, { nil: noKeyValue }));\n    }\n    return tuple(...arbs).map(buildValuesAndSeparateKeysToObjectMapper(keys, noKeyValue), buildValuesAndSeparateKeysToObjectUnmapper(keys, noKeyValue));\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,iBAAiB;AACxC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,qBAAqB,QAAQ,uCAAuC;AAC7E,SAASC,wCAAwC,EAAEC,0CAA0C,QAAS,6CAA6C;AACnJ,MAAMC,UAAU,GAAGC,MAAM,CAAC,QAAQ,CAAC;AACnC,OAAO,SAASC,2BAA2B,CAACC,WAAW,EAAEC,YAAY,EAAE;EACnE,MAAMC,IAAI,GAAGR,qBAAqB,CAACM,WAAW,CAAC;EAC/C,MAAMG,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,KAAKF,IAAI,CAACG,MAAM,EAAE,EAAED,KAAK,EAAE;IAChD,MAAME,CAAC,GAAGJ,IAAI,CAACE,KAAK,CAAC;IACrB,MAAMG,iBAAiB,GAAGP,WAAW,CAACM,CAAC,CAAC;IACxC,IAAIL,YAAY,KAAKO,SAAS,IAAIP,YAAY,CAACQ,OAAO,CAACH,CAAC,CAAC,KAAK,CAAC,CAAC,EAC5DH,IAAI,CAACO,IAAI,CAACH,iBAAiB,CAAC,CAAC,KAE7BJ,IAAI,CAACO,IAAI,CAAClB,MAAM,CAACe,iBAAiB,EAAE;MAAEI,GAAG,EAAEd;IAAW,CAAC,CAAC,CAAC;EACjE;EACA,OAAOJ,KAAK,CAAC,GAAGU,IAAI,CAAC,CAACS,GAAG,CAACjB,wCAAwC,CAACO,IAAI,EAAEL,UAAU,CAAC,EAAED,0CAA0C,CAACM,IAAI,EAAEL,UAAU,CAAC,CAAC;AACvJ"},"metadata":{},"sourceType":"module"}
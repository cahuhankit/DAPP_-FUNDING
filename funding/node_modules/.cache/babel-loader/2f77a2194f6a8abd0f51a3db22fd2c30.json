{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBytes = void 0;\nconst Conversion = __importStar(require(\"../../conversion\"));\n//UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\nfunction encodeBytes(input) {\n  switch (input.type.typeClass) {\n    case \"bytes\":\n      return Conversion.toBytes(input.value.asHex);\n    case \"string\":\n      {\n        let coercedInput = input;\n        switch (coercedInput.value.kind) {\n          case \"valid\":\n            return Conversion.stringToBytes(coercedInput.value.asString);\n          case \"malformed\":\n            return Conversion.toBytes(coercedInput.value.asHex);\n        }\n      }\n  }\n}\nexports.encodeBytes = encodeBytes;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA,SAAgBA,WAAW,CACzBC,KAAkE;EAElE,QAAQA,KAAK,CAACC,IAAI,CAACC,SAAS;IAC1B,KAAK,OAAO;MACV,OAAOC,UAAU,CAACC,OAAO,CAA4BJ,KAAM,CAACK,KAAK,CAACC,KAAK,CAAC;IAC1E,KAAK,QAAQ;MAAE;QACb,IAAIC,YAAY,GACdP,KACD;QACD,QAAQO,YAAY,CAACF,KAAK,CAACG,IAAI;UAC7B,KAAK,OAAO;YACV,OAAOL,UAAU,CAACM,aAAa,CAACF,YAAY,CAACF,KAAK,CAACK,QAAQ,CAAC;UAC9D,KAAK,WAAW;YACd,OAAOP,UAAU,CAACC,OAAO,CAACG,YAAY,CAACF,KAAK,CAACC,KAAK,CAAC;QAAC;;EAEzD;AAEL;AAlBAK","names":["encodeBytes","input","type","typeClass","Conversion","toBytes","value","asHex","coercedInput","kind","stringToBytes","asString","exports"],"sourceRoot":"","sources":["../../../../lib/bytes/encode/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\nconst url = require('url');\nconst bignumber = require('bignumber.js').BigNumber;\nconst NoFilter = require('nofilter');\nconst Tagged = require('./tagged');\nconst Simple = require('./simple');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst SYMS = constants.SYMS;\nconst TAG = constants.TAG;\nconst HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nconst FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nconst DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nconst TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nconst FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nconst UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nconst NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nconst BREAK = Buffer.from([0xff]);\nconst BI = utils.bigIntize(constants.BI);\nconst BN = constants.BN;\nconst BUF_NAN = Buffer.from('f97e00', 'hex');\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex');\nconst BUF_NEG_ZERO = Buffer.from('f98000', 'hex');\nconst LOOP_DETECT = Symbol('CBOR_LOOP_DETECT');\n\n/**\n * Transform JavaScript values into CBOR bytes.  The `Writable` side of\n * the stream is in object mode.\n *\n * @extends {stream.Transform}\n */\nclass Encoder extends stream.Transform {\n  /**\n   * Creates an instance of Encoder.\n   *\n   * @param {Object} [options={}] - options for the encoder\n   * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,\n   *   `function(Encoder)` for semantic types to be encoded.  Not needed\n   *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.\n   * @param {boolean} [options.canonical=false] - should the output be\n   *   canonicalized\n   * @param {boolean|Symbol} [options.detectLoops=false] - should object loops\n   *   be detected?  This will currently modify the encoded object graph\n   *   by adding a Symbol property to each object.  If this bothers you,\n   *   call `removeLoopDetectors` on the encoded object when done.  Do not\n   *   encode the same object twice on the same encoder, without calling\n   *   `removeLoopDetectors` in between.\n   * @param {(\"number\"|\"float\"|\"int\"|\"string\")} [options.dateType=\"number\"] -\n   *   how should dates be encoded?  \"number\" means float or int, if no\n   *   fractional seconds.\n   * @param {any} [options.encodeUndefined=undefined] - How should an \n   *   \"undefined\" in the input be encoded.  By default, just encode a CBOR\n   *   undefined.  If this is a buffer, use those bytes without re-encoding\n   *   them.  If this is a function, the function will be called (which is\n   *   a good time to throw an exception, if that's what you want), and the\n   *   return value will be used according to these rules.  Anything\n   *   else will be encoded as CBOR.\n   * @param {boolean} [options.disallowUndefinedKeys=false] - Should \"undefined\"\n   *   be disallowed as a key in a Map that is serialized?  If this is true,\n   *   encode(new Map([[undefined, 1]])) will throw an exception.  Note that\n   *   it is impossible to get a key of undefined in a normal JS object.\n   * @param {boolean} [options.collapseBigIntegers=false] - Should integers\n   *   that come in as BigNumber integers and ECMAscript bigint's be encoded\n   *   as normal CBOR integers if they fit, discarding type information?\n   */\n  constructor(options) {\n    const opts = Object.assign({}, options, {\n      readableObjectMode: false,\n      writableObjectMode: true\n    });\n    super(opts);\n    this.canonical = opts.canonical;\n    this.encodeUndefined = opts.encodeUndefined;\n    this.disallowUndefinedKeys = !!opts.disallowUndefinedKeys;\n    this.dateType = opts.dateType != null ? opts.dateType.toLowerCase() : 'number';\n    this.collapseBigIntegers = !!opts.collapseBigIntegers;\n\n    // new Symbol for each instance.  Note: means we can't re-use the same\n    // encoder and encoded object\n    if (typeof opts.detectLoops === 'symbol') {\n      this.detectLoops = opts.detectLoops;\n    } else {\n      this.detectLoops = !!opts.detectLoops ? Symbol('CBOR_DETECT') : null;\n    }\n    this.semanticTypes = {\n      Array: this._pushArray,\n      Date: this._pushDate,\n      Buffer: this._pushBuffer,\n      Map: this._pushMap,\n      NoFilter: this._pushNoFilter,\n      RegExp: this._pushRegexp,\n      Set: this._pushSet,\n      BigNumber: this._pushBigNumber,\n      ArrayBuffer: this._pushUint8Array,\n      Uint8ClampedArray: this._pushUint8Array,\n      Uint8Array: this._pushUint8Array,\n      Uint16Array: this._pushArray,\n      Uint32Array: this._pushArray,\n      Int8Array: this._pushArray,\n      Int16Array: this._pushArray,\n      Int32Array: this._pushArray,\n      Float32Array: this._pushFloat32Array,\n      Float64Array: this._pushFloat64Array\n    };\n\n    // tsc doesn't know about old Url\n    if (url['Url']) {\n      this.addSemanticType('Url', this._pushUrl);\n    }\n    if (url['URL']) {\n      this.addSemanticType('URL', this._pushURL);\n    }\n    const addTypes = opts.genTypes || [];\n    for (let i = 0, len = addTypes.length; i < len; i += 2) {\n      this.addSemanticType(addTypes[i], addTypes[i + 1]);\n    }\n  }\n  _transform(fresh, encoding, cb) {\n    const ret = this.pushAny(fresh);\n    // Old transformers might not return bool.  undefined !== false\n    return cb(ret === false ? new Error('Push Error') : undefined);\n  }\n  _flush(cb) {\n    return cb();\n  }\n\n  /**\n   * @callback encodeFunction\n   * @param {Encoder} encoder - the encoder to serialize into.  Call \"write\"\n   *   on the encoder as needed.\n   * @return {bool} - true on success, else false\n   */\n\n  /**\n   * Add an encoding function to the list of supported semantic types.  This is\n   * useful for objects for which you can't add an encodeCBOR method\n   *\n   * @param {any} type\n   * @param {any} fun\n   * @returns {encodeFunction}\n   */\n  addSemanticType(type, fun) {\n    if (typeof fun !== 'function') {\n      throw new TypeError('fun must be of type function');\n    }\n    const typeName = typeof type === 'string' ? type : type.name;\n    const old = this.semanticTypes[typeName];\n    this.semanticTypes[typeName] = fun;\n    return old;\n  }\n  _pushUInt8(val) {\n    const b = Buffer.allocUnsafe(1);\n    b.writeUInt8(val, 0);\n    return this.push(b);\n  }\n  _pushUInt16BE(val) {\n    const b = Buffer.allocUnsafe(2);\n    b.writeUInt16BE(val, 0);\n    return this.push(b);\n  }\n  _pushUInt32BE(val) {\n    const b = Buffer.allocUnsafe(4);\n    b.writeUInt32BE(val, 0);\n    return this.push(b);\n  }\n  _pushFloatBE(val) {\n    const b = Buffer.allocUnsafe(4);\n    b.writeFloatBE(val, 0);\n    return this.push(b);\n  }\n  _pushDoubleBE(val) {\n    const b = Buffer.allocUnsafe(8);\n    b.writeDoubleBE(val, 0);\n    return this.push(b);\n  }\n  _pushNaN() {\n    return this.push(BUF_NAN);\n  }\n  _pushInfinity(obj) {\n    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n    return this.push(half);\n  }\n  _pushFloat(obj) {\n    if (this.canonical) {\n      // TODO: is this enough slower to hide behind canonical?\n      // It's certainly enough of a hack (see utils.parseHalf)\n\n      // From section 3.9:\n      // If a protocol allows for IEEE floats, then additional canonicalization\n      // rules might need to be added.  One example rule might be to have all\n      // floats start as a 64-bit float, then do a test conversion to a 32-bit\n      // float; if the result is the same numeric value, use the shorter value\n      // and repeat the process with a test conversion to a 16-bit float.  (This\n      // rule selects 16-bit float for positive and negative Infinity as well.)\n\n      // which seems pretty much backwards to me.\n      const b2 = Buffer.allocUnsafe(2);\n      if (utils.writeHalf(b2, obj)) {\n        // I have convinced myself that there are no cases where writeHalf\n        // will return true but `utils.parseHalf(b2) !== obj)`\n        return this._pushUInt8(HALF) && this.push(b2);\n      }\n    }\n    if (Math.fround(obj) === obj) {\n      return this._pushUInt8(FLOAT) && this._pushFloatBE(obj);\n    }\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n  }\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5;\n    switch (false) {\n      case !(obj < 24):\n        return this._pushUInt8(m | obj);\n      case !(obj <= 0xff):\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n      case !(obj <= 0xffff):\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n      case !(obj <= 0xffffffff):\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n      case !(obj <= Number.MAX_SAFE_INTEGER):\n        return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n      default:\n        if (mt === MT.NEG_INT) {\n          return this._pushFloat(orig);\n        } else {\n          return this._pushFloat(obj);\n        }\n    }\n  }\n  _pushIntNum(obj) {\n    if (Object.is(obj, -0)) {\n      return this.push(BUF_NEG_ZERO);\n    }\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n    } else {\n      return this._pushInt(obj, MT.POS_INT);\n    }\n  }\n  _pushNumber(obj) {\n    switch (false) {\n      case !isNaN(obj):\n        return this._pushNaN();\n      case isFinite(obj):\n        return this._pushInfinity(obj);\n      case Math.round(obj) !== obj:\n        return this._pushIntNum(obj);\n      default:\n        return this._pushFloat(obj);\n    }\n  }\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8');\n    return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8');\n  }\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE);\n  }\n  _pushUndefined(obj) {\n    switch (typeof this.encodeUndefined) {\n      case 'undefined':\n        return this._pushUInt8(UNDEFINED);\n      case 'function':\n        return this.pushAny(this.encodeUndefined.call(this, obj));\n      case 'object':\n        if (Buffer.isBuffer(this.encodeUndefined)) {\n          return this.push(this.encodeUndefined);\n        }\n    }\n    return this.pushAny(this.encodeUndefined);\n  }\n  _pushNull(obj) {\n    return this._pushUInt8(NULL);\n  }\n  _pushArray(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts);\n    const len = obj.length;\n    if (opts.indefinite) {\n      if (!gen._pushUInt8(MT.ARRAY << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false;\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG);\n  }\n  _pushDate(gen, obj) {\n    switch (gen.dateType) {\n      case 'string':\n        return gen._pushTag(TAG.DATE_STRING) && gen._pushString(obj.toISOString());\n      case 'int':\n      case 'integer':\n        return gen._pushTag(TAG.DATE_EPOCH) && gen._pushIntNum(Math.round(obj / 1000));\n      case 'float':\n        // force float\n        return gen._pushTag(TAG.DATE_EPOCH) && gen._pushFloat(obj / 1000);\n      case 'number':\n      default:\n        // if we happen to have an integral number of seconds,\n        // use integer.  Otherwise, use float.\n        return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(obj / 1000);\n    }\n  }\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n  }\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice());\n  }\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n  }\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false;\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n  }\n  _pushURL(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.toString());\n  }\n\n  /**\n   * @param {bignumber} obj\n   * @private\n   */\n  _pushBigint(obj) {\n    let m = MT.POS_INT;\n    let tag = TAG.POS_BIGINT;\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1);\n      m = MT.NEG_INT;\n      tag = TAG.NEG_BIGINT;\n    }\n    if (this.collapseBigIntegers && obj.lte(BN.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj.lte(BN.MAXINT32)) {\n        return this._pushInt(obj.toNumber(), m);\n      }\n      return this._pushUInt8(m << 5 | NUMBYTES.EIGHT) && this._pushUInt32BE(obj.dividedToIntegerBy(BN.SHIFT32).toNumber()) && this._pushUInt32BE(obj.mod(BN.SHIFT32).toNumber());\n    }\n    let str = obj.toString(16);\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n\n  /**\n   * @param {bigint} obj\n   * @private\n   */\n  _pushJSBigint(obj) {\n    let m = MT.POS_INT;\n    let tag = TAG.POS_BIGINT;\n    // BigInt doesn't have -0\n    if (obj < 0) {\n      obj = -obj + BI.MINUS_ONE;\n      m = MT.NEG_INT;\n      tag = TAG.NEG_BIGINT;\n    }\n    if (this.collapseBigIntegers && obj <= BI.MAXINT64) {\n      //  special handiling for 64bits\n      if (obj <= 0xffffffff) {\n        return this._pushInt(Number(obj), m);\n      }\n      return this._pushUInt8(m << 5 | NUMBYTES.EIGHT) && this._pushUInt32BE(Number(obj / BI.SHIFT32)) && this._pushUInt32BE(Number(obj % BI.SHIFT32));\n    }\n    let str = obj.toString(16);\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN();\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj);\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n      return false;\n    }\n    const dec = obj.decimalPlaces();\n    const slide = obj.shiftedBy(dec);\n    if (!gen._pushIntNum(-dec)) {\n      return false;\n    }\n    if (slide.abs().isLessThan(BN.MAXINT)) {\n      return gen._pushIntNum(slide.toNumber());\n    } else {\n      return gen._pushBigint(slide);\n    }\n  }\n  _pushMap(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts);\n    if (opts.indefinite) {\n      if (!gen._pushUInt8(MT.MAP << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false;\n    }\n    // memoizing the cbor only helps in certain cases, and hurts in most\n    // others.  Just avoid it.\n    if (gen.canonical) {\n      // keep the key/value pairs together, so we don't have to do odd\n      // gets with object keys later\n      const entries = [...obj.entries()];\n      const enc = new Encoder(this); // TODO: fix genTypes\n      const bs = new NoFilter({\n        highWaterMark: this.readableHighWaterMark\n      });\n      enc.pipe(bs);\n      entries.sort((_ref, _ref2) => {\n        let [a] = _ref;\n        let [b] = _ref2;\n        // a, b are the keys\n        enc.pushAny(a);\n        const a_cbor = bs.read();\n        enc.pushAny(b);\n        const b_cbor = bs.read();\n        return a_cbor.compare(b_cbor);\n      });\n      for (const [k, v] of entries) {\n        if (gen.disallowUndefinedKeys && typeof k === 'undefined') {\n          throw new Error('Invalid Map key: undefined');\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false;\n        }\n      }\n    } else {\n      for (const [k, v] of obj) {\n        if (gen.disallowUndefinedKeys && typeof k === 'undefined') {\n          throw new Error('Invalid Map key: undefined');\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false;\n        }\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushUint8Array(gen, obj) {\n    return gen._pushBuffer(gen, Buffer.from(obj));\n  }\n  _pushFloat32Array(gen, obj) {\n    const len = obj.length;\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(FLOAT) || !gen._pushFloatBE(obj[j])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushFloat64Array(gen, obj) {\n    const len = obj.length;\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(DOUBLE) || !gen._pushDoubleBE(obj[j])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   *\n   * @param {Object} obj - object to clean\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  removeLoopDetectors(obj) {\n    if (!this.detectLoops) {\n      return false;\n    }\n    return Encoder.removeLoopDetectors(obj, this.detectLoops);\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   * The static version is easier to call when you don't have a full\n   * encoder instance available; it uses a good heuristic to figure\n   * out the loop detector symbol.\n   *\n   * @param {Object} obj - object to clean\n   * @param {Symbol} [detector=null] - the symbol to clean, or null\n   *   to use the first detected symbol\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  static removeLoopDetectors(obj) {\n    let detector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (typeof obj !== 'object' || !obj) {\n      return false;\n    }\n    const dl = obj[LOOP_DETECT];\n    if (!dl) {\n      // ironically, use loop marking to detect loops on removal as well\n      return false;\n    }\n    if (detector == null) {\n      detector = dl;\n    } else {\n      if (detector !== dl) {\n        return false;\n      }\n    }\n    delete obj[LOOP_DETECT];\n    if (Array.isArray(obj)) {\n      for (const i of obj) {\n        this.removeLoopDetectors(i, detector);\n      }\n    } else {\n      for (const k in obj) {\n        this.removeLoopDetectors(obj[k], detector);\n      }\n    }\n    return true;\n  }\n  _pushObject(obj, opts) {\n    if (!obj) {\n      return this._pushNull(obj);\n    }\n    opts = Object.assign({\n      indefinite: false,\n      skipTypes: false\n    }, opts);\n    if (!opts.indefinite) {\n      // this will only happen the first time through for indefinite encoding\n      if (this.detectLoops) {\n        if (obj[LOOP_DETECT] === this.detectLoops) {\n          throw new Error('Loop detected while CBOR encoding');\n        } else {\n          obj[LOOP_DETECT] = this.detectLoops;\n        }\n      }\n    }\n    if (!opts.skipTypes) {\n      const f = obj.encodeCBOR;\n      if (typeof f === 'function') {\n        return f.call(obj, this);\n      }\n      const converter = this.semanticTypes[obj.constructor.name];\n      if (converter) {\n        return converter.call(obj, this, obj);\n      }\n    }\n    const keys = Object.keys(obj).filter(k => typeof obj[k] !== 'function');\n    const cbor_keys = {};\n    if (this.canonical) {\n      // note: this can't be a normal sort, because 'b' needs to sort before\n      // 'aa'\n      keys.sort((a, b) => {\n        // Always strings, so don't bother to pass options.\n        // hold on to the cbor versions, since there's no need\n        // to encode more than once\n        const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a));\n        const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b));\n        return a_cbor.compare(b_cbor);\n      });\n    }\n    if (opts.indefinite) {\n      if (!this._pushUInt8(MT.MAP << 5 | NUMBYTES.INDEFINITE)) {\n        return false;\n      }\n    } else if (!this._pushInt(keys.length, MT.MAP)) {\n      return false;\n    }\n    let ck;\n    for (let j = 0, len2 = keys.length; j < len2; j++) {\n      const k = keys[j];\n      if (this.canonical && (ck = cbor_keys[k])) {\n        if (!this.push(ck)) {\n          // already a Buffer\n          return false;\n        }\n      } else {\n        if (!this._pushString(k)) {\n          return false;\n        }\n      }\n      if (!this.pushAny(obj[k])) {\n        return false;\n      }\n    }\n    if (opts.indefinite) {\n      if (!this.push(BREAK)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny(obj) {\n    switch (typeof obj) {\n      case 'number':\n        return this._pushNumber(obj);\n      case 'bigint':\n        return this._pushJSBigint(obj);\n      case 'string':\n        return this._pushString(obj);\n      case 'boolean':\n        return this._pushBoolean(obj);\n      case 'undefined':\n        return this._pushUndefined(obj);\n      case 'object':\n        return this._pushObject(obj);\n      case 'symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushNull(null);\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0);\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString());\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (!!obj.toString ? obj.toString() : ''));\n    }\n  }\n\n  /* backwards-compat wrapper */\n  _pushAny(obj) {\n    // TODO: write deprecation warning\n    return this.pushAny(obj);\n  }\n  _encodeAll(objs) {\n    const bs = new NoFilter({\n      highWaterMark: this.readableHighWaterMark\n    });\n    this.pipe(bs);\n    for (const o of objs) {\n      this.pushAny(o);\n    }\n    this.end();\n    return bs.read();\n  }\n\n  /**\n   * Encode the given object with indefinite length.  There are apparently\n   * some (IMO) broken implementations of poorly-specified protocols that\n   * REQUIRE indefinite-encoding.  Add this to an object or class as the\n   * `encodeCBOR` function to get indefinite encoding:\n   * @example\n   * const o = {\n   *   a: true,\n   *   encodeCBOR: cbor.Encoder.encodeIndefinite\n   * }\n   * const m = []\n   * m.encodeCBOR = cbor.Encoder.encodeIndefinite\n   * cbor.encodeOne([o, m])\n   *\n   * @param {Encoder} - the encoder to use\n   * @param {String|Buffer|Array|Map|Object} [obj] - the object to encode.  If\n   *   null, use \"this\" instead.\n   * @param {Object} [opts=null] - Options for encoding\n   * @param {boolean} [opts.chunkSize=4096] - Number of characters or bytes\n   *  for each chunk, if obj is a string or Buffer\n   * @returns {boolean} - true on success\n   */\n  static encodeIndefinite(gen, obj, opts) {\n    if (obj == null) {\n      if (this == null) {\n        throw new Error('No object to encode');\n      }\n      obj = this;\n    }\n    opts = Object.assign({\n      chunkSize: 4096\n    }, opts);\n    let ret = true;\n    const objType = typeof obj;\n    if (objType === 'string') {\n      // TODO: make sure not to split surrogate pairs at the edges of chunks,\n      // since such half-surrogates cannot be legally encoded as UTF-8.\n      ret = ret && gen._pushUInt8(MT.UTF8_STRING << 5 | NUMBYTES.INDEFINITE);\n      let offset = 0;\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize;\n        ret = ret && gen._pushString(obj.slice(offset, endIndex));\n        offset = endIndex;\n      }\n      ret = ret && gen.push(BREAK);\n    } else if (Buffer.isBuffer(obj)) {\n      ret = ret && gen._pushUInt8(MT.BYTE_STRING << 5 | NUMBYTES.INDEFINITE);\n      let offset = 0;\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize;\n        ret = ret && gen._pushBuffer(gen, obj.slice(offset, endIndex));\n        offset = endIndex;\n      }\n      ret = ret && gen.push(BREAK);\n    } else if (Array.isArray(obj)) {\n      ret = ret && gen._pushArray(gen, obj, {\n        indefinite: true\n      });\n    } else if (obj instanceof Map) {\n      ret = ret && gen._pushMap(gen, obj, {\n        indefinite: true\n      });\n    } else {\n      if (objType !== 'object') {\n        throw new Error('Invalid indefinite encoding');\n      }\n      ret = ret && gen._pushObject(obj, {\n        indefinite: true,\n        skipTypes: true\n      });\n    }\n    return ret;\n  }\n\n  /**\n   * Encode one or more JavaScript objects, and return a Buffer containing the\n   * CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encode() {\n    for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n      objs[_key] = arguments[_key];\n    }\n    return new Encoder()._encodeAll(objs);\n  }\n\n  /**\n   * Encode one or more JavaScript objects canonically (slower!), and return\n   * a Buffer containing the CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeCanonical() {\n    for (var _len2 = arguments.length, objs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      objs[_key2] = arguments[_key2];\n    }\n    return new Encoder({\n      canonical: true\n    })._encodeAll(objs);\n  }\n\n  /**\n   * Encode one JavaScript object using the given options.\n   *\n   * @static\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeOne(obj, options) {\n    return new Encoder(options)._encodeAll([obj]);\n  }\n\n  /**\n   * Encode one JavaScript object using the given options in a way that\n   * is more resilient to objects being larger than the highWaterMark\n   * number of bytes.  As with the other static encode functions, this \n   * will still use a large amount of memory.  Use a stream-based approach\n   * directly if you need to process large and complicated inputs.\n   *\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   */\n  static encodeAsync(obj, options) {\n    return new Promise((resolve, reject) => {\n      const bufs = [];\n      const enc = new Encoder(options);\n      enc.on('data', buf => bufs.push(buf));\n      enc.on('error', reject);\n      enc.on('finish', () => resolve(Buffer.concat(bufs)));\n      enc.pushAny(obj);\n      enc.end();\n    });\n  }\n}\nmodule.exports = Encoder;","map":{"version":3,"names":["stream","require","url","bignumber","BigNumber","NoFilter","Tagged","Simple","utils","constants","MT","NUMBYTES","SHIFT32","SYMS","TAG","HALF","SIMPLE_FLOAT","TWO","FLOAT","FOUR","DOUBLE","EIGHT","TRUE","SIMPLE","FALSE","UNDEFINED","NULL","BREAK","Buffer","from","BI","bigIntize","BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","BUF_NEG_ZERO","LOOP_DETECT","Symbol","Encoder","Transform","constructor","options","opts","Object","assign","readableObjectMode","writableObjectMode","canonical","encodeUndefined","disallowUndefinedKeys","dateType","toLowerCase","collapseBigIntegers","detectLoops","semanticTypes","Array","_pushArray","Date","_pushDate","_pushBuffer","Map","_pushMap","_pushNoFilter","RegExp","_pushRegexp","Set","_pushSet","_pushBigNumber","ArrayBuffer","_pushUint8Array","Uint8ClampedArray","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","_pushFloat32Array","Float64Array","_pushFloat64Array","addSemanticType","_pushUrl","_pushURL","addTypes","genTypes","i","len","length","_transform","fresh","encoding","cb","ret","pushAny","Error","undefined","_flush","type","fun","TypeError","typeName","name","old","_pushUInt8","val","b","allocUnsafe","writeUInt8","push","_pushUInt16BE","writeUInt16BE","_pushUInt32BE","writeUInt32BE","_pushFloatBE","writeFloatBE","_pushDoubleBE","writeDoubleBE","_pushNaN","_pushInfinity","obj","half","_pushFloat","b2","writeHalf","Math","fround","_pushInt","mt","orig","m","ONE","Number","MAX_SAFE_INTEGER","floor","NEG_INT","_pushIntNum","is","POS_INT","_pushNumber","isNaN","isFinite","round","_pushString","byteLength","UTF8_STRING","_pushBoolean","_pushUndefined","call","isBuffer","_pushNull","gen","indefinite","ARRAY","INDEFINITE","j","_pushTag","tag","DATE_STRING","toISOString","DATE_EPOCH","BYTE_STRING","slice","REGEXP","source","size","x","URI","format","toString","_pushBigint","POS_BIGINT","isNegative","negated","minus","NEG_BIGINT","lte","MAXINT64","MAXINT32","toNumber","dividedToIntegerBy","mod","str","buf","_pushJSBigint","MINUS_ONE","Infinity","isInteger","DECIMAL_FRAC","dec","decimalPlaces","slide","shiftedBy","abs","isLessThan","MAXINT","MAP","entries","enc","bs","highWaterMark","readableHighWaterMark","pipe","sort","a","a_cbor","read","b_cbor","compare","k","v","removeLoopDetectors","detector","dl","isArray","_pushObject","skipTypes","f","encodeCBOR","converter","keys","filter","cbor_keys","encode","ck","len2","_pushAny","_encodeAll","objs","o","end","encodeIndefinite","chunkSize","objType","offset","endIndex","encodeCanonical","encodeOne","encodeAsync","Promise","resolve","reject","bufs","on","concat","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/cbor/lib/encoder.js"],"sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst url = require('url')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\nconst Tagged = require('./tagged')\nconst Simple = require('./simple')\nconst utils = require('./utils')\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\nconst BREAK = Buffer.from([0xff])\n\nconst BI = utils.bigIntize(constants.BI)\nconst BN = constants.BN\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\nconst BUF_NEG_ZERO = Buffer.from('f98000', 'hex')\nconst LOOP_DETECT = Symbol('CBOR_LOOP_DETECT')\n\n/**\n * Transform JavaScript values into CBOR bytes.  The `Writable` side of\n * the stream is in object mode.\n *\n * @extends {stream.Transform}\n */\nclass Encoder extends stream.Transform {\n\n  /**\n   * Creates an instance of Encoder.\n   *\n   * @param {Object} [options={}] - options for the encoder\n   * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,\n   *   `function(Encoder)` for semantic types to be encoded.  Not needed\n   *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.\n   * @param {boolean} [options.canonical=false] - should the output be\n   *   canonicalized\n   * @param {boolean|Symbol} [options.detectLoops=false] - should object loops\n   *   be detected?  This will currently modify the encoded object graph\n   *   by adding a Symbol property to each object.  If this bothers you,\n   *   call `removeLoopDetectors` on the encoded object when done.  Do not\n   *   encode the same object twice on the same encoder, without calling\n   *   `removeLoopDetectors` in between.\n   * @param {(\"number\"|\"float\"|\"int\"|\"string\")} [options.dateType=\"number\"] -\n   *   how should dates be encoded?  \"number\" means float or int, if no\n   *   fractional seconds.\n   * @param {any} [options.encodeUndefined=undefined] - How should an \n   *   \"undefined\" in the input be encoded.  By default, just encode a CBOR\n   *   undefined.  If this is a buffer, use those bytes without re-encoding\n   *   them.  If this is a function, the function will be called (which is\n   *   a good time to throw an exception, if that's what you want), and the\n   *   return value will be used according to these rules.  Anything\n   *   else will be encoded as CBOR.\n   * @param {boolean} [options.disallowUndefinedKeys=false] - Should \"undefined\"\n   *   be disallowed as a key in a Map that is serialized?  If this is true,\n   *   encode(new Map([[undefined, 1]])) will throw an exception.  Note that\n   *   it is impossible to get a key of undefined in a normal JS object.\n   * @param {boolean} [options.collapseBigIntegers=false] - Should integers\n   *   that come in as BigNumber integers and ECMAscript bigint's be encoded\n   *   as normal CBOR integers if they fit, discarding type information?\n   */\n  constructor(options) {\n    const opts = Object.assign({}, options, {\n      readableObjectMode: false,\n      writableObjectMode: true\n    })\n    super(opts)\n\n    this.canonical = opts.canonical\n    this.encodeUndefined = opts.encodeUndefined\n    this.disallowUndefinedKeys = !!opts.disallowUndefinedKeys\n    this.dateType = (opts.dateType != null) ?\n      opts.dateType.toLowerCase() : 'number'\n    this.collapseBigIntegers = !!opts.collapseBigIntegers\n\n    // new Symbol for each instance.  Note: means we can't re-use the same\n    // encoder and encoded object\n    if (typeof(opts.detectLoops) === 'symbol') {\n      this.detectLoops = opts.detectLoops\n    } else {\n      this.detectLoops = !!opts.detectLoops ? Symbol('CBOR_DETECT') : null\n    }\n\n    this.semanticTypes = {\n      Array: this._pushArray,\n      Date: this._pushDate,\n      Buffer: this._pushBuffer,\n      Map: this._pushMap,\n      NoFilter: this._pushNoFilter,\n      RegExp: this._pushRegexp,\n      Set: this._pushSet,\n      BigNumber: this._pushBigNumber,\n      ArrayBuffer: this._pushUint8Array,\n      Uint8ClampedArray: this._pushUint8Array,\n      Uint8Array: this._pushUint8Array,\n      Uint16Array: this._pushArray,\n      Uint32Array: this._pushArray,\n      Int8Array: this._pushArray,\n      Int16Array: this._pushArray,\n      Int32Array: this._pushArray,\n      Float32Array: this._pushFloat32Array,\n      Float64Array: this._pushFloat64Array\n    }\n\n    // tsc doesn't know about old Url\n    if (url['Url']) {\n      this.addSemanticType('Url', this._pushUrl)\n    }\n    if (url['URL']) {\n      this.addSemanticType('URL', this._pushURL)\n    }\n\n    const addTypes = opts.genTypes || []\n    for (let i = 0, len = addTypes.length; i < len; i += 2) {\n      this.addSemanticType(addTypes[i], addTypes[i + 1])\n    }\n  }\n\n  _transform(fresh, encoding, cb) {\n    const ret = this.pushAny(fresh)\n    // Old transformers might not return bool.  undefined !== false\n    return cb((ret === false) ? new Error('Push Error') : undefined)\n  }\n\n  _flush(cb) {\n    return cb()\n  }\n\n  /**\n   * @callback encodeFunction\n   * @param {Encoder} encoder - the encoder to serialize into.  Call \"write\"\n   *   on the encoder as needed.\n   * @return {bool} - true on success, else false\n   */\n\n  /**\n   * Add an encoding function to the list of supported semantic types.  This is\n   * useful for objects for which you can't add an encodeCBOR method\n   *\n   * @param {any} type\n   * @param {any} fun\n   * @returns {encodeFunction}\n   */\n  addSemanticType(type, fun) {\n    if (typeof fun !== 'function') {\n      throw new TypeError('fun must be of type function')\n    }\n    const typeName = (typeof type === 'string') ? type : type.name\n    const old = this.semanticTypes[typeName]\n    this.semanticTypes[typeName] = fun\n    return old\n  }\n\n  _pushUInt8(val) {\n    const b = Buffer.allocUnsafe(1)\n    b.writeUInt8(val, 0)\n    return this.push(b)\n  }\n\n  _pushUInt16BE(val) {\n    const b = Buffer.allocUnsafe(2)\n    b.writeUInt16BE(val, 0)\n    return this.push(b)\n  }\n\n  _pushUInt32BE(val) {\n    const b = Buffer.allocUnsafe(4)\n    b.writeUInt32BE(val, 0)\n    return this.push(b)\n  }\n\n  _pushFloatBE(val) {\n    const b = Buffer.allocUnsafe(4)\n    b.writeFloatBE(val, 0)\n    return this.push(b)\n  }\n\n  _pushDoubleBE(val) {\n    const b = Buffer.allocUnsafe(8)\n    b.writeDoubleBE(val, 0)\n    return this.push(b)\n  }\n\n  _pushNaN() {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity(obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat(obj) {\n    if (this.canonical) {\n      // TODO: is this enough slower to hide behind canonical?\n      // It's certainly enough of a hack (see utils.parseHalf)\n\n      // From section 3.9:\n      // If a protocol allows for IEEE floats, then additional canonicalization\n      // rules might need to be added.  One example rule might be to have all\n      // floats start as a 64-bit float, then do a test conversion to a 32-bit\n      // float; if the result is the same numeric value, use the shorter value\n      // and repeat the process with a test conversion to a 16-bit float.  (This\n      // rule selects 16-bit float for positive and negative Infinity as well.)\n\n      // which seems pretty much backwards to me.\n      const b2 = Buffer.allocUnsafe(2)\n      if (utils.writeHalf(b2, obj)) {\n        // I have convinced myself that there are no cases where writeHalf\n        // will return true but `utils.parseHalf(b2) !== obj)`\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n    if (Math.fround(obj) === obj) {\n      return this._pushUInt8(FLOAT) && this._pushFloatBE(obj)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5\n    switch (false) {\n      case !(obj < 24):\n        return this._pushUInt8(m | obj)\n      case !(obj <= 0xff):\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n      case !(obj <= 0xffff):\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n      case !(obj <= 0xffffffff):\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n      case !(obj <= Number.MAX_SAFE_INTEGER):\n        return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n          this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n          this._pushUInt32BE(obj % SHIFT32)\n      default:\n        if (mt === MT.NEG_INT) {\n          return this._pushFloat(orig)\n        } else {\n          return this._pushFloat(obj)\n        }\n    }\n  }\n\n  _pushIntNum(obj) {\n    if (Object.is(obj, -0)) {\n      return this.push(BUF_NEG_ZERO)\n    }\n\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber(obj) {\n    switch (false) {\n      case !isNaN(obj):\n        return this._pushNaN()\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case Math.round(obj) !== obj:\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8')\n  }\n\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined(obj) {\n    switch (typeof this.encodeUndefined) {\n      case 'undefined':\n        return this._pushUInt8(UNDEFINED)\n      case 'function':\n        return this.pushAny(this.encodeUndefined.call(this, obj))\n      case 'object':\n        if (Buffer.isBuffer(this.encodeUndefined)) {\n          return this.push(this.encodeUndefined)\n        }\n    }\n    return this.pushAny(this.encodeUndefined)\n  }\n\n  _pushNull(obj) {\n    return this._pushUInt8(NULL)\n  }\n\n  _pushArray(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts)\n    const len = obj.length\n    if (opts.indefinite) {\n      if (!gen._pushUInt8((MT.ARRAY << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate(gen, obj) {\n    switch (gen.dateType) {\n      case 'string':\n        return gen._pushTag(TAG.DATE_STRING) &&\n          gen._pushString(obj.toISOString())\n      case 'int':\n      case 'integer':\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen._pushIntNum(Math.round(obj / 1000))\n      case 'float':\n        // force float\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen._pushFloat(obj / 1000)\n      case 'number':\n      default:\n        // if we happen to have an integral number of seconds,\n        // use integer.  Otherwise, use float.\n        return gen._pushTag(TAG.DATE_EPOCH) &&\n          gen.pushAny(obj / 1000)\n    }\n  }\n\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushURL(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.toString())\n  }\n\n  /**\n   * @param {bignumber} obj\n   * @private\n   */\n  _pushBigint(obj) {\n    let m = MT.POS_INT\n    let tag = TAG.POS_BIGINT\n\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      m = MT.NEG_INT\n      tag = TAG.NEG_BIGINT\n    }\n\n    if (this.collapseBigIntegers &&\n        obj.lte(BN.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj.lte(BN.MAXINT32)) {\n        return this._pushInt(obj.toNumber(), m)\n      }\n      return this._pushUInt8((m << 5) | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(obj.dividedToIntegerBy(BN.SHIFT32).toNumber()) &&\n        this._pushUInt32BE(obj.mod(BN.SHIFT32).toNumber())\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  /**\n   * @param {bigint} obj\n   * @private\n   */\n  _pushJSBigint(obj) {\n    let m = MT.POS_INT\n    let tag = TAG.POS_BIGINT\n    // BigInt doesn't have -0\n    if (obj < 0) {\n      obj = -obj + BI.MINUS_ONE\n      m = MT.NEG_INT\n      tag = TAG.NEG_BIGINT\n    }\n\n    if (this.collapseBigIntegers &&\n        (obj <= BI.MAXINT64)) {\n      //  special handiling for 64bits\n      if (obj <= 0xffffffff) {\n        return this._pushInt(Number(obj), m)\n      }\n      return this._pushUInt8((m << 5) | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Number(obj / BI.SHIFT32)) &&\n        this._pushUInt32BE(Number(obj % BI.SHIFT32))\n    }\n\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.shiftedBy(dec)\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(BN.MAXINT)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap(gen, obj, opts) {\n    opts = Object.assign({\n      indefinite: false\n    }, opts)\n    if (opts.indefinite) {\n      if (!gen._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n    // memoizing the cbor only helps in certain cases, and hurts in most\n    // others.  Just avoid it.\n    if (gen.canonical) {\n      // keep the key/value pairs together, so we don't have to do odd\n      // gets with object keys later\n      const entries = [...obj.entries()]\n      const enc = new Encoder(this) // TODO: fix genTypes\n      const bs = new NoFilter({highWaterMark:this.readableHighWaterMark})\n      enc.pipe(bs)\n      entries.sort(([a], [b]) => {\n        // a, b are the keys\n        enc.pushAny(a)\n        const a_cbor = bs.read()\n        enc.pushAny(b)\n        const b_cbor = bs.read()\n        return a_cbor.compare(b_cbor)\n      })\n      for (const [k, v] of entries) {\n        if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {\n          throw new Error('Invalid Map key: undefined')\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false\n        }\n      }\n    } else {\n      for (const [k, v] of obj) {\n        if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {\n          throw new Error('Invalid Map key: undefined')\n        }\n        if (!(gen.pushAny(k) && gen.pushAny(v))) {\n          return false\n        }\n      }\n    }\n    if (opts.indefinite) {\n      if (!gen.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUint8Array(gen, obj) {\n    return gen._pushBuffer(gen, Buffer.from(obj))\n  }\n\n  _pushFloat32Array(gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(FLOAT) || !gen._pushFloatBE(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushFloat64Array(gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen._pushUInt8(DOUBLE) || !gen._pushDoubleBE(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   *\n   * @param {Object} obj - object to clean\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  removeLoopDetectors(obj) {\n    if (!this.detectLoops) {\n      return false\n    }\n    return Encoder.removeLoopDetectors(obj, this.detectLoops)\n  }\n\n  /**\n   * Remove all of the loop detector additions to the given object.\n   * The static version is easier to call when you don't have a full\n   * encoder instance available; it uses a good heuristic to figure\n   * out the loop detector symbol.\n   *\n   * @param {Object} obj - object to clean\n   * @param {Symbol} [detector=null] - the symbol to clean, or null\n   *   to use the first detected symbol\n   * @returns {bool} - true when the object was cleaned, else false\n   */\n  static removeLoopDetectors(obj, detector=null) {\n    if ((typeof(obj) !== 'object') || !obj) {\n      return false\n    }\n    const dl = obj[LOOP_DETECT]\n    if (!dl) {\n      // ironically, use loop marking to detect loops on removal as well\n      return false\n    }\n    if (detector == null) {\n      detector = dl\n    } else {\n      if (detector !== dl) {\n        return false\n      }\n    }\n    delete obj[LOOP_DETECT]\n    if (Array.isArray(obj)) {\n      for (const i of obj) {\n        this.removeLoopDetectors(i, detector)\n      }\n    } else {\n      for (const k in obj) {\n        this.removeLoopDetectors(obj[k], detector)\n      }\n    }\n    return true\n  }\n\n  _pushObject(obj, opts) {\n    if (!obj) {\n      return this._pushNull(obj)\n    }\n    opts = Object.assign({\n      indefinite: false,\n      skipTypes: false\n    }, opts)\n    if (!opts.indefinite) {\n      // this will only happen the first time through for indefinite encoding\n      if (this.detectLoops) {\n        if (obj[LOOP_DETECT] === this.detectLoops) {\n          throw new Error('Loop detected while CBOR encoding')\n        } else {\n          obj[LOOP_DETECT] = this.detectLoops\n        }\n      }\n    }\n    if (!opts.skipTypes) {\n      const f = obj.encodeCBOR\n      if (typeof f === 'function') {\n        return f.call(obj, this)\n      }\n      const converter = this.semanticTypes[obj.constructor.name]\n      if (converter) {\n        return converter.call(obj, this, obj)\n      }\n    }\n    const keys = Object.keys(obj).filter(k => typeof obj[k] !== 'function')\n    const cbor_keys = {}\n    if (this.canonical) {\n      // note: this can't be a normal sort, because 'b' needs to sort before\n      // 'aa'\n      keys.sort((a, b) => {\n        // Always strings, so don't bother to pass options.\n        // hold on to the cbor versions, since there's no need\n        // to encode more than once\n        const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a))\n        const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b))\n\n        return a_cbor.compare(b_cbor)\n      })\n    }\n    if (opts.indefinite) {\n      if (!this._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {\n        return false\n      }\n    } else if (!this._pushInt(keys.length, MT.MAP)) {\n      return false\n    }\n    let ck\n    for (let j = 0, len2 = keys.length; j < len2; j++) {\n      const k = keys[j]\n      if (this.canonical && ((ck = cbor_keys[k]))) {\n        if (!this.push(ck)) { // already a Buffer\n          return false\n        }\n      } else {\n        if (!this._pushString(k)) {\n          return false\n        }\n      }\n      if (!this.pushAny(obj[k])) {\n        return false\n      }\n    }\n    if (opts.indefinite) {\n      if (!this.push(BREAK)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny(obj) {\n    switch (typeof obj) {\n      case 'number':\n        return this._pushNumber(obj)\n      case 'bigint':\n        return this._pushJSBigint(obj)\n      case 'string':\n        return this._pushString(obj)\n      case 'boolean':\n        return this._pushBoolean(obj)\n      case 'undefined':\n        return this._pushUndefined(obj)\n      case 'object':\n        return this._pushObject(obj)\n      case 'symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushNull(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error(\n          'Unknown type: ' + typeof obj + ', ' +\n          (!!obj.toString ? obj.toString() : ''))\n    }\n  }\n\n  /* backwards-compat wrapper */\n  _pushAny(obj) {\n    // TODO: write deprecation warning\n    return this.pushAny(obj)\n  }\n\n  _encodeAll(objs) {\n    const bs = new NoFilter({ highWaterMark:this.readableHighWaterMark })\n    this.pipe(bs)\n    for (const o of objs) {\n      this.pushAny(o)\n    }\n    this.end()\n    return bs.read()\n  }\n\n  /**\n   * Encode the given object with indefinite length.  There are apparently\n   * some (IMO) broken implementations of poorly-specified protocols that\n   * REQUIRE indefinite-encoding.  Add this to an object or class as the\n   * `encodeCBOR` function to get indefinite encoding:\n   * @example\n   * const o = {\n   *   a: true,\n   *   encodeCBOR: cbor.Encoder.encodeIndefinite\n   * }\n   * const m = []\n   * m.encodeCBOR = cbor.Encoder.encodeIndefinite\n   * cbor.encodeOne([o, m])\n   *\n   * @param {Encoder} - the encoder to use\n   * @param {String|Buffer|Array|Map|Object} [obj] - the object to encode.  If\n   *   null, use \"this\" instead.\n   * @param {Object} [opts=null] - Options for encoding\n   * @param {boolean} [opts.chunkSize=4096] - Number of characters or bytes\n   *  for each chunk, if obj is a string or Buffer\n   * @returns {boolean} - true on success\n   */\n  static encodeIndefinite(gen, obj, opts) {\n    if (obj == null) {\n      if (this == null) {\n        throw new Error('No object to encode')\n      }\n      obj = this\n    }\n    opts = Object.assign({\n      chunkSize: 4096\n    }, opts)\n\n    let ret = true\n    const objType = typeof obj\n    if (objType === 'string') {\n      // TODO: make sure not to split surrogate pairs at the edges of chunks,\n      // since such half-surrogates cannot be legally encoded as UTF-8.\n      ret = ret && gen._pushUInt8((MT.UTF8_STRING << 5) | NUMBYTES.INDEFINITE)\n      let offset = 0\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize\n        ret = ret && gen._pushString(obj.slice(offset, endIndex))\n        offset = endIndex\n      }\n      ret = ret && gen.push(BREAK)\n    } else if (Buffer.isBuffer(obj)) {\n      ret = ret && gen._pushUInt8((MT.BYTE_STRING << 5) | NUMBYTES.INDEFINITE)\n      let offset = 0\n      while (offset < obj.length) {\n        const endIndex = offset + opts.chunkSize\n        ret = ret && gen._pushBuffer(gen, obj.slice(offset, endIndex))\n        offset = endIndex\n      }\n      ret = ret && gen.push(BREAK)\n    } else if (Array.isArray(obj)) {\n      ret = ret && gen._pushArray(gen, obj, {\n        indefinite: true\n      })\n    } else if (obj instanceof Map) {\n      ret = ret && gen._pushMap(gen, obj, {\n        indefinite: true\n      })\n    } else {\n      if (objType !== 'object') {\n        throw new Error('Invalid indefinite encoding')\n      }\n      ret = ret && gen._pushObject(obj, {\n        indefinite: true,\n        skipTypes: true\n      })\n    }\n    return ret\n  }\n\n  /**\n   * Encode one or more JavaScript objects, and return a Buffer containing the\n   * CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encode(...objs) {\n    return new Encoder()._encodeAll(objs)\n  }\n\n  /**\n   * Encode one or more JavaScript objects canonically (slower!), and return\n   * a Buffer containing the CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeCanonical(...objs) {\n    return new Encoder({canonical: true})._encodeAll(objs)\n  }\n\n  /**\n   * Encode one JavaScript object using the given options.\n   *\n   * @static\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   * @returns {Buffer} - the encoded objects\n   */\n  static encodeOne(obj, options) {\n    return new Encoder(options)._encodeAll([obj])\n  }\n\n  /**\n   * Encode one JavaScript object using the given options in a way that\n   * is more resilient to objects being larger than the highWaterMark\n   * number of bytes.  As with the other static encode functions, this \n   * will still use a large amount of memory.  Use a stream-based approach\n   * directly if you need to process large and complicated inputs.\n   *\n   * @param {any} obj - the object to encode\n   * @param {Object?} options - passed to the Encoder constructor\n   */\n  static encodeAsync(obj, options) {\n    return new Promise((resolve, reject) => {\n      const bufs = []\n      const enc = new Encoder(options)\n      enc.on('data', buf => bufs.push(buf))\n      enc.on('error', reject)\n      enc.on('finish', () => resolve(Buffer.concat(bufs)))\n      enc.pushAny(obj)\n      enc.end()\n    })\n  }\n}\n\nmodule.exports = Encoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
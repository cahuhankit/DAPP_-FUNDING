{"ast":null,"code":"import { stream } from '../../../stream/Stream.js';\nimport { Value } from '../../../check/arbitrary/definition/Value.js';\nfunction halveBigInt(n) {\n  return n / BigInt(2);\n}\nexport function shrinkBigInt(current, target, tryTargetAsap) {\n  const realGap = current - target;\n  function* shrinkDecr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n    for (let toremove = gap; toremove > 0; toremove = halveBigInt(toremove)) {\n      const next = current - toremove;\n      yield new Value(next, previous);\n      previous = next;\n    }\n  }\n  function* shrinkIncr() {\n    let previous = tryTargetAsap ? undefined : target;\n    const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n    for (let toremove = gap; toremove < 0; toremove = halveBigInt(toremove)) {\n      const next = current - toremove;\n      yield new Value(next, previous);\n      previous = next;\n    }\n  }\n  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}","map":{"version":3,"names":["stream","Value","halveBigInt","n","BigInt","shrinkBigInt","current","target","tryTargetAsap","realGap","shrinkDecr","previous","undefined","gap","toremove","next","shrinkIncr"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkBigInt.js"],"sourcesContent":["import { stream } from '../../../stream/Stream.js';\nimport { Value } from '../../../check/arbitrary/definition/Value.js';\nfunction halveBigInt(n) {\n    return n / BigInt(2);\n}\nexport function shrinkBigInt(current, target, tryTargetAsap) {\n    const realGap = current - target;\n    function* shrinkDecr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove > 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new Value(next, previous);\n            previous = next;\n        }\n    }\n    function* shrinkIncr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove < 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new Value(next, previous);\n            previous = next;\n        }\n    }\n    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,2BAA2B;AAClD,SAASC,KAAK,QAAQ,8CAA8C;AACpE,SAASC,WAAW,CAACC,CAAC,EAAE;EACpB,OAAOA,CAAC,GAAGC,MAAM,CAAC,CAAC,CAAC;AACxB;AACA,OAAO,SAASC,YAAY,CAACC,OAAO,EAAEC,MAAM,EAAEC,aAAa,EAAE;EACzD,MAAMC,OAAO,GAAGH,OAAO,GAAGC,MAAM;EAChC,UAAUG,UAAU,GAAG;IACnB,IAAIC,QAAQ,GAAGH,aAAa,GAAGI,SAAS,GAAGL,MAAM;IACjD,MAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAO,GAAGP,WAAW,CAACO,OAAO,CAAC;IAC1D,KAAK,IAAIK,QAAQ,GAAGD,GAAG,EAAEC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGZ,WAAW,CAACY,QAAQ,CAAC,EAAE;MACrE,MAAMC,IAAI,GAAGT,OAAO,GAAGQ,QAAQ;MAC/B,MAAM,IAAIb,KAAK,CAACc,IAAI,EAAEJ,QAAQ,CAAC;MAC/BA,QAAQ,GAAGI,IAAI;IACnB;EACJ;EACA,UAAUC,UAAU,GAAG;IACnB,IAAIL,QAAQ,GAAGH,aAAa,GAAGI,SAAS,GAAGL,MAAM;IACjD,MAAMM,GAAG,GAAGL,aAAa,GAAGC,OAAO,GAAGP,WAAW,CAACO,OAAO,CAAC;IAC1D,KAAK,IAAIK,QAAQ,GAAGD,GAAG,EAAEC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGZ,WAAW,CAACY,QAAQ,CAAC,EAAE;MACrE,MAAMC,IAAI,GAAGT,OAAO,GAAGQ,QAAQ;MAC/B,MAAM,IAAIb,KAAK,CAACc,IAAI,EAAEJ,QAAQ,CAAC;MAC/BA,QAAQ,GAAGI,IAAI;IACnB;EACJ;EACA,OAAON,OAAO,GAAG,CAAC,GAAGT,MAAM,CAACU,UAAU,EAAE,CAAC,GAAGV,MAAM,CAACgB,UAAU,EAAE,CAAC;AACpE"},"metadata":{},"sourceType":"module"}
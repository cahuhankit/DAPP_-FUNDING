{"ast":null,"code":"var SBigInt = typeof BigInt !== 'undefined' ? BigInt : undefined;\nexport function unsafeUniformBigIntDistribution(from, to, rng) {\n  var diff = to - from + SBigInt(1);\n  var MinRng = SBigInt(rng.min());\n  var NumValues = SBigInt(rng.max() - rng.min() + 1);\n  var FinalNumValues = NumValues;\n  var NumIterations = SBigInt(1);\n  while (FinalNumValues < diff) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n  var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;\n  while (true) {\n    var value = SBigInt(0);\n    for (var num = SBigInt(0); num !== NumIterations; ++num) {\n      var out = rng.unsafeNext();\n      value = NumValues * value + (SBigInt(out) - MinRng);\n    }\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value % diff;\n      return inDiff + from;\n    }\n  }\n}","map":{"version":3,"names":["SBigInt","BigInt","undefined","unsafeUniformBigIntDistribution","from","to","rng","diff","MinRng","min","NumValues","max","FinalNumValues","NumIterations","MaxAcceptedRandom","value","num","out","unsafeNext","inDiff"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js"],"sourcesContent":["var SBigInt = typeof BigInt !== 'undefined' ? BigInt : undefined;\nexport function unsafeUniformBigIntDistribution(from, to, rng) {\n    var diff = to - from + SBigInt(1);\n    var MinRng = SBigInt(rng.min());\n    var NumValues = SBigInt(rng.max() - rng.min() + 1);\n    var FinalNumValues = NumValues;\n    var NumIterations = SBigInt(1);\n    while (FinalNumValues < diff) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = FinalNumValues - (FinalNumValues % diff);\n    while (true) {\n        var value = SBigInt(0);\n        for (var num = SBigInt(0); num !== NumIterations; ++num) {\n            var out = rng.unsafeNext();\n            value = NumValues * value + (SBigInt(out) - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value % diff;\n            return inDiff + from;\n        }\n    }\n}\n"],"mappings":"AAAA,IAAIA,OAAO,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAGC,SAAS;AAChE,OAAO,SAASC,+BAA+B,CAACC,IAAI,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC3D,IAAIC,IAAI,GAAGF,EAAE,GAAGD,IAAI,GAAGJ,OAAO,CAAC,CAAC,CAAC;EACjC,IAAIQ,MAAM,GAAGR,OAAO,CAACM,GAAG,CAACG,GAAG,EAAE,CAAC;EAC/B,IAAIC,SAAS,GAAGV,OAAO,CAACM,GAAG,CAACK,GAAG,EAAE,GAAGL,GAAG,CAACG,GAAG,EAAE,GAAG,CAAC,CAAC;EAClD,IAAIG,cAAc,GAAGF,SAAS;EAC9B,IAAIG,aAAa,GAAGb,OAAO,CAAC,CAAC,CAAC;EAC9B,OAAOY,cAAc,GAAGL,IAAI,EAAE;IAC1BK,cAAc,IAAIF,SAAS;IAC3B,EAAEG,aAAa;EACnB;EACA,IAAIC,iBAAiB,GAAGF,cAAc,GAAIA,cAAc,GAAGL,IAAK;EAChE,OAAO,IAAI,EAAE;IACT,IAAIQ,KAAK,GAAGf,OAAO,CAAC,CAAC,CAAC;IACtB,KAAK,IAAIgB,GAAG,GAAGhB,OAAO,CAAC,CAAC,CAAC,EAAEgB,GAAG,KAAKH,aAAa,EAAE,EAAEG,GAAG,EAAE;MACrD,IAAIC,GAAG,GAAGX,GAAG,CAACY,UAAU,EAAE;MAC1BH,KAAK,GAAGL,SAAS,GAAGK,KAAK,IAAIf,OAAO,CAACiB,GAAG,CAAC,GAAGT,MAAM,CAAC;IACvD;IACA,IAAIO,KAAK,GAAGD,iBAAiB,EAAE;MAC3B,IAAIK,MAAM,GAAGJ,KAAK,GAAGR,IAAI;MACzB,OAAOY,MAAM,GAAGf,IAAI;IACxB;EACJ;AACJ"},"metadata":{},"sourceType":"module"}
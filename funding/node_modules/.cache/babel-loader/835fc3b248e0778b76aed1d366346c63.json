{"ast":null,"code":"import { add64, isEqual64, isStrictlyPositive64, isStrictlySmaller64, substract64, Unit64 } from './_internals/helpers/ArrayInt64.js';\nimport { arrayInt64 } from './_internals/ArrayInt64Arbitrary.js';\nimport { doubleToIndex, indexToDouble } from './_internals/helpers/DoubleHelpers.js';\nfunction safeDoubleToIndex(d, constraintsLabel) {\n  if (Number.isNaN(d)) {\n    throw new Error('fc.double constraints.' + constraintsLabel + ' must be a 32-bit float');\n  }\n  return doubleToIndex(d);\n}\nfunction unmapperDoubleToIndex(value) {\n  if (typeof value !== 'number') throw new Error('Unsupported type');\n  return doubleToIndex(value);\n}\nexport function double() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    noDefaultInfinity = false,\n    noNaN = false,\n    min = noDefaultInfinity ? -Number.MAX_VALUE : Number.NEGATIVE_INFINITY,\n    max = noDefaultInfinity ? Number.MAX_VALUE : Number.POSITIVE_INFINITY\n  } = constraints;\n  const minIndex = safeDoubleToIndex(min, 'min');\n  const maxIndex = safeDoubleToIndex(max, 'max');\n  if (isStrictlySmaller64(maxIndex, minIndex)) {\n    throw new Error('fc.double constraints.min must be smaller or equal to constraints.max');\n  }\n  if (noNaN) {\n    return arrayInt64(minIndex, maxIndex).map(indexToDouble, unmapperDoubleToIndex);\n  }\n  const positiveMaxIdx = isStrictlyPositive64(maxIndex);\n  const minIndexWithNaN = positiveMaxIdx ? minIndex : substract64(minIndex, Unit64);\n  const maxIndexWithNaN = positiveMaxIdx ? add64(maxIndex, Unit64) : maxIndex;\n  return arrayInt64(minIndexWithNaN, maxIndexWithNaN).map(index => {\n    if (isStrictlySmaller64(maxIndex, index) || isStrictlySmaller64(index, minIndex)) return Number.NaN;else return indexToDouble(index);\n  }, value => {\n    if (typeof value !== 'number') throw new Error('Unsupported type');\n    if (Number.isNaN(value)) return !isEqual64(maxIndex, maxIndexWithNaN) ? maxIndexWithNaN : minIndexWithNaN;\n    return doubleToIndex(value);\n  });\n}","map":{"version":3,"names":["add64","isEqual64","isStrictlyPositive64","isStrictlySmaller64","substract64","Unit64","arrayInt64","doubleToIndex","indexToDouble","safeDoubleToIndex","d","constraintsLabel","Number","isNaN","Error","unmapperDoubleToIndex","value","double","constraints","noDefaultInfinity","noNaN","min","MAX_VALUE","NEGATIVE_INFINITY","max","POSITIVE_INFINITY","minIndex","maxIndex","map","positiveMaxIdx","minIndexWithNaN","maxIndexWithNaN","index","NaN"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/double.js"],"sourcesContent":["import { add64, isEqual64, isStrictlyPositive64, isStrictlySmaller64, substract64, Unit64, } from './_internals/helpers/ArrayInt64.js';\nimport { arrayInt64 } from './_internals/ArrayInt64Arbitrary.js';\nimport { doubleToIndex, indexToDouble } from './_internals/helpers/DoubleHelpers.js';\nfunction safeDoubleToIndex(d, constraintsLabel) {\n    if (Number.isNaN(d)) {\n        throw new Error('fc.double constraints.' + constraintsLabel + ' must be a 32-bit float');\n    }\n    return doubleToIndex(d);\n}\nfunction unmapperDoubleToIndex(value) {\n    if (typeof value !== 'number')\n        throw new Error('Unsupported type');\n    return doubleToIndex(value);\n}\nexport function double(constraints = {}) {\n    const { noDefaultInfinity = false, noNaN = false, min = noDefaultInfinity ? -Number.MAX_VALUE : Number.NEGATIVE_INFINITY, max = noDefaultInfinity ? Number.MAX_VALUE : Number.POSITIVE_INFINITY, } = constraints;\n    const minIndex = safeDoubleToIndex(min, 'min');\n    const maxIndex = safeDoubleToIndex(max, 'max');\n    if (isStrictlySmaller64(maxIndex, minIndex)) {\n        throw new Error('fc.double constraints.min must be smaller or equal to constraints.max');\n    }\n    if (noNaN) {\n        return arrayInt64(minIndex, maxIndex).map(indexToDouble, unmapperDoubleToIndex);\n    }\n    const positiveMaxIdx = isStrictlyPositive64(maxIndex);\n    const minIndexWithNaN = positiveMaxIdx ? minIndex : substract64(minIndex, Unit64);\n    const maxIndexWithNaN = positiveMaxIdx ? add64(maxIndex, Unit64) : maxIndex;\n    return arrayInt64(minIndexWithNaN, maxIndexWithNaN).map((index) => {\n        if (isStrictlySmaller64(maxIndex, index) || isStrictlySmaller64(index, minIndex))\n            return Number.NaN;\n        else\n            return indexToDouble(index);\n    }, (value) => {\n        if (typeof value !== 'number')\n            throw new Error('Unsupported type');\n        if (Number.isNaN(value))\n            return !isEqual64(maxIndex, maxIndexWithNaN) ? maxIndexWithNaN : minIndexWithNaN;\n        return doubleToIndex(value);\n    });\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,WAAW,EAAEC,MAAM,QAAS,oCAAoC;AACtI,SAASC,UAAU,QAAQ,qCAAqC;AAChE,SAASC,aAAa,EAAEC,aAAa,QAAQ,uCAAuC;AACpF,SAASC,iBAAiB,CAACC,CAAC,EAAEC,gBAAgB,EAAE;EAC5C,IAAIC,MAAM,CAACC,KAAK,CAACH,CAAC,CAAC,EAAE;IACjB,MAAM,IAAII,KAAK,CAAC,wBAAwB,GAAGH,gBAAgB,GAAG,yBAAyB,CAAC;EAC5F;EACA,OAAOJ,aAAa,CAACG,CAAC,CAAC;AAC3B;AACA,SAASK,qBAAqB,CAACC,KAAK,EAAE;EAClC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,MAAM,IAAIF,KAAK,CAAC,kBAAkB,CAAC;EACvC,OAAOP,aAAa,CAACS,KAAK,CAAC;AAC/B;AACA,OAAO,SAASC,MAAM,GAAmB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EACnC,MAAM;IAAEC,iBAAiB,GAAG,KAAK;IAAEC,KAAK,GAAG,KAAK;IAAEC,GAAG,GAAGF,iBAAiB,GAAG,CAACP,MAAM,CAACU,SAAS,GAAGV,MAAM,CAACW,iBAAiB;IAAEC,GAAG,GAAGL,iBAAiB,GAAGP,MAAM,CAACU,SAAS,GAAGV,MAAM,CAACa;EAAmB,CAAC,GAAGP,WAAW;EAChN,MAAMQ,QAAQ,GAAGjB,iBAAiB,CAACY,GAAG,EAAE,KAAK,CAAC;EAC9C,MAAMM,QAAQ,GAAGlB,iBAAiB,CAACe,GAAG,EAAE,KAAK,CAAC;EAC9C,IAAIrB,mBAAmB,CAACwB,QAAQ,EAAED,QAAQ,CAAC,EAAE;IACzC,MAAM,IAAIZ,KAAK,CAAC,uEAAuE,CAAC;EAC5F;EACA,IAAIM,KAAK,EAAE;IACP,OAAOd,UAAU,CAACoB,QAAQ,EAAEC,QAAQ,CAAC,CAACC,GAAG,CAACpB,aAAa,EAAEO,qBAAqB,CAAC;EACnF;EACA,MAAMc,cAAc,GAAG3B,oBAAoB,CAACyB,QAAQ,CAAC;EACrD,MAAMG,eAAe,GAAGD,cAAc,GAAGH,QAAQ,GAAGtB,WAAW,CAACsB,QAAQ,EAAErB,MAAM,CAAC;EACjF,MAAM0B,eAAe,GAAGF,cAAc,GAAG7B,KAAK,CAAC2B,QAAQ,EAAEtB,MAAM,CAAC,GAAGsB,QAAQ;EAC3E,OAAOrB,UAAU,CAACwB,eAAe,EAAEC,eAAe,CAAC,CAACH,GAAG,CAAEI,KAAK,IAAK;IAC/D,IAAI7B,mBAAmB,CAACwB,QAAQ,EAAEK,KAAK,CAAC,IAAI7B,mBAAmB,CAAC6B,KAAK,EAAEN,QAAQ,CAAC,EAC5E,OAAOd,MAAM,CAACqB,GAAG,CAAC,KAElB,OAAOzB,aAAa,CAACwB,KAAK,CAAC;EACnC,CAAC,EAAGhB,KAAK,IAAK;IACV,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,MAAM,IAAIF,KAAK,CAAC,kBAAkB,CAAC;IACvC,IAAIF,MAAM,CAACC,KAAK,CAACG,KAAK,CAAC,EACnB,OAAO,CAACf,SAAS,CAAC0B,QAAQ,EAAEI,eAAe,CAAC,GAAGA,eAAe,GAAGD,eAAe;IACpF,OAAOvB,aAAa,CAACS,KAAK,CAAC;EAC/B,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}
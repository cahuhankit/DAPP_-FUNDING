{"ast":null,"code":"import { stream } from '../../stream/Stream.js';\nimport { Property } from '../property/Property.generic.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nfunction toProperty(generator, qParams) {\n  const prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync') ? new Property(generator, () => true) : generator;\n  return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;\n}\nfunction streamSample(generator, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  const qParams = QualifiedParameters.read(extendedParams);\n  const nextProperty = toProperty(generator, qParams);\n  const shrink = nextProperty.shrink.bind(nextProperty);\n  const tossedValues = stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples));\n  if (qParams.path.length === 0) {\n    return tossedValues.take(qParams.numRuns).map(s => s().value_);\n  }\n  return stream(pathWalk(qParams.path, tossedValues.map(s => s()), shrink)).take(qParams.numRuns).map(s => s.value_);\n}\nfunction sample(generator, params) {\n  return [...streamSample(generator, params)];\n}\nfunction round2(n) {\n  return (Math.round(n * 100) / 100).toFixed(2);\n}\nfunction statistics(generator, classify, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  const qParams = QualifiedParameters.read(extendedParams);\n  const recorded = {};\n  for (const g of streamSample(generator, params)) {\n    const out = classify(g);\n    const categories = Array.isArray(out) ? out : [out];\n    for (const c of categories) {\n      recorded[c] = (recorded[c] || 0) + 1;\n    }\n  }\n  const data = Object.entries(recorded).sort((a, b) => b[1] - a[1]).map(i => [i[0], `${round2(i[1] * 100.0 / qParams.numRuns)}%`]);\n  const longestName = data.map(i => i[0].length).reduce((p, c) => Math.max(p, c), 0);\n  const longestPercent = data.map(i => i[1].length).reduce((p, c) => Math.max(p, c), 0);\n  for (const item of data) {\n    qParams.logger(`${item[0].padEnd(longestName, '.')}..${item[1].padStart(longestPercent, '.')}`);\n  }\n}\nexport { sample, statistics };","map":{"version":3,"names":["stream","Property","UnbiasedProperty","readConfigureGlobal","QualifiedParameters","toss","pathWalk","toProperty","generator","qParams","prop","Object","prototype","hasOwnProperty","call","unbiased","streamSample","params","extendedParams","assign","numRuns","read","nextProperty","shrink","bind","tossedValues","seed","randomType","examples","path","length","take","map","s","value_","sample","round2","n","Math","round","toFixed","statistics","classify","recorded","g","out","categories","Array","isArray","c","data","entries","sort","a","b","i","longestName","reduce","p","max","longestPercent","item","logger","padEnd","padStart"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/check/runner/Sampler.js"],"sourcesContent":["import { stream } from '../../stream/Stream.js';\nimport { Property } from '../property/Property.generic.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nfunction toProperty(generator, qParams) {\n    const prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync')\n        ? new Property(generator, () => true)\n        : generator;\n    return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;\n}\nfunction streamSample(generator, params) {\n    const extendedParams = typeof params === 'number'\n        ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n    const qParams = QualifiedParameters.read(extendedParams);\n    const nextProperty = toProperty(generator, qParams);\n    const shrink = nextProperty.shrink.bind(nextProperty);\n    const tossedValues = stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples));\n    if (qParams.path.length === 0) {\n        return tossedValues.take(qParams.numRuns).map((s) => s().value_);\n    }\n    return stream(pathWalk(qParams.path, tossedValues.map((s) => s()), shrink))\n        .take(qParams.numRuns)\n        .map((s) => s.value_);\n}\nfunction sample(generator, params) {\n    return [...streamSample(generator, params)];\n}\nfunction round2(n) {\n    return (Math.round(n * 100) / 100).toFixed(2);\n}\nfunction statistics(generator, classify, params) {\n    const extendedParams = typeof params === 'number'\n        ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n    const qParams = QualifiedParameters.read(extendedParams);\n    const recorded = {};\n    for (const g of streamSample(generator, params)) {\n        const out = classify(g);\n        const categories = Array.isArray(out) ? out : [out];\n        for (const c of categories) {\n            recorded[c] = (recorded[c] || 0) + 1;\n        }\n    }\n    const data = Object.entries(recorded)\n        .sort((a, b) => b[1] - a[1])\n        .map((i) => [i[0], `${round2((i[1] * 100.0) / qParams.numRuns)}%`]);\n    const longestName = data.map((i) => i[0].length).reduce((p, c) => Math.max(p, c), 0);\n    const longestPercent = data.map((i) => i[1].length).reduce((p, c) => Math.max(p, c), 0);\n    for (const item of data) {\n        qParams.logger(`${item[0].padEnd(longestName, '.')}..${item[1].padStart(longestPercent, '.')}`);\n    }\n}\nexport { sample, statistics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
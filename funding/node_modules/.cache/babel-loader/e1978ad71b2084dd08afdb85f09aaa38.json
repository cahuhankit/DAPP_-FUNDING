{"ast":null,"code":"import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction nat(arg) {\n  const max = typeof arg === 'number' ? arg : arg && arg.max !== undefined ? arg.max : 0x7fffffff;\n  if (max < 0) {\n    throw new Error('fc.nat value should be greater than or equal to 0');\n  }\n  if (!Number.isInteger(max)) {\n    throw new Error('fc.nat maximum value should be an integer');\n  }\n  return new IntegerArbitrary(0, max);\n}\nexport { nat };","map":{"version":3,"names":["IntegerArbitrary","nat","arg","max","undefined","Error","Number","isInteger"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/nat.js"],"sourcesContent":["import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction nat(arg) {\n    const max = typeof arg === 'number' ? arg : arg && arg.max !== undefined ? arg.max : 0x7fffffff;\n    if (max < 0) {\n        throw new Error('fc.nat value should be greater than or equal to 0');\n    }\n    if (!Number.isInteger(max)) {\n        throw new Error('fc.nat maximum value should be an integer');\n    }\n    return new IntegerArbitrary(0, max);\n}\nexport { nat };\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,GAAG,CAACC,GAAG,EAAE;EACd,MAAMC,GAAG,GAAG,OAAOD,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,IAAIA,GAAG,CAACC,GAAG,KAAKC,SAAS,GAAGF,GAAG,CAACC,GAAG,GAAG,UAAU;EAC/F,IAAIA,GAAG,GAAG,CAAC,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,mDAAmD,CAAC;EACxE;EACA,IAAI,CAACC,MAAM,CAACC,SAAS,CAACJ,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIE,KAAK,CAAC,2CAA2C,CAAC;EAChE;EACA,OAAO,IAAIL,gBAAgB,CAAC,CAAC,EAAEG,GAAG,CAAC;AACvC;AACA,SAASF,GAAG"},"metadata":{},"sourceType":"module"}
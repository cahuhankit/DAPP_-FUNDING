{"ast":null,"code":"import { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nfunction computeDefaultMax() {\n  return (BigInt(1) << BigInt(256)) - BigInt(1);\n}\nfunction bigUint(constraints) {\n  const requestedMax = typeof constraints === 'object' ? constraints.max : constraints;\n  const max = requestedMax !== undefined ? requestedMax : computeDefaultMax();\n  if (max < 0) {\n    throw new Error('fc.bigUint expects max to be greater than or equal to zero');\n  }\n  return new BigIntArbitrary(BigInt(0), max);\n}\nexport { bigUint };","map":{"version":3,"names":["BigIntArbitrary","computeDefaultMax","BigInt","bigUint","constraints","requestedMax","max","undefined","Error"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/bigUint.js"],"sourcesContent":["import { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nfunction computeDefaultMax() {\n    return (BigInt(1) << BigInt(256)) - BigInt(1);\n}\nfunction bigUint(constraints) {\n    const requestedMax = typeof constraints === 'object' ? constraints.max : constraints;\n    const max = requestedMax !== undefined ? requestedMax : computeDefaultMax();\n    if (max < 0) {\n        throw new Error('fc.bigUint expects max to be greater than or equal to zero');\n    }\n    return new BigIntArbitrary(BigInt(0), max);\n}\nexport { bigUint };\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,iCAAiC;AACjE,SAASC,iBAAiB,GAAG;EACzB,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,GAAG,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC;AACjD;AACA,SAASC,OAAO,CAACC,WAAW,EAAE;EAC1B,MAAMC,YAAY,GAAG,OAAOD,WAAW,KAAK,QAAQ,GAAGA,WAAW,CAACE,GAAG,GAAGF,WAAW;EACpF,MAAME,GAAG,GAAGD,YAAY,KAAKE,SAAS,GAAGF,YAAY,GAAGJ,iBAAiB,EAAE;EAC3E,IAAIK,GAAG,GAAG,CAAC,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,4DAA4D,CAAC;EACjF;EACA,OAAO,IAAIR,eAAe,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEI,GAAG,CAAC;AAC9C;AACA,SAASH,OAAO"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n  var MinRng = rng.min();\n  var NumValues = rng.max() - rng.min() + 1;\n  if (rangeSize <= NumValues) {\n    var nrng_1 = rng;\n    var MaxAllowed = NumValues - NumValues % rangeSize;\n    while (true) {\n      var out = nrng_1.unsafeNext();\n      var deltaV = out - MinRng;\n      if (deltaV < MaxAllowed) {\n        return deltaV % rangeSize;\n      }\n    }\n  }\n  var FinalNumValues = NumValues * NumValues;\n  var NumIterations = 2;\n  while (FinalNumValues < rangeSize) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n  var MaxAcceptedRandom = rangeSize * Math.floor(1 * FinalNumValues / rangeSize);\n  var nrng = rng;\n  while (true) {\n    var value = 0;\n    for (var num = 0; num !== NumIterations; ++num) {\n      var out = nrng.unsafeNext();\n      value = NumValues * value + (out - MinRng);\n    }\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value - rangeSize * Math.floor(1 * value / rangeSize);\n      return inDiff;\n    }\n  }\n}","map":{"version":3,"names":["unsafeUniformIntDistributionInternal","rangeSize","rng","MinRng","min","NumValues","max","nrng_1","MaxAllowed","out","unsafeNext","deltaV","FinalNumValues","NumIterations","MaxAcceptedRandom","Math","floor","nrng","value","num","inDiff"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js"],"sourcesContent":["export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n    var MinRng = rng.min();\n    var NumValues = rng.max() - rng.min() + 1;\n    if (rangeSize <= NumValues) {\n        var nrng_1 = rng;\n        var MaxAllowed = NumValues - (NumValues % rangeSize);\n        while (true) {\n            var out = nrng_1.unsafeNext();\n            var deltaV = out - MinRng;\n            if (deltaV < MaxAllowed) {\n                return deltaV % rangeSize;\n            }\n        }\n    }\n    var FinalNumValues = NumValues * NumValues;\n    var NumIterations = 2;\n    while (FinalNumValues < rangeSize) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = rangeSize * Math.floor((1 * FinalNumValues) / rangeSize);\n    var nrng = rng;\n    while (true) {\n        var value = 0;\n        for (var num = 0; num !== NumIterations; ++num) {\n            var out = nrng.unsafeNext();\n            value = NumValues * value + (out - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value - rangeSize * Math.floor((1 * value) / rangeSize);\n            return inDiff;\n        }\n    }\n}\n"],"mappings":"AAAA,OAAO,SAASA,oCAAoC,CAACC,SAAS,EAAEC,GAAG,EAAE;EACjE,IAAIC,MAAM,GAAGD,GAAG,CAACE,GAAG,EAAE;EACtB,IAAIC,SAAS,GAAGH,GAAG,CAACI,GAAG,EAAE,GAAGJ,GAAG,CAACE,GAAG,EAAE,GAAG,CAAC;EACzC,IAAIH,SAAS,IAAII,SAAS,EAAE;IACxB,IAAIE,MAAM,GAAGL,GAAG;IAChB,IAAIM,UAAU,GAAGH,SAAS,GAAIA,SAAS,GAAGJ,SAAU;IACpD,OAAO,IAAI,EAAE;MACT,IAAIQ,GAAG,GAAGF,MAAM,CAACG,UAAU,EAAE;MAC7B,IAAIC,MAAM,GAAGF,GAAG,GAAGN,MAAM;MACzB,IAAIQ,MAAM,GAAGH,UAAU,EAAE;QACrB,OAAOG,MAAM,GAAGV,SAAS;MAC7B;IACJ;EACJ;EACA,IAAIW,cAAc,GAAGP,SAAS,GAAGA,SAAS;EAC1C,IAAIQ,aAAa,GAAG,CAAC;EACrB,OAAOD,cAAc,GAAGX,SAAS,EAAE;IAC/BW,cAAc,IAAIP,SAAS;IAC3B,EAAEQ,aAAa;EACnB;EACA,IAAIC,iBAAiB,GAAGb,SAAS,GAAGc,IAAI,CAACC,KAAK,CAAE,CAAC,GAAGJ,cAAc,GAAIX,SAAS,CAAC;EAChF,IAAIgB,IAAI,GAAGf,GAAG;EACd,OAAO,IAAI,EAAE;IACT,IAAIgB,KAAK,GAAG,CAAC;IACb,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,KAAKN,aAAa,EAAE,EAAEM,GAAG,EAAE;MAC5C,IAAIV,GAAG,GAAGQ,IAAI,CAACP,UAAU,EAAE;MAC3BQ,KAAK,GAAGb,SAAS,GAAGa,KAAK,IAAIT,GAAG,GAAGN,MAAM,CAAC;IAC9C;IACA,IAAIe,KAAK,GAAGJ,iBAAiB,EAAE;MAC3B,IAAIM,MAAM,GAAGF,KAAK,GAAGjB,SAAS,GAAGc,IAAI,CAACC,KAAK,CAAE,CAAC,GAAGE,KAAK,GAAIjB,SAAS,CAAC;MACpE,OAAOmB,MAAM;IACjB;EACJ;AACJ"},"metadata":{},"sourceType":"module"}
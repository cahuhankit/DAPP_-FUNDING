{"ast":null,"code":"import { Stream, stream } from '../../stream/Stream.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\nfunction runIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n  for (const v of runner) {\n    const out = property.run(v);\n    runner.handleResult(out);\n  }\n  return runner.runExecution;\n}\nasync function asyncRunIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n  for (const v of runner) {\n    const out = await property.run(v);\n    runner.handleResult(out);\n  }\n  return runner.runExecution;\n}\nfunction runnerPathWalker(valueProducers, shrink, path) {\n  const pathPoints = path.split(':');\n  const pathStream = stream(valueProducers).drop(pathPoints.length > 0 ? +pathPoints[0] : 0).map(producer => producer());\n  const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n  return stream(pathWalk(adaptedPath, pathStream, shrink)).map(v => () => v);\n}\nfunction buildInitialValues(valueProducers, shrink, qParams) {\n  if (qParams.path.length === 0) {\n    return stream(valueProducers);\n  }\n  return runnerPathWalker(valueProducers, shrink, qParams.path);\n}\nfunction check(rawProperty, params) {\n  if (rawProperty == null || rawProperty.generate == null) throw new Error('Invalid property encountered, please use a valid property');\n  if (rawProperty.run == null) throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n  const qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n  if (qParams.reporter !== null && qParams.asyncReporter !== null) throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n  if (qParams.asyncReporter !== null && !rawProperty.isAsync()) throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n  const property = decorateProperty(rawProperty, qParams);\n  const generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n  const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n  const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n  const shrink = property.shrink.bind(property);\n  const initialValues = buildInitialValues(generator, shrink, qParams);\n  const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n  const finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;\n  return property.isAsync() ? asyncRunIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then(e => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams)) : runIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\nfunction assert(property, params) {\n  const out = check(property, params);\n  if (property.isAsync()) return out.then(asyncReportRunDetails);else reportRunDetails(out);\n}\nexport { check, assert };","map":{"version":3,"names":["Stream","stream","readConfigureGlobal","QualifiedParameters","decorateProperty","RunnerIterator","SourceValuesIterator","toss","pathWalk","asyncReportRunDetails","reportRunDetails","runIt","property","shrink","sourceValues","verbose","interruptedAsFailure","runner","v","out","run","handleResult","runExecution","asyncRunIt","runnerPathWalker","valueProducers","path","pathPoints","split","pathStream","drop","length","map","producer","adaptedPath","slice","join","buildInitialValues","qParams","check","rawProperty","params","generate","Error","read","Object","assign","reporter","asyncReporter","isAsync","generator","seed","randomType","examples","maxInitialIterations","indexOf","numRuns","maxSkips","maxSkipsPerRun","bind","initialValues","finalShrink","endOnFailure","nil","markInterruptAsFailure","then","e","toRunDetails","assert"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/check/runner/Runner.js"],"sourcesContent":["import { Stream, stream } from '../../stream/Stream.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\nfunction runIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nasync function asyncRunIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = await property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nfunction runnerPathWalker(valueProducers, shrink, path) {\n    const pathPoints = path.split(':');\n    const pathStream = stream(valueProducers)\n        .drop(pathPoints.length > 0 ? +pathPoints[0] : 0)\n        .map((producer) => producer());\n    const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n    return stream(pathWalk(adaptedPath, pathStream, shrink)).map((v) => () => v);\n}\nfunction buildInitialValues(valueProducers, shrink, qParams) {\n    if (qParams.path.length === 0) {\n        return stream(valueProducers);\n    }\n    return runnerPathWalker(valueProducers, shrink, qParams.path);\n}\nfunction check(rawProperty, params) {\n    if (rawProperty == null || rawProperty.generate == null)\n        throw new Error('Invalid property encountered, please use a valid property');\n    if (rawProperty.run == null)\n        throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n    const qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n    if (qParams.reporter !== null && qParams.asyncReporter !== null)\n        throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n    if (qParams.asyncReporter !== null && !rawProperty.isAsync())\n        throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n    const property = decorateProperty(rawProperty, qParams);\n    const generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n    const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n    const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n    const shrink = property.shrink.bind(property);\n    const initialValues = buildInitialValues(generator, shrink, qParams);\n    const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n    const finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;\n    return property.isAsync()\n        ? asyncRunIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then((e) => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams))\n        : runIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\nfunction assert(property, params) {\n    const out = check(property, params);\n    if (property.isAsync())\n        return out.then(asyncReportRunDetails);\n    else\n        reportRunDetails(out);\n}\nexport { check, assert };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
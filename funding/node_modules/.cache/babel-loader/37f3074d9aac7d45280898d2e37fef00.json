{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthBiasFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends Arbitrary {\n  constructor(warbs, constraints, context) {\n    super();\n    this.warbs = warbs;\n    this.constraints = constraints;\n    this.context = context;\n    let currentWeight = 0;\n    this.cumulatedWeights = [];\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      currentWeight += warbs[idx].weight;\n      this.cumulatedWeights.push(currentWeight);\n    }\n    this.totalWeight = currentWeight;\n  }\n  static from(warbs, constraints, label) {\n    if (warbs.length === 0) {\n      throw new Error(`${label} expects at least one weighted arbitrary`);\n    }\n    let totalWeight = 0;\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      const currentArbitrary = warbs[idx].arbitrary;\n      if (currentArbitrary === undefined) {\n        throw new Error(`${label} expects arbitraries to be specified`);\n      }\n      const currentWeight = warbs[idx].weight;\n      totalWeight += currentWeight;\n      if (!Number.isInteger(currentWeight)) {\n        throw new Error(`${label} expects weights to be integer values`);\n      }\n      if (currentWeight < 0) {\n        throw new Error(`${label} expects weights to be superior or equal to 0`);\n      }\n    }\n    if (totalWeight <= 0) {\n      throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n    }\n    const sanitizedConstraints = {\n      depthBias: depthBiasFromSizeForArbitrary(constraints.depthSize, constraints.maxDepth !== undefined),\n      maxDepth: constraints.maxDepth != undefined ? constraints.maxDepth : Number.POSITIVE_INFINITY,\n      withCrossShrink: !!constraints.withCrossShrink\n    };\n    return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n  }\n  generate(mrng, biasFactor) {\n    if (this.mustGenerateFirst()) {\n      return this.safeGenerateForIndex(mrng, 0, biasFactor);\n    }\n    const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n    for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n      if (selected < this.cumulatedWeights[idx]) {\n        return this.safeGenerateForIndex(mrng, idx, biasFactor);\n      }\n    }\n    throw new Error(`Unable to generate from fc.frequency`);\n  }\n  canShrinkWithoutContext(value) {\n    return this.canShrinkWithoutContextIndex(value) !== -1;\n  }\n  shrink(value, context) {\n    if (context !== undefined) {\n      const safeContext = context;\n      const selectedIndex = safeContext.selectedIndex;\n      const originalBias = safeContext.originalBias;\n      const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n      const originalShrinks = originalArbitrary.shrink(value, safeContext.originalContext).map(v => this.mapIntoValue(selectedIndex, v, null, originalBias));\n      if (safeContext.clonedMrngForFallbackFirst !== null) {\n        if (safeContext.cachedGeneratedForFirst === undefined) {\n          safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n        }\n        const valueFromFirst = safeContext.cachedGeneratedForFirst;\n        return Stream.of(valueFromFirst).join(originalShrinks);\n      }\n      return originalShrinks;\n    }\n    const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n    if (potentialSelectedIndex === -1) {\n      return Stream.nil();\n    }\n    return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary.shrink(value, undefined).map(v => this.mapIntoValue(potentialSelectedIndex, v, null, undefined)));\n  }\n  defaultShrinkForFirst(selectedIndex) {\n    ++this.context.depth;\n    try {\n      if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n        return Stream.nil();\n      }\n    } finally {\n      --this.context.depth;\n    }\n    const rawShrinkValue = new Value(this.warbs[0].fallbackValue.default, undefined);\n    return Stream.of(this.mapIntoValue(0, rawShrinkValue, null, undefined));\n  }\n  canShrinkWithoutContextIndex(value) {\n    if (this.mustGenerateFirst()) {\n      return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n    }\n    try {\n      ++this.context.depth;\n      for (let idx = 0; idx !== this.warbs.length; ++idx) {\n        const warb = this.warbs[idx];\n        if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n          return idx;\n        }\n      }\n      return -1;\n    } finally {\n      --this.context.depth;\n    }\n  }\n  mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n    const context = {\n      selectedIndex: idx,\n      originalBias: biasFactor,\n      originalContext: value.context,\n      clonedMrngForFallbackFirst\n    };\n    return new Value(value.value, context);\n  }\n  safeGenerateForIndex(mrng, idx, biasFactor) {\n    ++this.context.depth;\n    try {\n      const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n      const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n      return this.mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n    } finally {\n      --this.context.depth;\n    }\n  }\n  mustGenerateFirst() {\n    return this.constraints.maxDepth <= this.context.depth;\n  }\n  mustFallbackToFirstInShrink(idx) {\n    return idx !== 0 && this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n  }\n  computeNegDepthBenefit() {\n    const depthBias = this.constraints.depthBias;\n    if (depthBias <= 0 || this.warbs[0].weight === 0) {\n      return 0;\n    }\n    const depthBenefit = Math.floor(Math.pow(1 + depthBias, this.context.depth)) - 1;\n    return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n  }\n}","map":{"version":3,"names":["Stream","Arbitrary","Value","getDepthContextFor","depthBiasFromSizeForArbitrary","FrequencyArbitrary","constructor","warbs","constraints","context","currentWeight","cumulatedWeights","idx","length","weight","push","totalWeight","from","label","Error","currentArbitrary","arbitrary","undefined","Number","isInteger","sanitizedConstraints","depthBias","depthSize","maxDepth","POSITIVE_INFINITY","withCrossShrink","depthIdentifier","generate","mrng","biasFactor","mustGenerateFirst","safeGenerateForIndex","selected","nextInt","computeNegDepthBenefit","canShrinkWithoutContext","value","canShrinkWithoutContextIndex","shrink","safeContext","selectedIndex","originalBias","originalArbitrary","originalShrinks","originalContext","map","v","mapIntoValue","clonedMrngForFallbackFirst","cachedGeneratedForFirst","valueFromFirst","of","join","potentialSelectedIndex","nil","defaultShrinkForFirst","depth","mustFallbackToFirstInShrink","fallbackValue","rawShrinkValue","default","warb","clone","depthBenefit","Math","floor","pow","min","MAX_SAFE_INTEGER"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/FrequencyArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthBiasFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends Arbitrary {\n    constructor(warbs, constraints, context) {\n        super();\n        this.warbs = warbs;\n        this.constraints = constraints;\n        this.context = context;\n        let currentWeight = 0;\n        this.cumulatedWeights = [];\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            currentWeight += warbs[idx].weight;\n            this.cumulatedWeights.push(currentWeight);\n        }\n        this.totalWeight = currentWeight;\n    }\n    static from(warbs, constraints, label) {\n        if (warbs.length === 0) {\n            throw new Error(`${label} expects at least one weighted arbitrary`);\n        }\n        let totalWeight = 0;\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            const currentArbitrary = warbs[idx].arbitrary;\n            if (currentArbitrary === undefined) {\n                throw new Error(`${label} expects arbitraries to be specified`);\n            }\n            const currentWeight = warbs[idx].weight;\n            totalWeight += currentWeight;\n            if (!Number.isInteger(currentWeight)) {\n                throw new Error(`${label} expects weights to be integer values`);\n            }\n            if (currentWeight < 0) {\n                throw new Error(`${label} expects weights to be superior or equal to 0`);\n            }\n        }\n        if (totalWeight <= 0) {\n            throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n        }\n        const sanitizedConstraints = {\n            depthBias: depthBiasFromSizeForArbitrary(constraints.depthSize, constraints.maxDepth !== undefined),\n            maxDepth: constraints.maxDepth != undefined ? constraints.maxDepth : Number.POSITIVE_INFINITY,\n            withCrossShrink: !!constraints.withCrossShrink,\n        };\n        return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n    }\n    generate(mrng, biasFactor) {\n        if (this.mustGenerateFirst()) {\n            return this.safeGenerateForIndex(mrng, 0, biasFactor);\n        }\n        const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n        for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n            if (selected < this.cumulatedWeights[idx]) {\n                return this.safeGenerateForIndex(mrng, idx, biasFactor);\n            }\n        }\n        throw new Error(`Unable to generate from fc.frequency`);\n    }\n    canShrinkWithoutContext(value) {\n        return this.canShrinkWithoutContextIndex(value) !== -1;\n    }\n    shrink(value, context) {\n        if (context !== undefined) {\n            const safeContext = context;\n            const selectedIndex = safeContext.selectedIndex;\n            const originalBias = safeContext.originalBias;\n            const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n            const originalShrinks = originalArbitrary\n                .shrink(value, safeContext.originalContext)\n                .map((v) => this.mapIntoValue(selectedIndex, v, null, originalBias));\n            if (safeContext.clonedMrngForFallbackFirst !== null) {\n                if (safeContext.cachedGeneratedForFirst === undefined) {\n                    safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n                }\n                const valueFromFirst = safeContext.cachedGeneratedForFirst;\n                return Stream.of(valueFromFirst).join(originalShrinks);\n            }\n            return originalShrinks;\n        }\n        const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n        if (potentialSelectedIndex === -1) {\n            return Stream.nil();\n        }\n        return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary\n            .shrink(value, undefined)\n            .map((v) => this.mapIntoValue(potentialSelectedIndex, v, null, undefined)));\n    }\n    defaultShrinkForFirst(selectedIndex) {\n        ++this.context.depth;\n        try {\n            if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n                return Stream.nil();\n            }\n        }\n        finally {\n            --this.context.depth;\n        }\n        const rawShrinkValue = new Value(this.warbs[0].fallbackValue.default, undefined);\n        return Stream.of(this.mapIntoValue(0, rawShrinkValue, null, undefined));\n    }\n    canShrinkWithoutContextIndex(value) {\n        if (this.mustGenerateFirst()) {\n            return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n        }\n        try {\n            ++this.context.depth;\n            for (let idx = 0; idx !== this.warbs.length; ++idx) {\n                const warb = this.warbs[idx];\n                if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n                    return idx;\n                }\n            }\n            return -1;\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n        const context = {\n            selectedIndex: idx,\n            originalBias: biasFactor,\n            originalContext: value.context,\n            clonedMrngForFallbackFirst,\n        };\n        return new Value(value.value, context);\n    }\n    safeGenerateForIndex(mrng, idx, biasFactor) {\n        ++this.context.depth;\n        try {\n            const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n            const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n            return this.mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mustGenerateFirst() {\n        return this.constraints.maxDepth <= this.context.depth;\n    }\n    mustFallbackToFirstInShrink(idx) {\n        return idx !== 0 && this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n    }\n    computeNegDepthBenefit() {\n        const depthBias = this.constraints.depthBias;\n        if (depthBias <= 0 || this.warbs[0].weight === 0) {\n            return 0;\n        }\n        const depthBenefit = Math.floor(Math.pow(1 + depthBias, this.context.depth)) - 1;\n        return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
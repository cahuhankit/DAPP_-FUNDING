{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { buildSlicedGenerator } from './helpers/BuildSlicedGenerator.js';\nfunction biasedMaxLength(minLength, maxLength) {\n  if (minLength === maxLength) {\n    return minLength;\n  }\n  return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\nexport class ArrayArbitrary extends Arbitrary {\n  constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, customSlices) {\n    super();\n    this.arb = arb;\n    this.minLength = minLength;\n    this.maxGeneratedLength = maxGeneratedLength;\n    this.maxLength = maxLength;\n    this.setBuilder = setBuilder;\n    this.customSlices = customSlices;\n    this.lengthArb = integer({\n      min: minLength,\n      max: maxGeneratedLength\n    });\n    this.depthContext = getDepthContextFor(depthIdentifier);\n  }\n  preFilter(tab) {\n    if (this.setBuilder === undefined) {\n      return tab;\n    }\n    const s = this.setBuilder();\n    for (let index = 0; index !== tab.length; ++index) {\n      s.tryAdd(tab[index]);\n    }\n    return s.getData();\n  }\n  static makeItCloneable(vs, shrinkables) {\n    vs[cloneMethod] = () => {\n      const cloned = [];\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n    return vs;\n  }\n  generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    let numSkippedInRow = 0;\n    const s = setBuilder();\n    const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);\n    while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n      const current = slicedGenerator.next();\n      if (s.tryAdd(current)) {\n        numSkippedInRow = 0;\n      } else {\n        numSkippedInRow += 1;\n      }\n    }\n    return s.getData();\n  }\n  safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n    try {\n      return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n  generateNItems(N, mrng, biasFactorItems) {\n    const items = [];\n    const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);\n    slicedGenerator.attemptExact(N);\n    for (let index = 0; index !== N; ++index) {\n      const current = slicedGenerator.next();\n      items.push(current);\n    }\n    return items;\n  }\n  safeGenerateNItems(N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n    try {\n      return this.generateNItems(N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n  wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n    const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n    let cloneable = false;\n    const vs = [];\n    const itemsContexts = [];\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      itemsContexts.push(s.context);\n    }\n    if (cloneable) {\n      ArrayArbitrary.makeItCloneable(vs, items);\n    }\n    const context = {\n      shrunkOnce,\n      lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n      itemsContexts,\n      startIndex\n    };\n    return new Value(vs, context);\n  }\n  generate(mrng, biasFactor) {\n    const biasMeta = this.applyBias(mrng, biasFactor);\n    const targetSize = biasMeta.size;\n    const items = this.setBuilder !== undefined ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n    return this.wrapper(items, false, undefined, 0);\n  }\n  applyBias(mrng, biasFactor) {\n    if (biasFactor === undefined) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n    if (this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n    if (mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n    if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n    const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n    const targetSizeValue = integer({\n      min: this.minLength,\n      max: maxBiasedLength\n    }).generate(mrng, undefined);\n    return {\n      size: targetSizeValue.value,\n      biasFactorItems: biasFactor\n    };\n  }\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n      return false;\n    }\n    for (let index = 0; index !== value.length; ++index) {\n      if (!(index in value)) {\n        return false;\n      }\n      if (!this.arb.canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n    const filtered = this.preFilter(value.map(item => new Value(item, undefined)));\n    return filtered.length === value.length;\n  }\n  shrinkItemByItem(value, safeContext, endIndex) {\n    let shrinks = Stream.nil();\n    for (let index = safeContext.startIndex; index < endIndex; ++index) {\n      shrinks = shrinks.join(makeLazy(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map(v => {\n        const beforeCurrent = value.slice(0, index).map((v, i) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n        const afterCurrent = value.slice(index + 1).map((v, i) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n        return [beforeCurrent.concat(v).concat(afterCurrent), undefined, index];\n      })));\n    }\n    return shrinks;\n  }\n  shrinkImpl(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n    const safeContext = context !== undefined ? context : {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: [],\n      startIndex: 0\n    };\n    return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(lengthValue => {\n      const sliceStart = value.length - lengthValue.value;\n      return [value.slice(sliceStart).map((v, index) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])), lengthValue.context, 0];\n    }).join(makeLazy(() => value.length > this.minLength ? this.shrinkItemByItem(value, safeContext, 1) : this.shrinkItemByItem(value, safeContext, value.length))).join(value.length > this.minLength ? makeLazy(() => {\n      const subContext = {\n        shrunkOnce: false,\n        lengthContext: undefined,\n        itemsContexts: safeContext.itemsContexts.slice(1),\n        startIndex: 0\n      };\n      return this.shrinkImpl(value.slice(1), subContext).filter(v => this.minLength <= v[0].length + 1).map(v => {\n        return [[new Value(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined, 0];\n      });\n    }) : Stream.nil());\n  }\n  shrink(value, context) {\n    return this.shrinkImpl(value, context).map(contextualValue => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n  }\n}","map":{"version":3,"names":["Stream","cloneIfNeeded","cloneMethod","integer","makeLazy","Arbitrary","Value","getDepthContextFor","buildSlicedGenerator","biasedMaxLength","minLength","maxLength","Math","floor","log","ArrayArbitrary","constructor","arb","maxGeneratedLength","depthIdentifier","setBuilder","customSlices","lengthArb","min","max","depthContext","preFilter","tab","undefined","s","index","length","tryAdd","getData","makeItCloneable","vs","shrinkables","cloned","idx","push","value","generateNItemsNoDuplicates","N","mrng","biasFactorItems","numSkippedInRow","slicedGenerator","size","current","next","safeGenerateNItemsNoDuplicates","depthImpact","depth","generateNItems","items","attemptExact","safeGenerateNItems","wrapper","itemsRaw","shrunkOnce","itemsRawLengthContext","startIndex","cloneable","itemsContexts","hasToBeCloned","context","lengthContext","generate","biasFactor","biasMeta","applyBias","targetSize","nextInt","maxBiasedLength","targetSizeValue","canShrinkWithoutContext","Array","isArray","filtered","map","item","shrinkItemByItem","safeContext","endIndex","shrinks","nil","join","shrink","v","beforeCurrent","slice","i","afterCurrent","concat","shrinkImpl","drop","lengthValue","sliceStart","subContext","filter","contextualValue"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { buildSlicedGenerator } from './helpers/BuildSlicedGenerator.js';\nfunction biasedMaxLength(minLength, maxLength) {\n    if (minLength === maxLength) {\n        return minLength;\n    }\n    return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\nexport class ArrayArbitrary extends Arbitrary {\n    constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, customSlices) {\n        super();\n        this.arb = arb;\n        this.minLength = minLength;\n        this.maxGeneratedLength = maxGeneratedLength;\n        this.maxLength = maxLength;\n        this.setBuilder = setBuilder;\n        this.customSlices = customSlices;\n        this.lengthArb = integer({ min: minLength, max: maxGeneratedLength });\n        this.depthContext = getDepthContextFor(depthIdentifier);\n    }\n    preFilter(tab) {\n        if (this.setBuilder === undefined) {\n            return tab;\n        }\n        const s = this.setBuilder();\n        for (let index = 0; index !== tab.length; ++index) {\n            s.tryAdd(tab[index]);\n        }\n        return s.getData();\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        let numSkippedInRow = 0;\n        const s = setBuilder();\n        const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);\n        while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n            const current = slicedGenerator.next();\n            if (s.tryAdd(current)) {\n                numSkippedInRow = 0;\n            }\n            else {\n                numSkippedInRow += 1;\n            }\n        }\n        return s.getData();\n    }\n    safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    generateNItems(N, mrng, biasFactorItems) {\n        const items = [];\n        const slicedGenerator = buildSlicedGenerator(this.arb, mrng, this.customSlices, biasFactorItems);\n        slicedGenerator.attemptExact(N);\n        for (let index = 0; index !== N; ++index) {\n            const current = slicedGenerator.next();\n            items.push(current);\n        }\n        return items;\n    }\n    safeGenerateNItems(N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItems(N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n        const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n        let cloneable = false;\n        const vs = [];\n        const itemsContexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            itemsContexts.push(s.context);\n        }\n        if (cloneable) {\n            ArrayArbitrary.makeItCloneable(vs, items);\n        }\n        const context = {\n            shrunkOnce,\n            lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined\n                ? itemsRawLengthContext\n                : undefined,\n            itemsContexts,\n            startIndex,\n        };\n        return new Value(vs, context);\n    }\n    generate(mrng, biasFactor) {\n        const biasMeta = this.applyBias(mrng, biasFactor);\n        const targetSize = biasMeta.size;\n        const items = this.setBuilder !== undefined\n            ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems)\n            : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n        return this.wrapper(items, false, undefined, 0);\n    }\n    applyBias(mrng, biasFactor) {\n        if (biasFactor === undefined) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n        const targetSizeValue = integer({ min: this.minLength, max: maxBiasedLength }).generate(mrng, undefined);\n        return { size: targetSizeValue.value, biasFactorItems: biasFactor };\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n            return false;\n        }\n        for (let index = 0; index !== value.length; ++index) {\n            if (!(index in value)) {\n                return false;\n            }\n            if (!this.arb.canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        const filtered = this.preFilter(value.map((item) => new Value(item, undefined)));\n        return filtered.length === value.length;\n    }\n    shrinkItemByItem(value, safeContext, endIndex) {\n        let shrinks = Stream.nil();\n        for (let index = safeContext.startIndex; index < endIndex; ++index) {\n            shrinks = shrinks.join(makeLazy(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map((v) => {\n                const beforeCurrent = value\n                    .slice(0, index)\n                    .map((v, i) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n                const afterCurrent = value\n                    .slice(index + 1)\n                    .map((v, i) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n                return [\n                    beforeCurrent.concat(v).concat(afterCurrent),\n                    undefined,\n                    index,\n                ];\n            })));\n        }\n        return shrinks;\n    }\n    shrinkImpl(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        const safeContext = context !== undefined\n            ? context\n            : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [], startIndex: 0 };\n        return (this.lengthArb\n            .shrink(value.length, safeContext.lengthContext)\n            .drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0)\n            .map((lengthValue) => {\n            const sliceStart = value.length - lengthValue.value;\n            return [\n                value\n                    .slice(sliceStart)\n                    .map((v, index) => new Value(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])),\n                lengthValue.context,\n                0,\n            ];\n        })\n            .join(makeLazy(() => value.length > this.minLength\n            ? this.shrinkItemByItem(value, safeContext, 1)\n            : this.shrinkItemByItem(value, safeContext, value.length)))\n            .join(value.length > this.minLength\n            ? makeLazy(() => {\n                const subContext = {\n                    shrunkOnce: false,\n                    lengthContext: undefined,\n                    itemsContexts: safeContext.itemsContexts.slice(1),\n                    startIndex: 0,\n                };\n                return this.shrinkImpl(value.slice(1), subContext)\n                    .filter((v) => this.minLength <= v[0].length + 1)\n                    .map((v) => {\n                    return [\n                        [new Value(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]),\n                        undefined,\n                        0,\n                    ];\n                });\n            })\n            : Stream.nil()));\n    }\n    shrink(value, context) {\n        return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
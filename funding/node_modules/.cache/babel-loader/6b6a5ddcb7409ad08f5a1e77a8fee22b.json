{"ast":null,"code":"export const MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexport const MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexport const EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\nexport function decomposeFloat(f) {\n  const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n  for (let exponent = -126; exponent !== 128; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n    if (Math.abs(f) <= maxForExponent) {\n      return {\n        exponent,\n        significand: f / powExponent\n      };\n    }\n  }\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\nfunction indexInFloatFromDecomp(exponent, significand) {\n  if (exponent === -126) {\n    return significand * 0x800000;\n  }\n  return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\nexport function floatToIndex(f) {\n  if (f === Number.POSITIVE_INFINITY) {\n    return INDEX_POSITIVE_INFINITY;\n  }\n  if (f === Number.NEGATIVE_INFINITY) {\n    return INDEX_NEGATIVE_INFINITY;\n  }\n  const decomp = decomposeFloat(f);\n  const exponent = decomp.exponent;\n  const significand = decomp.significand;\n  if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n    return Number.NaN;\n  }\n  if (f > 0 || f === 0 && 1 / f === Number.POSITIVE_INFINITY) {\n    return indexInFloatFromDecomp(exponent, significand);\n  } else {\n    return -indexInFloatFromDecomp(exponent, -significand) - 1;\n  }\n}\nexport function indexToFloat(index) {\n  if (index < 0) {\n    return -indexToFloat(-index - 1);\n  }\n  if (index === INDEX_POSITIVE_INFINITY) {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (index < 0x1000000) {\n    return index * 2 ** -149;\n  }\n  const postIndex = index - 0x1000000;\n  const exponent = -125 + (postIndex >> 23);\n  const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n  return significand * 2 ** exponent;\n}","map":{"version":3,"names":["MIN_VALUE_32","MAX_VALUE_32","EPSILON_32","INDEX_POSITIVE_INFINITY","INDEX_NEGATIVE_INFINITY","decomposeFloat","f","maxSignificand","exponent","powExponent","maxForExponent","Math","abs","significand","Number","NaN","indexInFloatFromDecomp","floatToIndex","POSITIVE_INFINITY","NEGATIVE_INFINITY","decomp","isNaN","isInteger","indexToFloat","index","postIndex"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/FloatHelpers.js"],"sourcesContent":["export const MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexport const MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexport const EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\nexport function decomposeFloat(f) {\n    const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n    for (let exponent = -126; exponent !== 128; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(f) <= maxForExponent) {\n            return { exponent, significand: f / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nfunction indexInFloatFromDecomp(exponent, significand) {\n    if (exponent === -126) {\n        return significand * 0x800000;\n    }\n    return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\nexport function floatToIndex(f) {\n    if (f === Number.POSITIVE_INFINITY) {\n        return INDEX_POSITIVE_INFINITY;\n    }\n    if (f === Number.NEGATIVE_INFINITY) {\n        return INDEX_NEGATIVE_INFINITY;\n    }\n    const decomp = decomposeFloat(f);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n        return Number.NaN;\n    }\n    if (f > 0 || (f === 0 && 1 / f === Number.POSITIVE_INFINITY)) {\n        return indexInFloatFromDecomp(exponent, significand);\n    }\n    else {\n        return -indexInFloatFromDecomp(exponent, -significand) - 1;\n    }\n}\nexport function indexToFloat(index) {\n    if (index < 0) {\n        return -indexToFloat(-index - 1);\n    }\n    if (index === INDEX_POSITIVE_INFINITY) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index < 0x1000000) {\n        return index * 2 ** -149;\n    }\n    const postIndex = index - 0x1000000;\n    const exponent = -125 + (postIndex >> 23);\n    const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n    return significand * 2 ** exponent;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
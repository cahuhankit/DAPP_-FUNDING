{"ast":null,"code":"import { bigUintN } from '../bigUintN.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends Arbitrary {\n  constructor(stringArb, toggleCase, untoggleAll) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n    this.untoggleAll = untoggleAll;\n  }\n  buildContextFor(rawStringValue, flagsValue) {\n    return {\n      rawString: rawStringValue.value,\n      rawStringContext: rawStringValue.context,\n      flags: flagsValue.value,\n      flagsContext: flagsValue.context\n    };\n  }\n  generate(mrng, biasFactor) {\n    const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringValue.value];\n    const togglePositions = computeTogglePositions(chars, this.toggleCase);\n    const flagsArb = bigUintN(togglePositions.length);\n    const flagsValue = flagsArb.generate(mrng, undefined);\n    applyFlagsOnChars(chars, flagsValue.value, togglePositions, this.toggleCase);\n    return new Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n  }\n  canShrinkWithoutContext(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n    return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n  }\n  shrink(value, context) {\n    let contextSafe;\n    if (context !== undefined) {\n      contextSafe = context;\n    } else {\n      if (this.untoggleAll !== undefined) {\n        const untoggledValue = this.untoggleAll(value);\n        const valueChars = [...value];\n        const untoggledValueChars = [...untoggledValue];\n        const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n        contextSafe = {\n          rawString: untoggledValue,\n          rawStringContext: undefined,\n          flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n          flagsContext: undefined\n        };\n      } else {\n        contextSafe = {\n          rawString: value,\n          rawStringContext: undefined,\n          flags: BigInt(0),\n          flagsContext: undefined\n        };\n      }\n    }\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringValue => {\n      const nChars = [...nRawStringValue.value];\n      const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n      const nFlags = computeNextFlags(flags, nTogglePositions.length);\n      applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n      return new Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value(nFlags, undefined)));\n    }).join(makeLazy(() => {\n      const chars = [...rawString];\n      const togglePositions = computeTogglePositions(chars, this.toggleCase);\n      return bigUintN(togglePositions.length).shrink(flags, contextSafe.flagsContext).map(nFlagsValue => {\n        const nChars = chars.slice();\n        applyFlagsOnChars(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n        return new Value(nChars.join(''), this.buildContextFor(new Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n      });\n    }));\n  }\n}","map":{"version":3,"names":["bigUintN","Arbitrary","Value","makeLazy","applyFlagsOnChars","computeFlagsFromChars","computeNextFlags","computeTogglePositions","MixedCaseArbitrary","constructor","stringArb","toggleCase","untoggleAll","buildContextFor","rawStringValue","flagsValue","rawString","value","rawStringContext","context","flags","flagsContext","generate","mrng","biasFactor","chars","togglePositions","flagsArb","length","undefined","join","canShrinkWithoutContext","shrink","contextSafe","untoggledValue","valueChars","untoggledValueChars","BigInt","map","nRawStringValue","nChars","nTogglePositions","nFlags","nFlagsValue","slice"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/MixedCaseArbitrary.js"],"sourcesContent":["import { bigUintN } from '../bigUintN.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions, } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends Arbitrary {\n    constructor(stringArb, toggleCase, untoggleAll) {\n        super();\n        this.stringArb = stringArb;\n        this.toggleCase = toggleCase;\n        this.untoggleAll = untoggleAll;\n    }\n    buildContextFor(rawStringValue, flagsValue) {\n        return {\n            rawString: rawStringValue.value,\n            rawStringContext: rawStringValue.context,\n            flags: flagsValue.value,\n            flagsContext: flagsValue.context,\n        };\n    }\n    generate(mrng, biasFactor) {\n        const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n        const chars = [...rawStringValue.value];\n        const togglePositions = computeTogglePositions(chars, this.toggleCase);\n        const flagsArb = bigUintN(togglePositions.length);\n        const flagsValue = flagsArb.generate(mrng, undefined);\n        applyFlagsOnChars(chars, flagsValue.value, togglePositions, this.toggleCase);\n        return new Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n    }\n    canShrinkWithoutContext(value) {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        return this.untoggleAll !== undefined\n            ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value))\n            :\n                this.stringArb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        let contextSafe;\n        if (context !== undefined) {\n            contextSafe = context;\n        }\n        else {\n            if (this.untoggleAll !== undefined) {\n                const untoggledValue = this.untoggleAll(value);\n                const valueChars = [...value];\n                const untoggledValueChars = [...untoggledValue];\n                const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n                contextSafe = {\n                    rawString: untoggledValue,\n                    rawStringContext: undefined,\n                    flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n                    flagsContext: undefined,\n                };\n            }\n            else {\n                contextSafe = {\n                    rawString: value,\n                    rawStringContext: undefined,\n                    flags: BigInt(0),\n                    flagsContext: undefined,\n                };\n            }\n        }\n        const rawString = contextSafe.rawString;\n        const flags = contextSafe.flags;\n        return this.stringArb\n            .shrink(rawString, contextSafe.rawStringContext)\n            .map((nRawStringValue) => {\n            const nChars = [...nRawStringValue.value];\n            const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n            const nFlags = computeNextFlags(flags, nTogglePositions.length);\n            applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n            return new Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value(nFlags, undefined)));\n        })\n            .join(makeLazy(() => {\n            const chars = [...rawString];\n            const togglePositions = computeTogglePositions(chars, this.toggleCase);\n            return bigUintN(togglePositions.length)\n                .shrink(flags, contextSafe.flagsContext)\n                .map((nFlagsValue) => {\n                const nChars = chars.slice();\n                applyFlagsOnChars(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n                return new Value(nChars.join(''), this.buildContextFor(new Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n            });\n        }));\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,+CAA+C;AACzE,SAASC,KAAK,QAAQ,2CAA2C;AACjE,SAASC,QAAQ,QAAQ,sCAAsC;AAC/D,SAASC,iBAAiB,EAAEC,qBAAqB,EAAEC,gBAAgB,EAAEC,sBAAsB,QAAS,0BAA0B;AAC9H,OAAO,MAAMC,kBAAkB,SAASP,SAAS,CAAC;EAC9CQ,WAAW,CAACC,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAE;IAC5C,KAAK,EAAE;IACP,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAC,eAAe,CAACC,cAAc,EAAEC,UAAU,EAAE;IACxC,OAAO;MACHC,SAAS,EAAEF,cAAc,CAACG,KAAK;MAC/BC,gBAAgB,EAAEJ,cAAc,CAACK,OAAO;MACxCC,KAAK,EAAEL,UAAU,CAACE,KAAK;MACvBI,YAAY,EAAEN,UAAU,CAACI;IAC7B,CAAC;EACL;EACAG,QAAQ,CAACC,IAAI,EAAEC,UAAU,EAAE;IACvB,MAAMV,cAAc,GAAG,IAAI,CAACJ,SAAS,CAACY,QAAQ,CAACC,IAAI,EAAEC,UAAU,CAAC;IAChE,MAAMC,KAAK,GAAG,CAAC,GAAGX,cAAc,CAACG,KAAK,CAAC;IACvC,MAAMS,eAAe,GAAGnB,sBAAsB,CAACkB,KAAK,EAAE,IAAI,CAACd,UAAU,CAAC;IACtE,MAAMgB,QAAQ,GAAG3B,QAAQ,CAAC0B,eAAe,CAACE,MAAM,CAAC;IACjD,MAAMb,UAAU,GAAGY,QAAQ,CAACL,QAAQ,CAACC,IAAI,EAAEM,SAAS,CAAC;IACrDzB,iBAAiB,CAACqB,KAAK,EAAEV,UAAU,CAACE,KAAK,EAAES,eAAe,EAAE,IAAI,CAACf,UAAU,CAAC;IAC5E,OAAO,IAAIT,KAAK,CAACuB,KAAK,CAACK,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACjB,eAAe,CAACC,cAAc,EAAEC,UAAU,CAAC,CAAC;EACtF;EACAgB,uBAAuB,CAACd,KAAK,EAAE;IAC3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAACL,WAAW,KAAKiB,SAAS,GAC/B,IAAI,CAACnB,SAAS,CAACqB,uBAAuB,CAAC,IAAI,CAACnB,WAAW,CAACK,KAAK,CAAC,CAAC,GAE7D,IAAI,CAACP,SAAS,CAACqB,uBAAuB,CAACd,KAAK,CAAC;EACzD;EACAe,MAAM,CAACf,KAAK,EAAEE,OAAO,EAAE;IACnB,IAAIc,WAAW;IACf,IAAId,OAAO,KAAKU,SAAS,EAAE;MACvBI,WAAW,GAAGd,OAAO;IACzB,CAAC,MACI;MACD,IAAI,IAAI,CAACP,WAAW,KAAKiB,SAAS,EAAE;QAChC,MAAMK,cAAc,GAAG,IAAI,CAACtB,WAAW,CAACK,KAAK,CAAC;QAC9C,MAAMkB,UAAU,GAAG,CAAC,GAAGlB,KAAK,CAAC;QAC7B,MAAMmB,mBAAmB,GAAG,CAAC,GAAGF,cAAc,CAAC;QAC/C,MAAMR,eAAe,GAAGnB,sBAAsB,CAAC6B,mBAAmB,EAAE,IAAI,CAACzB,UAAU,CAAC;QACpFsB,WAAW,GAAG;UACVjB,SAAS,EAAEkB,cAAc;UACzBhB,gBAAgB,EAAEW,SAAS;UAC3BT,KAAK,EAAEf,qBAAqB,CAAC+B,mBAAmB,EAAED,UAAU,EAAET,eAAe,CAAC;UAC9EL,YAAY,EAAEQ;QAClB,CAAC;MACL,CAAC,MACI;QACDI,WAAW,GAAG;UACVjB,SAAS,EAAEC,KAAK;UAChBC,gBAAgB,EAAEW,SAAS;UAC3BT,KAAK,EAAEiB,MAAM,CAAC,CAAC,CAAC;UAChBhB,YAAY,EAAEQ;QAClB,CAAC;MACL;IACJ;IACA,MAAMb,SAAS,GAAGiB,WAAW,CAACjB,SAAS;IACvC,MAAMI,KAAK,GAAGa,WAAW,CAACb,KAAK;IAC/B,OAAO,IAAI,CAACV,SAAS,CAChBsB,MAAM,CAAChB,SAAS,EAAEiB,WAAW,CAACf,gBAAgB,CAAC,CAC/CoB,GAAG,CAAEC,eAAe,IAAK;MAC1B,MAAMC,MAAM,GAAG,CAAC,GAAGD,eAAe,CAACtB,KAAK,CAAC;MACzC,MAAMwB,gBAAgB,GAAGlC,sBAAsB,CAACiC,MAAM,EAAE,IAAI,CAAC7B,UAAU,CAAC;MACxE,MAAM+B,MAAM,GAAGpC,gBAAgB,CAACc,KAAK,EAAEqB,gBAAgB,CAACb,MAAM,CAAC;MAC/DxB,iBAAiB,CAACoC,MAAM,EAAEE,MAAM,EAAED,gBAAgB,EAAE,IAAI,CAAC9B,UAAU,CAAC;MACpE,OAAO,IAAIT,KAAK,CAACsC,MAAM,CAACV,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACjB,eAAe,CAAC0B,eAAe,EAAE,IAAIrC,KAAK,CAACwC,MAAM,EAAEb,SAAS,CAAC,CAAC,CAAC;IAC1G,CAAC,CAAC,CACGC,IAAI,CAAC3B,QAAQ,CAAC,MAAM;MACrB,MAAMsB,KAAK,GAAG,CAAC,GAAGT,SAAS,CAAC;MAC5B,MAAMU,eAAe,GAAGnB,sBAAsB,CAACkB,KAAK,EAAE,IAAI,CAACd,UAAU,CAAC;MACtE,OAAOX,QAAQ,CAAC0B,eAAe,CAACE,MAAM,CAAC,CAClCI,MAAM,CAACZ,KAAK,EAAEa,WAAW,CAACZ,YAAY,CAAC,CACvCiB,GAAG,CAAEK,WAAW,IAAK;QACtB,MAAMH,MAAM,GAAGf,KAAK,CAACmB,KAAK,EAAE;QAC5BxC,iBAAiB,CAACoC,MAAM,EAAEG,WAAW,CAAC1B,KAAK,EAAES,eAAe,EAAE,IAAI,CAACf,UAAU,CAAC;QAC9E,OAAO,IAAIT,KAAK,CAACsC,MAAM,CAACV,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAACjB,eAAe,CAAC,IAAIX,KAAK,CAACc,SAAS,EAAEiB,WAAW,CAACf,gBAAgB,CAAC,EAAEyB,WAAW,CAAC,CAAC;MAC5H,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;EACP;AACJ"},"metadata":{},"sourceType":"module"}
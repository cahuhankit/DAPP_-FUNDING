{"ast":null,"code":"import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(tuple(ka, va), {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    selector: t => t[0],\n    depthIdentifier\n  }).map(arrayToMapMapper, arrayToMapUnmapper);\n}\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(tuple(ka, va), {\n    maxLength: maxKeys,\n    size,\n    selector: t => t[0],\n    depthIdentifier\n  }).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper);\n}\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(va, {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    depthIdentifier\n  }).map(arrayToSetMapper, arrayToSetUnmapper);\n}\nfunction prototypeLessOf(objectArb) {\n  return objectArb.map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper);\n}\nfunction typedArray(constraints) {\n  return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\nexport function anyArbitraryBuilder(constraints) {\n  const arbitrariesForBase = constraints.values;\n  const depthSize = constraints.depthSize;\n  const depthIdentifier = createDepthIdentifier();\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n  const size = constraints.size;\n  const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n  return letrec(tie => ({\n    anything: oneof({\n      maxDepth,\n      depthSize,\n      depthIdentifier\n    }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map(o => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({\n      maxLength: maxKeys,\n      size\n    })] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), {\n      maxNumElements: maxKeys,\n      size,\n      depthIdentifier\n    })] : [])),\n    keys: constraints.withObjectString ? oneof({\n      arbitrary: constraints.key,\n      weight: 10\n    }, {\n      arbitrary: tie('anything').map(o => stringify(o)),\n      weight: 1\n    }) : constraints.key,\n    array: array(tie('anything'), {\n      maxLength: maxKeys,\n      size,\n      depthIdentifier\n    }),\n    set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n    map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n    object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier)\n  })).anything;\n}","map":{"version":3,"names":["stringify","array","oneof","tuple","bigInt","date","float32Array","float64Array","int16Array","int32Array","int8Array","uint16Array","uint32Array","uint8Array","uint8ClampedArray","sparseArray","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","arrayToMapMapper","arrayToMapUnmapper","arrayToSetMapper","arrayToSetUnmapper","objectToPrototypeLessMapper","objectToPrototypeLessUnmapper","letrec","uniqueArray","createDepthIdentifier","mapOf","ka","va","maxKeys","size","depthIdentifier","maxLength","comparator","selector","t","map","dictOf","setOf","prototypeLessOf","objectArb","typedArray","constraints","anyArbitraryBuilder","arbitrariesForBase","values","depthSize","maxDepth","baseArb","withBigInt","withDate","tie","anything","withMap","withSet","withObjectString","o","withNullPrototype","withTypedArray","withSparseArray","maxNumElements","keys","arbitrary","key","weight","set","object"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js"],"sourcesContent":["import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(tuple(ka, va), {\n        maxLength: maxKeys,\n        size,\n        comparator: 'SameValueZero',\n        selector: (t) => t[0],\n        depthIdentifier,\n    }).map(arrayToMapMapper, arrayToMapUnmapper);\n}\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(tuple(ka, va), {\n        maxLength: maxKeys,\n        size,\n        selector: (t) => t[0],\n        depthIdentifier,\n    }).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper);\n}\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(va, { maxLength: maxKeys, size, comparator: 'SameValueZero', depthIdentifier }).map(arrayToSetMapper, arrayToSetUnmapper);\n}\nfunction prototypeLessOf(objectArb) {\n    return objectArb.map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper);\n}\nfunction typedArray(constraints) {\n    return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\nexport function anyArbitraryBuilder(constraints) {\n    const arbitrariesForBase = constraints.values;\n    const depthSize = constraints.depthSize;\n    const depthIdentifier = createDepthIdentifier();\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const size = constraints.size;\n    const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n    return letrec((tie) => ({\n        anything: oneof({ maxDepth, depthSize, depthIdentifier }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({ maxLength: maxKeys, size })] : []), ...(constraints.withSparseArray\n            ? [sparseArray(tie('anything'), { maxNumElements: maxKeys, size, depthIdentifier })]\n            : [])),\n        keys: constraints.withObjectString\n            ? oneof({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie('anything').map((o) => stringify(o)), weight: 1 })\n            : constraints.key,\n        array: array(tie('anything'), { maxLength: maxKeys, size, depthIdentifier }),\n        set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n        map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n        object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier),\n    })).anything;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
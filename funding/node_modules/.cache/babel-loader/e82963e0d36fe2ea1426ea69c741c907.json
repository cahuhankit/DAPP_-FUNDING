{"ast":null,"code":"export function partsToUrlMapper(data) {\n  const [scheme, authority, path] = data;\n  const query = data[3] === null ? '' : `?${data[3]}`;\n  const fragments = data[4] === null ? '' : `#${data[4]}`;\n  return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nexport function partsToUrlUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Incompatible value received: type');\n  }\n  const m = UrlSplitRegex.exec(value);\n  if (m === null) {\n    throw new Error('Incompatible value received');\n  }\n  const scheme = m[1];\n  const authority = m[2];\n  const path = m[3];\n  const query = m[4];\n  const fragments = m[5];\n  return [scheme, authority, path, query !== undefined ? query.substring(1) : null, fragments !== undefined ? fragments.substring(1) : null];\n}","map":{"version":3,"names":["partsToUrlMapper","data","scheme","authority","path","query","fragments","UrlSplitRegex","partsToUrlUnmapper","value","Error","m","exec","undefined","substring"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/PartsToUrl.js"],"sourcesContent":["export function partsToUrlMapper(data) {\n    const [scheme, authority, path] = data;\n    const query = data[3] === null ? '' : `?${data[3]}`;\n    const fragments = data[4] === null ? '' : `#${data[4]}`;\n    return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nexport function partsToUrlUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Incompatible value received: type');\n    }\n    const m = UrlSplitRegex.exec(value);\n    if (m === null) {\n        throw new Error('Incompatible value received');\n    }\n    const scheme = m[1];\n    const authority = m[2];\n    const path = m[3];\n    const query = m[4];\n    const fragments = m[5];\n    return [\n        scheme,\n        authority,\n        path,\n        query !== undefined ? query.substring(1) : null,\n        fragments !== undefined ? fragments.substring(1) : null,\n    ];\n}\n"],"mappings":"AAAA,OAAO,SAASA,gBAAgB,CAACC,IAAI,EAAE;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,EAAEC,IAAI,CAAC,GAAGH,IAAI;EACtC,MAAMI,KAAK,GAAGJ,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAI,IAAGA,IAAI,CAAC,CAAC,CAAE,EAAC;EACnD,MAAMK,SAAS,GAAGL,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAI,IAAGA,IAAI,CAAC,CAAC,CAAE,EAAC;EACvD,OAAQ,GAAEC,MAAO,MAAKC,SAAU,GAAEC,IAAK,GAAEC,KAAM,GAAEC,SAAU,EAAC;AAChE;AACA,MAAMC,aAAa,GAAG,+HAA+H;AACrJ,OAAO,SAASC,kBAAkB,CAACC,KAAK,EAAE;EACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACxD;EACA,MAAMC,CAAC,GAAGJ,aAAa,CAACK,IAAI,CAACH,KAAK,CAAC;EACnC,IAAIE,CAAC,KAAK,IAAI,EAAE;IACZ,MAAM,IAAID,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,MAAMR,MAAM,GAAGS,CAAC,CAAC,CAAC,CAAC;EACnB,MAAMR,SAAS,GAAGQ,CAAC,CAAC,CAAC,CAAC;EACtB,MAAMP,IAAI,GAAGO,CAAC,CAAC,CAAC,CAAC;EACjB,MAAMN,KAAK,GAAGM,CAAC,CAAC,CAAC,CAAC;EAClB,MAAML,SAAS,GAAGK,CAAC,CAAC,CAAC,CAAC;EACtB,OAAO,CACHT,MAAM,EACNC,SAAS,EACTC,IAAI,EACJC,KAAK,KAAKQ,SAAS,GAAGR,KAAK,CAACS,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,EAC/CR,SAAS,KAAKO,SAAS,GAAGP,SAAS,CAACQ,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAC1D;AACL"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n    if (hasToStringMethod(cmd)) {\n      const method = cmd[toStringMethod];\n      this[toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n    if (hasAsyncToStringMethod(cmd)) {\n      const method = cmd[asyncToStringMethod];\n      this[asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n  check(m) {\n    return this.cmd.check(m);\n  }\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n  clone() {\n    if (hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n  toString() {\n    return this.cmd.toString();\n  }\n}","map":{"version":3,"names":["asyncToStringMethod","hasAsyncToStringMethod","hasToStringMethod","toStringMethod","cloneMethod","hasCloneMethod","CommandWrapper","constructor","cmd","hasRan","method","call","check","m","run","r","clone","toString"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/check/model/commands/CommandWrapper.js"],"sourcesContent":["import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod, } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n    constructor(cmd) {\n        this.cmd = cmd;\n        this.hasRan = false;\n        if (hasToStringMethod(cmd)) {\n            const method = cmd[toStringMethod];\n            this[toStringMethod] = function toStringMethod() {\n                return method.call(cmd);\n            };\n        }\n        if (hasAsyncToStringMethod(cmd)) {\n            const method = cmd[asyncToStringMethod];\n            this[asyncToStringMethod] = function asyncToStringMethod() {\n                return method.call(cmd);\n            };\n        }\n    }\n    check(m) {\n        return this.cmd.check(m);\n    }\n    run(m, r) {\n        this.hasRan = true;\n        return this.cmd.run(m, r);\n    }\n    clone() {\n        if (hasCloneMethod(this.cmd))\n            return new CommandWrapper(this.cmd[cloneMethod]());\n        return new CommandWrapper(this.cmd);\n    }\n    toString() {\n        return this.cmd.toString();\n    }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,sBAAsB,EAAEC,iBAAiB,EAAEC,cAAc,QAAS,6BAA6B;AAC7H,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,OAAO,MAAMC,cAAc,CAAC;EACxBC,WAAW,CAACC,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAIP,iBAAiB,CAACM,GAAG,CAAC,EAAE;MACxB,MAAME,MAAM,GAAGF,GAAG,CAACL,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,CAAC,GAAG,SAASA,cAAc,GAAG;QAC7C,OAAOO,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC;MAC3B,CAAC;IACL;IACA,IAAIP,sBAAsB,CAACO,GAAG,CAAC,EAAE;MAC7B,MAAME,MAAM,GAAGF,GAAG,CAACR,mBAAmB,CAAC;MACvC,IAAI,CAACA,mBAAmB,CAAC,GAAG,SAASA,mBAAmB,GAAG;QACvD,OAAOU,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC;MAC3B,CAAC;IACL;EACJ;EACAI,KAAK,CAACC,CAAC,EAAE;IACL,OAAO,IAAI,CAACL,GAAG,CAACI,KAAK,CAACC,CAAC,CAAC;EAC5B;EACAC,GAAG,CAACD,CAAC,EAAEE,CAAC,EAAE;IACN,IAAI,CAACN,MAAM,GAAG,IAAI;IAClB,OAAO,IAAI,CAACD,GAAG,CAACM,GAAG,CAACD,CAAC,EAAEE,CAAC,CAAC;EAC7B;EACAC,KAAK,GAAG;IACJ,IAAIX,cAAc,CAAC,IAAI,CAACG,GAAG,CAAC,EACxB,OAAO,IAAIF,cAAc,CAAC,IAAI,CAACE,GAAG,CAACJ,WAAW,CAAC,EAAE,CAAC;IACtD,OAAO,IAAIE,cAAc,CAAC,IAAI,CAACE,GAAG,CAAC;EACvC;EACAS,QAAQ,GAAG;IACP,OAAO,IAAI,CAACT,GAAG,CAACS,QAAQ,EAAE;EAC9B;AACJ"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { double } from './double.js';\nimport { array } from './array.js';\nfunction toTypedMapper(data) {\n  return Float64Array.from(data);\n}\nfunction fromTypedUnmapper(value) {\n  if (!(value instanceof Float64Array)) throw new Error('Unexpected type');\n  return [...value];\n}\nexport function float64Array() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return array(double(constraints), constraints).map(toTypedMapper, fromTypedUnmapper);\n}","map":{"version":3,"names":["double","array","toTypedMapper","data","Float64Array","from","fromTypedUnmapper","value","Error","float64Array","constraints","map"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/float64Array.js"],"sourcesContent":["import { double } from './double.js';\nimport { array } from './array.js';\nfunction toTypedMapper(data) {\n    return Float64Array.from(data);\n}\nfunction fromTypedUnmapper(value) {\n    if (!(value instanceof Float64Array))\n        throw new Error('Unexpected type');\n    return [...value];\n}\nexport function float64Array(constraints = {}) {\n    return array(double(constraints), constraints).map(toTypedMapper, fromTypedUnmapper);\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,aAAa,CAACC,IAAI,EAAE;EACzB,OAAOC,YAAY,CAACC,IAAI,CAACF,IAAI,CAAC;AAClC;AACA,SAASG,iBAAiB,CAACC,KAAK,EAAE;EAC9B,IAAI,EAAEA,KAAK,YAAYH,YAAY,CAAC,EAChC,MAAM,IAAII,KAAK,CAAC,iBAAiB,CAAC;EACtC,OAAO,CAAC,GAAGD,KAAK,CAAC;AACrB;AACA,OAAO,SAASE,YAAY,GAAmB;EAAA,IAAlBC,WAAW,uEAAG,CAAC,CAAC;EACzC,OAAOT,KAAK,CAACD,MAAM,CAACU,WAAW,CAAC,EAAEA,WAAW,CAAC,CAACC,GAAG,CAACT,aAAa,EAAEI,iBAAiB,CAAC;AACxF"},"metadata":{},"sourceType":"module"}
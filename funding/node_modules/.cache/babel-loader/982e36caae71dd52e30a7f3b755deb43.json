{"ast":null,"code":"export function natToStringifiedNatMapper(options) {\n  const [style, v] = options;\n  switch (style) {\n    case 'oct':\n      return `0${Number(v).toString(8)}`;\n    case 'hex':\n      return `0x${Number(v).toString(16)}`;\n    case 'dec':\n    default:\n      return `${v}`;\n  }\n}\nexport function tryParseStringifiedNat(stringValue, radix) {\n  const parsedNat = Number.parseInt(stringValue, radix);\n  if (parsedNat.toString(radix) !== stringValue) {\n    throw new Error('Invalid value');\n  }\n  return parsedNat;\n}\nexport function natToStringifiedNatUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Invalid type');\n  }\n  if (value.length >= 2 && value[0] === '0') {\n    if (value[1] === 'x') {\n      return ['hex', tryParseStringifiedNat(value.substr(2), 16)];\n    }\n    return ['oct', tryParseStringifiedNat(value.substr(1), 8)];\n  }\n  return ['dec', tryParseStringifiedNat(value, 10)];\n}","map":{"version":3,"names":["natToStringifiedNatMapper","options","style","v","Number","toString","tryParseStringifiedNat","stringValue","radix","parsedNat","parseInt","Error","natToStringifiedNatUnmapper","value","length","substr"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/NatToStringifiedNat.js"],"sourcesContent":["export function natToStringifiedNatMapper(options) {\n    const [style, v] = options;\n    switch (style) {\n        case 'oct':\n            return `0${Number(v).toString(8)}`;\n        case 'hex':\n            return `0x${Number(v).toString(16)}`;\n        case 'dec':\n        default:\n            return `${v}`;\n    }\n}\nexport function tryParseStringifiedNat(stringValue, radix) {\n    const parsedNat = Number.parseInt(stringValue, radix);\n    if (parsedNat.toString(radix) !== stringValue) {\n        throw new Error('Invalid value');\n    }\n    return parsedNat;\n}\nexport function natToStringifiedNatUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Invalid type');\n    }\n    if (value.length >= 2 && value[0] === '0') {\n        if (value[1] === 'x') {\n            return ['hex', tryParseStringifiedNat(value.substr(2), 16)];\n        }\n        return ['oct', tryParseStringifiedNat(value.substr(1), 8)];\n    }\n    return ['dec', tryParseStringifiedNat(value, 10)];\n}\n"],"mappings":"AAAA,OAAO,SAASA,yBAAyB,CAACC,OAAO,EAAE;EAC/C,MAAM,CAACC,KAAK,EAAEC,CAAC,CAAC,GAAGF,OAAO;EAC1B,QAAQC,KAAK;IACT,KAAK,KAAK;MACN,OAAQ,IAAGE,MAAM,CAACD,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAE,EAAC;IACtC,KAAK,KAAK;MACN,OAAQ,KAAID,MAAM,CAACD,CAAC,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAE,EAAC;IACxC,KAAK,KAAK;IACV;MACI,OAAQ,GAAEF,CAAE,EAAC;EAAC;AAE1B;AACA,OAAO,SAASG,sBAAsB,CAACC,WAAW,EAAEC,KAAK,EAAE;EACvD,MAAMC,SAAS,GAAGL,MAAM,CAACM,QAAQ,CAACH,WAAW,EAAEC,KAAK,CAAC;EACrD,IAAIC,SAAS,CAACJ,QAAQ,CAACG,KAAK,CAAC,KAAKD,WAAW,EAAE;IAC3C,MAAM,IAAII,KAAK,CAAC,eAAe,CAAC;EACpC;EACA,OAAOF,SAAS;AACpB;AACA,OAAO,SAASG,2BAA2B,CAACC,KAAK,EAAE;EAC/C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIF,KAAK,CAAC,cAAc,CAAC;EACnC;EACA,IAAIE,KAAK,CAACC,MAAM,IAAI,CAAC,IAAID,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACvC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAClB,OAAO,CAAC,KAAK,EAAEP,sBAAsB,CAACO,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/D;IACA,OAAO,CAAC,KAAK,EAAET,sBAAsB,CAACO,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D;EACA,OAAO,CAAC,KAAK,EAAET,sBAAsB,CAACO,KAAK,EAAE,EAAE,CAAC,CAAC;AACrD"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends Arbitrary {\n  constructor(values) {\n    super();\n    this.values = values;\n  }\n  generate(mrng, _biasFactor) {\n    const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n    const value = this.values[idx];\n    if (!hasCloneMethod(value)) {\n      return new Value(value, idx);\n    }\n    return new Value(value, idx, () => value[cloneMethod]());\n  }\n  canShrinkWithoutContext(value) {\n    for (let idx = 0; idx !== this.values.length; ++idx) {\n      if (Object.is(this.values[idx], value)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  shrink(value, context) {\n    if (context === 0 || Object.is(value, this.values[0])) {\n      return Stream.nil();\n    }\n    return Stream.of(new Value(this.values[0], 0));\n  }\n}","map":{"version":3,"names":["Stream","Arbitrary","Value","cloneMethod","hasCloneMethod","ConstantArbitrary","constructor","values","generate","mrng","_biasFactor","idx","length","nextInt","value","canShrinkWithoutContext","Object","is","shrink","context","nil","of"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/ConstantArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends Arbitrary {\n    constructor(values) {\n        super();\n        this.values = values;\n    }\n    generate(mrng, _biasFactor) {\n        const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n        const value = this.values[idx];\n        if (!hasCloneMethod(value)) {\n            return new Value(value, idx);\n        }\n        return new Value(value, idx, () => value[cloneMethod]());\n    }\n    canShrinkWithoutContext(value) {\n        for (let idx = 0; idx !== this.values.length; ++idx) {\n            if (Object.is(this.values[idx], value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (context === 0 || Object.is(value, this.values[0])) {\n            return Stream.nil();\n        }\n        return Stream.of(new Value(this.values[0], 0));\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,SAAS,QAAQ,+CAA+C;AACzE,SAASC,KAAK,QAAQ,2CAA2C;AACjE,SAASC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACpE,OAAO,MAAMC,iBAAiB,SAASJ,SAAS,CAAC;EAC7CK,WAAW,CAACC,MAAM,EAAE;IAChB,KAAK,EAAE;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACAC,QAAQ,CAACC,IAAI,EAAEC,WAAW,EAAE;IACxB,MAAMC,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACK,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC,EAAE,IAAI,CAACN,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC;IAClF,MAAME,KAAK,GAAG,IAAI,CAACP,MAAM,CAACI,GAAG,CAAC;IAC9B,IAAI,CAACP,cAAc,CAACU,KAAK,CAAC,EAAE;MACxB,OAAO,IAAIZ,KAAK,CAACY,KAAK,EAAEH,GAAG,CAAC;IAChC;IACA,OAAO,IAAIT,KAAK,CAACY,KAAK,EAAEH,GAAG,EAAE,MAAMG,KAAK,CAACX,WAAW,CAAC,EAAE,CAAC;EAC5D;EACAY,uBAAuB,CAACD,KAAK,EAAE;IAC3B,KAAK,IAAIH,GAAG,GAAG,CAAC,EAAEA,GAAG,KAAK,IAAI,CAACJ,MAAM,CAACK,MAAM,EAAE,EAAED,GAAG,EAAE;MACjD,IAAIK,MAAM,CAACC,EAAE,CAAC,IAAI,CAACV,MAAM,CAACI,GAAG,CAAC,EAAEG,KAAK,CAAC,EAAE;QACpC,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB;EACAI,MAAM,CAACJ,KAAK,EAAEK,OAAO,EAAE;IACnB,IAAIA,OAAO,KAAK,CAAC,IAAIH,MAAM,CAACC,EAAE,CAACH,KAAK,EAAE,IAAI,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MACnD,OAAOP,MAAM,CAACoB,GAAG,EAAE;IACvB;IACA,OAAOpB,MAAM,CAACqB,EAAE,CAAC,IAAInB,KAAK,CAAC,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD;AACJ"},"metadata":{},"sourceType":"module"}
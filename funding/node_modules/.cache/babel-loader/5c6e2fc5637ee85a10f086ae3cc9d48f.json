{"ast":null,"code":"\"use strict\";\n\n/**\n * @protected\n *\n * @packageDocumentation\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abiParameterToType = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:abi-data:import\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nfunction abiParameterToType(abi) {\n  let typeName = abi.type;\n  let typeHint = abi.internalType;\n  //first: is it an array?\n  let arrayMatch = typeName.match(/(.*)\\[(\\d*)\\]$/);\n  if (arrayMatch) {\n    let baseTypeName = arrayMatch[1];\n    let lengthAsString = arrayMatch[2]; //may be empty!\n    let baseAbi = Object.assign(Object.assign({}, abi), {\n      type: baseTypeName\n    });\n    let baseType = abiParameterToType(baseAbi);\n    if (lengthAsString === \"\") {\n      return {\n        typeClass: \"array\",\n        kind: \"dynamic\",\n        baseType,\n        typeHint\n      };\n    } else {\n      let length = new bn_js_1.default(lengthAsString);\n      return {\n        typeClass: \"array\",\n        kind: \"static\",\n        length,\n        baseType,\n        typeHint\n      };\n    }\n  }\n  //otherwise, here are the simple cases\n  let typeClass = typeName.match(/^([^0-9]+)/)[1];\n  switch (typeClass) {\n    case \"uint\":\n    case \"int\":\n      {\n        let bits = typeName.match(/^u?int([0-9]+)/)[1];\n        return {\n          typeClass,\n          bits: parseInt(bits),\n          typeHint\n        };\n      }\n    case \"bytes\":\n      let length = typeName.match(/^bytes([0-9]*)/)[1];\n      if (length === \"\") {\n        return {\n          typeClass,\n          kind: \"dynamic\",\n          typeHint\n        };\n      } else {\n        return {\n          typeClass,\n          kind: \"static\",\n          length: parseInt(length),\n          typeHint\n        };\n      }\n    case \"address\":\n      return {\n        typeClass,\n        kind: \"general\",\n        typeHint\n      };\n    case \"string\":\n    case \"bool\":\n      return {\n        typeClass,\n        typeHint\n      };\n    case \"fixed\":\n    case \"ufixed\":\n      {\n        let [_, bits, places] = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/);\n        return {\n          typeClass,\n          bits: parseInt(bits),\n          places: parseInt(places),\n          typeHint\n        };\n      }\n    case \"function\":\n      return {\n        typeClass,\n        visibility: \"external\",\n        kind: \"general\",\n        typeHint\n      };\n    case \"tuple\":\n      let memberTypes = abi.components.map(component => ({\n        name: component.name || undefined,\n        type: abiParameterToType(component)\n      }));\n      return {\n        typeClass,\n        memberTypes,\n        typeHint\n      };\n  }\n}\nexports.abiParameterToType = abiParameterToType;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;AAMA;AACA,MAAMA,KAAK,GAAG,mBAAW,EAAC,uBAAuB,CAAC;AAElD;AAIA,SAAgBC,kBAAkB,CAACC,GAAc;EAC/C,IAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAI;EACvB,IAAIC,QAAQ,GAAGH,GAAG,CAACI,YAAY;EAC/B;EACA,IAAIC,UAAU,GAAGJ,QAAQ,CAACK,KAAK,CAAC,gBAAgB,CAAC;EACjD,IAAID,UAAU,EAAE;IACd,IAAIE,YAAY,GAAGF,UAAU,CAAC,CAAC,CAAC;IAChC,IAAIG,cAAc,GAAGH,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,IAAII,OAAO,mCAAQT,GAAG;MAAEE,IAAI,EAAEK;IAAY,EAAE;IAC5C,IAAIG,QAAQ,GAAGX,kBAAkB,CAACU,OAAO,CAAC;IAC1C,IAAID,cAAc,KAAK,EAAE,EAAE;MACzB,OAAO;QACLG,SAAS,EAAE,OAAO;QAClBC,IAAI,EAAE,SAAS;QACfF,QAAQ;QACRP;OACD;KACF,MAAM;MACL,IAAIU,MAAM,GAAG,IAAIC,eAAE,CAACN,cAAc,CAAC;MACnC,OAAO;QACLG,SAAS,EAAE,OAAO;QAClBC,IAAI,EAAE,QAAQ;QACdC,MAAM;QACNH,QAAQ;QACRP;OACD;;;EAGL;EACA,IAAIQ,SAAS,GAAGV,QAAQ,CAACK,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;EAC/C,QAAQK,SAAS;IACf,KAAK,MAAM;IACX,KAAK,KAAK;MAAE;QACV,IAAII,IAAI,GAAGd,QAAQ,CAACK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC9C,OAAO;UACLK,SAAS;UACTI,IAAI,EAAEC,QAAQ,CAACD,IAAI,CAAC;UACpBZ;SACD;;IAEH,KAAK,OAAO;MACV,IAAIU,MAAM,GAAGZ,QAAQ,CAACK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAChD,IAAIO,MAAM,KAAK,EAAE,EAAE;QACjB,OAAO;UACLF,SAAS;UACTC,IAAI,EAAE,SAAS;UACfT;SACD;OACF,MAAM;QACL,OAAO;UACLQ,SAAS;UACTC,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAEG,QAAQ,CAACH,MAAM,CAAC;UACxBV;SACD;;IAEL,KAAK,SAAS;MACZ,OAAO;QACLQ,SAAS;QACTC,IAAI,EAAE,SAAS;QACfT;OACD;IACH,KAAK,QAAQ;IACb,KAAK,MAAM;MACT,OAAO;QACLQ,SAAS;QACTR;OACD;IACH,KAAK,OAAO;IACZ,KAAK,QAAQ;MAAE;QACb,IAAI,CAACc,CAAC,EAAEF,IAAI,EAAEG,MAAM,CAAC,GAAGjB,QAAQ,CAACK,KAAK,CAAC,2BAA2B,CAAC;QACnE,OAAO;UACLK,SAAS;UACTI,IAAI,EAAEC,QAAQ,CAACD,IAAI,CAAC;UACpBG,MAAM,EAAEF,QAAQ,CAACE,MAAM,CAAC;UACxBf;SACD;;IAEH,KAAK,UAAU;MACb,OAAO;QACLQ,SAAS;QACTQ,UAAU,EAAE,UAAU;QACtBP,IAAI,EAAE,SAAS;QACfT;OACD;IACH,KAAK,OAAO;MACV,IAAIiB,WAAW,GAAGpB,GAAG,CAACqB,UAAU,CAACC,GAAG,CAACC,SAAS,KAAK;QACjDC,IAAI,EAAED,SAAS,CAACC,IAAI,IAAIC,SAAS;QACjCvB,IAAI,EAAEH,kBAAkB,CAACwB,SAAS;OACnC,CAAC,CAAC;MACH,OAAO;QACLZ,SAAS;QACTS,WAAW;QACXjB;OACD;EAAC;AAER;AAhGAuB","names":["debug","abiParameterToType","abi","typeName","type","typeHint","internalType","arrayMatch","match","baseTypeName","lengthAsString","baseAbi","baseType","typeClass","kind","length","bn_js_1","bits","parseInt","_","places","visibility","memberTypes","components","map","component","name","undefined","exports"],"sourceRoot":"","sources":["../../../../lib/abi-data/import/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
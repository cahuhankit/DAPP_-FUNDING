{"ast":null,"code":"import { stream, Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64 } from './helpers/ArrayInt64.js';\nclass ArrayInt64Arbitrary extends Arbitrary {\n  constructor(min, max) {\n    super();\n    this.min = min;\n    this.max = max;\n    this.biasedRanges = null;\n  }\n  generate(mrng, biasFactor) {\n    const range = this.computeGenerateRange(mrng, biasFactor);\n    const uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n    if (uncheckedValue.data.length === 1) {\n      uncheckedValue.data.unshift(0);\n    }\n    return new Value(uncheckedValue, undefined);\n  }\n  computeGenerateRange(mrng, biasFactor) {\n    if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        min: this.min,\n        max: this.max\n      };\n    }\n    const ranges = this.retrieveBiasedRanges();\n    if (ranges.length === 1) {\n      return ranges[0];\n    }\n    const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n    return id < 0 ? ranges[0] : ranges[id + 1];\n  }\n  canShrinkWithoutContext(value) {\n    const unsafeValue = value;\n    return typeof value === 'object' && value !== null && (unsafeValue.sign === -1 || unsafeValue.sign === 1) && Array.isArray(unsafeValue.data) && unsafeValue.data.length === 2 && (isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max) || isEqual64(this.min, unsafeValue) || isEqual64(this.max, unsafeValue));\n  }\n  shrinkArrayInt64(value, target, tryTargetAsap) {\n    const realGap = substract64(value, target);\n    function* shrinkGen() {\n      let previous = tryTargetAsap ? undefined : target;\n      const gap = tryTargetAsap ? realGap : halve64(realGap);\n      for (let toremove = gap; !isZero64(toremove); toremove = halve64(toremove)) {\n        const next = substract64(value, toremove);\n        yield new Value(next, previous);\n        previous = next;\n      }\n    }\n    return stream(shrinkGen());\n  }\n  shrink(current, context) {\n    if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n      const target = this.defaultTarget();\n      return this.shrinkArrayInt64(current, target, true);\n    }\n    if (this.isLastChanceTry(current, context)) {\n      return Stream.of(new Value(context, undefined));\n    }\n    return this.shrinkArrayInt64(current, context, false);\n  }\n  defaultTarget() {\n    if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n      return Zero64;\n    }\n    return isStrictlyNegative64(this.min) ? this.max : this.min;\n  }\n  isLastChanceTry(current, context) {\n    if (isZero64(current)) {\n      return false;\n    }\n    if (current.sign === 1) {\n      return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n    } else {\n      return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n    }\n  }\n  static isValidContext(_current, context) {\n    if (context === undefined) {\n      return false;\n    }\n    if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n      throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);\n    }\n    return true;\n  }\n  retrieveBiasedRanges() {\n    if (this.biasedRanges != null) {\n      return this.biasedRanges;\n    }\n    if (isEqual64(this.min, this.max)) {\n      this.biasedRanges = [{\n        min: this.min,\n        max: this.max\n      }];\n      return this.biasedRanges;\n    }\n    const minStrictlySmallerZero = isStrictlyNegative64(this.min);\n    const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n    if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n      const logMin = logLike64(this.min);\n      const logMax = logLike64(this.max);\n      this.biasedRanges = [{\n        min: logMin,\n        max: logMax\n      }, {\n        min: substract64(this.max, logMax),\n        max: this.max\n      }, {\n        min: this.min,\n        max: substract64(this.min, logMin)\n      }];\n    } else {\n      const logGap = logLike64(substract64(this.max, this.min));\n      const arbCloseToMin = {\n        min: this.min,\n        max: add64(this.min, logGap)\n      };\n      const arbCloseToMax = {\n        min: substract64(this.max, logGap),\n        max: this.max\n      };\n      this.biasedRanges = minStrictlySmallerZero ? [arbCloseToMax, arbCloseToMin] : [arbCloseToMin, arbCloseToMax];\n    }\n    return this.biasedRanges;\n  }\n}\nexport function arrayInt64(min, max) {\n  const arb = new ArrayInt64Arbitrary(min, max);\n  return arb;\n}","map":{"version":3,"names":["stream","Stream","Arbitrary","Value","add64","halve64","isEqual64","isStrictlyNegative64","isStrictlyPositive64","isStrictlySmaller64","isZero64","logLike64","substract64","Unit64","Zero64","ArrayInt64Arbitrary","constructor","min","max","biasedRanges","generate","mrng","biasFactor","range","computeGenerateRange","uncheckedValue","nextArrayInt","data","length","unshift","undefined","nextInt","ranges","retrieveBiasedRanges","id","canShrinkWithoutContext","value","unsafeValue","sign","Array","isArray","shrinkArrayInt64","target","tryTargetAsap","realGap","shrinkGen","previous","gap","toremove","next","shrink","current","context","isValidContext","defaultTarget","isLastChanceTry","of","_current","Error","minStrictlySmallerZero","maxStrictlyGreaterZero","logMin","logMax","logGap","arbCloseToMin","arbCloseToMax","arrayInt64","arb"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayInt64Arbitrary.js"],"sourcesContent":["import { stream, Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64, } from './helpers/ArrayInt64.js';\nclass ArrayInt64Arbitrary extends Arbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n        this.biasedRanges = null;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        const uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n        if (uncheckedValue.data.length === 1) {\n            uncheckedValue.data.unshift(0);\n        }\n        return new Value(uncheckedValue, undefined);\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = this.retrieveBiasedRanges();\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    canShrinkWithoutContext(value) {\n        const unsafeValue = value;\n        return (typeof value === 'object' &&\n            value !== null &&\n            (unsafeValue.sign === -1 || unsafeValue.sign === 1) &&\n            Array.isArray(unsafeValue.data) &&\n            unsafeValue.data.length === 2 &&\n            ((isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max)) ||\n                isEqual64(this.min, unsafeValue) ||\n                isEqual64(this.max, unsafeValue)));\n    }\n    shrinkArrayInt64(value, target, tryTargetAsap) {\n        const realGap = substract64(value, target);\n        function* shrinkGen() {\n            let previous = tryTargetAsap ? undefined : target;\n            const gap = tryTargetAsap ? realGap : halve64(realGap);\n            for (let toremove = gap; !isZero64(toremove); toremove = halve64(toremove)) {\n                const next = substract64(value, toremove);\n                yield new Value(next, previous);\n                previous = next;\n            }\n        }\n        return stream(shrinkGen());\n    }\n    shrink(current, context) {\n        if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return this.shrinkArrayInt64(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream.of(new Value(context, undefined));\n        }\n        return this.shrinkArrayInt64(current, context, false);\n    }\n    defaultTarget() {\n        if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n            return Zero64;\n        }\n        return isStrictlyNegative64(this.min) ? this.max : this.min;\n    }\n    isLastChanceTry(current, context) {\n        if (isZero64(current)) {\n            return false;\n        }\n        if (current.sign === 1) {\n            return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n        }\n        else {\n            return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n        }\n    }\n    static isValidContext(_current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n            throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);\n        }\n        return true;\n    }\n    retrieveBiasedRanges() {\n        if (this.biasedRanges != null) {\n            return this.biasedRanges;\n        }\n        if (isEqual64(this.min, this.max)) {\n            this.biasedRanges = [{ min: this.min, max: this.max }];\n            return this.biasedRanges;\n        }\n        const minStrictlySmallerZero = isStrictlyNegative64(this.min);\n        const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n        if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n            const logMin = logLike64(this.min);\n            const logMax = logLike64(this.max);\n            this.biasedRanges = [\n                { min: logMin, max: logMax },\n                { min: substract64(this.max, logMax), max: this.max },\n                { min: this.min, max: substract64(this.min, logMin) },\n            ];\n        }\n        else {\n            const logGap = logLike64(substract64(this.max, this.min));\n            const arbCloseToMin = { min: this.min, max: add64(this.min, logGap) };\n            const arbCloseToMax = { min: substract64(this.max, logGap), max: this.max };\n            this.biasedRanges = minStrictlySmallerZero\n                ? [arbCloseToMax, arbCloseToMin]\n                : [arbCloseToMin, arbCloseToMax];\n        }\n        return this.biasedRanges;\n    }\n}\nexport function arrayInt64(min, max) {\n    const arb = new ArrayInt64Arbitrary(min, max);\n    return arb;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
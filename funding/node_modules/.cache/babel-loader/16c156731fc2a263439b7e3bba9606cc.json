{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxGeneratedLengthFromSizeForArbitrary, MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\nfunction buildUniqueArraySetBuilder(constraints) {\n  if (typeof constraints.comparator === 'function') {\n    if (constraints.selector === undefined) {\n      const comparator = constraints.comparator;\n      const isEqualForBuilder = (nextA, nextB) => comparator(nextA.value_, nextB.value_);\n      return () => new CustomEqualSet(isEqualForBuilder);\n    }\n    const comparator = constraints.comparator;\n    const selector = constraints.selector;\n    const refinedSelector = next => selector(next.value_);\n    const isEqualForBuilder = (nextA, nextB) => comparator(refinedSelector(nextA), refinedSelector(nextB));\n    return () => new CustomEqualSet(isEqualForBuilder);\n  }\n  const selector = constraints.selector || (v => v);\n  const refinedSelector = next => selector(next.value_);\n  switch (constraints.comparator) {\n    case 'IsStrictlyEqual':\n      return () => new StrictlyEqualSet(refinedSelector);\n    case 'SameValueZero':\n      return () => new SameValueZeroSet(refinedSelector);\n    case 'SameValue':\n    case undefined:\n      return () => new SameValueSet(refinedSelector);\n  }\n}\nexport function uniqueArray(arb) {\n  let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n  const depthIdentifier = constraints.depthIdentifier;\n  const setBuilder = buildUniqueArraySetBuilder(constraints);\n  const arrayArb = new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, []);\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}","map":{"version":3,"names":["ArrayArbitrary","maxGeneratedLengthFromSizeForArbitrary","MaxLengthUpperBound","CustomEqualSet","StrictlyEqualSet","SameValueSet","SameValueZeroSet","buildUniqueArraySetBuilder","constraints","comparator","selector","undefined","isEqualForBuilder","nextA","nextB","value_","refinedSelector","next","v","uniqueArray","arb","minLength","maxLength","maxGeneratedLength","size","depthIdentifier","setBuilder","arrayArb","filter","tab","length"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/uniqueArray.js"],"sourcesContent":["import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxGeneratedLengthFromSizeForArbitrary, MaxLengthUpperBound, } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\nfunction buildUniqueArraySetBuilder(constraints) {\n    if (typeof constraints.comparator === 'function') {\n        if (constraints.selector === undefined) {\n            const comparator = constraints.comparator;\n            const isEqualForBuilder = (nextA, nextB) => comparator(nextA.value_, nextB.value_);\n            return () => new CustomEqualSet(isEqualForBuilder);\n        }\n        const comparator = constraints.comparator;\n        const selector = constraints.selector;\n        const refinedSelector = (next) => selector(next.value_);\n        const isEqualForBuilder = (nextA, nextB) => comparator(refinedSelector(nextA), refinedSelector(nextB));\n        return () => new CustomEqualSet(isEqualForBuilder);\n    }\n    const selector = constraints.selector || ((v) => v);\n    const refinedSelector = (next) => selector(next.value_);\n    switch (constraints.comparator) {\n        case 'IsStrictlyEqual':\n            return () => new StrictlyEqualSet(refinedSelector);\n        case 'SameValueZero':\n            return () => new SameValueZeroSet(refinedSelector);\n        case 'SameValue':\n        case undefined:\n            return () => new SameValueSet(refinedSelector);\n    }\n}\nexport function uniqueArray(arb, constraints = {}) {\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n    const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n    const depthIdentifier = constraints.depthIdentifier;\n    const setBuilder = buildUniqueArraySetBuilder(constraints);\n    const arrayArb = new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, []);\n    if (minLength === 0)\n        return arrayArb;\n    return arrayArb.filter((tab) => tab.length >= minLength);\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,sCAAsC,EAAEC,mBAAmB,QAAS,gDAAgD;AAC7H,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,gBAAgB,QAAQ,0CAA0C;AAC3E,SAASC,YAAY,QAAQ,sCAAsC;AACnE,SAASC,gBAAgB,QAAQ,0CAA0C;AAC3E,SAASC,0BAA0B,CAACC,WAAW,EAAE;EAC7C,IAAI,OAAOA,WAAW,CAACC,UAAU,KAAK,UAAU,EAAE;IAC9C,IAAID,WAAW,CAACE,QAAQ,KAAKC,SAAS,EAAE;MACpC,MAAMF,UAAU,GAAGD,WAAW,CAACC,UAAU;MACzC,MAAMG,iBAAiB,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAKL,UAAU,CAACI,KAAK,CAACE,MAAM,EAAED,KAAK,CAACC,MAAM,CAAC;MAClF,OAAO,MAAM,IAAIZ,cAAc,CAACS,iBAAiB,CAAC;IACtD;IACA,MAAMH,UAAU,GAAGD,WAAW,CAACC,UAAU;IACzC,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAAQ;IACrC,MAAMM,eAAe,GAAIC,IAAI,IAAKP,QAAQ,CAACO,IAAI,CAACF,MAAM,CAAC;IACvD,MAAMH,iBAAiB,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAKL,UAAU,CAACO,eAAe,CAACH,KAAK,CAAC,EAAEG,eAAe,CAACF,KAAK,CAAC,CAAC;IACtG,OAAO,MAAM,IAAIX,cAAc,CAACS,iBAAiB,CAAC;EACtD;EACA,MAAMF,QAAQ,GAAGF,WAAW,CAACE,QAAQ,KAAMQ,CAAC,IAAKA,CAAC,CAAC;EACnD,MAAMF,eAAe,GAAIC,IAAI,IAAKP,QAAQ,CAACO,IAAI,CAACF,MAAM,CAAC;EACvD,QAAQP,WAAW,CAACC,UAAU;IAC1B,KAAK,iBAAiB;MAClB,OAAO,MAAM,IAAIL,gBAAgB,CAACY,eAAe,CAAC;IACtD,KAAK,eAAe;MAChB,OAAO,MAAM,IAAIV,gBAAgB,CAACU,eAAe,CAAC;IACtD,KAAK,WAAW;IAChB,KAAKL,SAAS;MACV,OAAO,MAAM,IAAIN,YAAY,CAACW,eAAe,CAAC;EAAC;AAE3D;AACA,OAAO,SAASG,WAAW,CAACC,GAAG,EAAoB;EAAA,IAAlBZ,WAAW,uEAAG,CAAC,CAAC;EAC7C,MAAMa,SAAS,GAAGb,WAAW,CAACa,SAAS,KAAKV,SAAS,GAAGH,WAAW,CAACa,SAAS,GAAG,CAAC;EACjF,MAAMC,SAAS,GAAGd,WAAW,CAACc,SAAS,KAAKX,SAAS,GAAGH,WAAW,CAACc,SAAS,GAAGpB,mBAAmB;EACnG,MAAMqB,kBAAkB,GAAGtB,sCAAsC,CAACO,WAAW,CAACgB,IAAI,EAAEH,SAAS,EAAEC,SAAS,EAAEd,WAAW,CAACc,SAAS,KAAKX,SAAS,CAAC;EAC9I,MAAMc,eAAe,GAAGjB,WAAW,CAACiB,eAAe;EACnD,MAAMC,UAAU,GAAGnB,0BAA0B,CAACC,WAAW,CAAC;EAC1D,MAAMmB,QAAQ,GAAG,IAAI3B,cAAc,CAACoB,GAAG,EAAEC,SAAS,EAAEE,kBAAkB,EAAED,SAAS,EAAEG,eAAe,EAAEC,UAAU,EAAE,EAAE,CAAC;EACnH,IAAIL,SAAS,KAAK,CAAC,EACf,OAAOM,QAAQ;EACnB,OAAOA,QAAQ,CAACC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,MAAM,IAAIT,SAAS,CAAC;AAC5D"},"metadata":{},"sourceType":"module"}
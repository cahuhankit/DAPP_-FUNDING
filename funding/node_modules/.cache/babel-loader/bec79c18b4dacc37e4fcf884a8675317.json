{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readStackLiteral = exports.readStack = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:stack:read\");\nconst Evm = __importStar(require(\"../../evm\"));\nconst errors_1 = require(\"../../errors\");\nfunction readStack(pointer, state) {\n  let {\n    from,\n    to\n  } = pointer;\n  let {\n    stack\n  } = state;\n  if (from < 0 || to >= stack.length) {\n    throw new errors_1.DecodingError({\n      kind: \"ReadErrorStack\",\n      from,\n      to\n    });\n  }\n  //unforunately, Uint8Arrays don't support concat; if they did the rest of\n  //this would be one line.  Or similarly if they worked with lodash's flatten,\n  //but they don't support that either.  But neither of those are the case, so\n  //we'll have to concatenate a bit more manually.\n  let words = stack.slice(from, to + 1);\n  let result = new Uint8Array(words.length * Evm.Utils.WORD_SIZE);\n  //shouldn't we total up the lengths? yeah, but each one should have a\n  //length of 32, so unless somehting's gone wrong we can just multiply\n  for (let index = 0; index < words.length; index++) {\n    result.set(words[index], index * Evm.Utils.WORD_SIZE);\n  }\n  return result;\n}\nexports.readStack = readStack;\nfunction readStackLiteral(pointer) {\n  return pointer.literal;\n}\nexports.readStackLiteral = readStackLiteral;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,MAAMA,KAAK,GAAG,mBAAW,EAAC,kBAAkB,CAAC;AAE7C;AAEA;AAEA,SAAgBC,SAAS,CACvBC,OAA6B,EAC7BC,KAAmB;EAEnB,IAAI;IAAEC,IAAI;IAAEC;EAAE,CAAE,GAAGH,OAAO;EAC1B,IAAI;IAAEI;EAAK,CAAE,GAAGH,KAAK;EACrB,IAAIC,IAAI,GAAG,CAAC,IAAIC,EAAE,IAAIC,KAAK,CAACC,MAAM,EAAE;IAClC,MAAM,IAAIC,sBAAa,CAAC;MACtBC,IAAI,EAAE,gBAAgB;MACtBL,IAAI;MACJC;KACD,CAAC;;EAEJ;EACA;EACA;EACA;EACA,IAAIK,KAAK,GAAGJ,KAAK,CAACK,KAAK,CAACP,IAAI,EAAEC,EAAE,GAAG,CAAC,CAAC;EACrC,IAAIO,MAAM,GAAG,IAAIC,UAAU,CAACH,KAAK,CAACH,MAAM,GAAGO,GAAG,CAACC,KAAK,CAACC,SAAS,CAAC;EAC/D;EACA;EACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGP,KAAK,CAACH,MAAM,EAAEU,KAAK,EAAE,EAAE;IACjDL,MAAM,CAACM,GAAG,CAACR,KAAK,CAACO,KAAK,CAAC,EAAEA,KAAK,GAAGH,GAAG,CAACC,KAAK,CAACC,SAAS,CAAC;;EAEvD,OAAOJ,MAAM;AACf;AAzBAO;AA2BA,SAAgBC,gBAAgB,CAC9BlB,OAAoC;EAEpC,OAAOA,OAAO,CAACmB,OAAO;AACxB;AAJAF","names":["debug","readStack","pointer","state","from","to","stack","length","errors_1","kind","words","slice","result","Uint8Array","Evm","Utils","WORD_SIZE","index","set","exports","readStackLiteral","literal"],"sourceRoot":"","sources":["../../../../lib/stack/read/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
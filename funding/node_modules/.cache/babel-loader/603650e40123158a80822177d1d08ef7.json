{"ast":null,"code":"import { fullUnicode } from '../../fullUnicode.js';\nimport { oneof } from '../../oneof.js';\nimport { mapToConstant } from '../../mapToConstant.js';\nconst lowerCaseMapper = {\n  num: 26,\n  build: v => String.fromCharCode(v + 0x61)\n};\nconst upperCaseMapper = {\n  num: 26,\n  build: v => String.fromCharCode(v + 0x41)\n};\nconst numericMapper = {\n  num: 10,\n  build: v => String.fromCharCode(v + 0x30)\n};\nfunction percentCharArbMapper(c) {\n  const encoded = encodeURIComponent(c);\n  return c !== encoded ? encoded : `%${c.charCodeAt(0).toString(16)}`;\n}\nfunction percentCharArbUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n  const decoded = decodeURIComponent(value);\n  return decoded;\n}\nconst percentCharArb = fullUnicode().map(percentCharArbMapper, percentCharArbUnmapper);\nexport const buildLowerAlphaArbitrary = others => mapToConstant(lowerCaseMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildLowerAlphaNumericArbitrary = others => mapToConstant(lowerCaseMapper, numericMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildAlphaNumericArbitrary = others => mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildAlphaNumericPercentArbitrary = others => oneof({\n  weight: 10,\n  arbitrary: buildAlphaNumericArbitrary(others)\n}, {\n  weight: 1,\n  arbitrary: percentCharArb\n});","map":{"version":3,"names":["fullUnicode","oneof","mapToConstant","lowerCaseMapper","num","build","v","String","fromCharCode","upperCaseMapper","numericMapper","percentCharArbMapper","c","encoded","encodeURIComponent","charCodeAt","toString","percentCharArbUnmapper","value","Error","decoded","decodeURIComponent","percentCharArb","map","buildLowerAlphaArbitrary","others","length","buildLowerAlphaNumericArbitrary","buildAlphaNumericArbitrary","buildAlphaNumericPercentArbitrary","weight","arbitrary"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CharacterRangeArbitraryBuilder.js"],"sourcesContent":["import { fullUnicode } from '../../fullUnicode.js';\nimport { oneof } from '../../oneof.js';\nimport { mapToConstant } from '../../mapToConstant.js';\nconst lowerCaseMapper = { num: 26, build: (v) => String.fromCharCode(v + 0x61) };\nconst upperCaseMapper = { num: 26, build: (v) => String.fromCharCode(v + 0x41) };\nconst numericMapper = { num: 10, build: (v) => String.fromCharCode(v + 0x30) };\nfunction percentCharArbMapper(c) {\n    const encoded = encodeURIComponent(c);\n    return c !== encoded ? encoded : `%${c.charCodeAt(0).toString(16)}`;\n}\nfunction percentCharArbUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    const decoded = decodeURIComponent(value);\n    return decoded;\n}\nconst percentCharArb = fullUnicode().map(percentCharArbMapper, percentCharArbUnmapper);\nexport const buildLowerAlphaArbitrary = (others) => mapToConstant(lowerCaseMapper, { num: others.length, build: (v) => others[v] });\nexport const buildLowerAlphaNumericArbitrary = (others) => mapToConstant(lowerCaseMapper, numericMapper, { num: others.length, build: (v) => others[v] });\nexport const buildAlphaNumericArbitrary = (others) => mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, { num: others.length, build: (v) => others[v] });\nexport const buildAlphaNumericPercentArbitrary = (others) => oneof({ weight: 10, arbitrary: buildAlphaNumericArbitrary(others) }, { weight: 1, arbitrary: percentCharArb });\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,MAAMC,eAAe,GAAG;EAAEC,GAAG,EAAE,EAAE;EAAEC,KAAK,EAAGC,CAAC,IAAKC,MAAM,CAACC,YAAY,CAACF,CAAC,GAAG,IAAI;AAAE,CAAC;AAChF,MAAMG,eAAe,GAAG;EAAEL,GAAG,EAAE,EAAE;EAAEC,KAAK,EAAGC,CAAC,IAAKC,MAAM,CAACC,YAAY,CAACF,CAAC,GAAG,IAAI;AAAE,CAAC;AAChF,MAAMI,aAAa,GAAG;EAAEN,GAAG,EAAE,EAAE;EAAEC,KAAK,EAAGC,CAAC,IAAKC,MAAM,CAACC,YAAY,CAACF,CAAC,GAAG,IAAI;AAAE,CAAC;AAC9E,SAASK,oBAAoB,CAACC,CAAC,EAAE;EAC7B,MAAMC,OAAO,GAAGC,kBAAkB,CAACF,CAAC,CAAC;EACrC,OAAOA,CAAC,KAAKC,OAAO,GAAGA,OAAO,GAAI,IAAGD,CAAC,CAACG,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC;AACvE;AACA,SAASC,sBAAsB,CAACC,KAAK,EAAE;EACnC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;EAClC;EACA,MAAMC,OAAO,GAAGC,kBAAkB,CAACH,KAAK,CAAC;EACzC,OAAOE,OAAO;AAClB;AACA,MAAME,cAAc,GAAGtB,WAAW,EAAE,CAACuB,GAAG,CAACZ,oBAAoB,EAAEM,sBAAsB,CAAC;AACtF,OAAO,MAAMO,wBAAwB,GAAIC,MAAM,IAAKvB,aAAa,CAACC,eAAe,EAAE;EAAEC,GAAG,EAAEqB,MAAM,CAACC,MAAM;EAAErB,KAAK,EAAGC,CAAC,IAAKmB,MAAM,CAACnB,CAAC;AAAE,CAAC,CAAC;AACnI,OAAO,MAAMqB,+BAA+B,GAAIF,MAAM,IAAKvB,aAAa,CAACC,eAAe,EAAEO,aAAa,EAAE;EAAEN,GAAG,EAAEqB,MAAM,CAACC,MAAM;EAAErB,KAAK,EAAGC,CAAC,IAAKmB,MAAM,CAACnB,CAAC;AAAE,CAAC,CAAC;AACzJ,OAAO,MAAMsB,0BAA0B,GAAIH,MAAM,IAAKvB,aAAa,CAACC,eAAe,EAAEM,eAAe,EAAEC,aAAa,EAAE;EAAEN,GAAG,EAAEqB,MAAM,CAACC,MAAM;EAAErB,KAAK,EAAGC,CAAC,IAAKmB,MAAM,CAACnB,CAAC;AAAE,CAAC,CAAC;AACrK,OAAO,MAAMuB,iCAAiC,GAAIJ,MAAM,IAAKxB,KAAK,CAAC;EAAE6B,MAAM,EAAE,EAAE;EAAEC,SAAS,EAAEH,0BAA0B,CAACH,MAAM;AAAE,CAAC,EAAE;EAAEK,MAAM,EAAE,CAAC;EAAEC,SAAS,EAAET;AAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module"}
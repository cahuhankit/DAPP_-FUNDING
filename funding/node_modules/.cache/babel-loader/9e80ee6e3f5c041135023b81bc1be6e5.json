{"ast":null,"code":"const hljs = require('highlight.js');\nconst cheerio = require('cheerio');\nconst camelCase = require('camelcase');\nconst chalk = require('chalk');\nconst stripAnsi = require('strip-ansi');\nconst merge = require('lodash.merge');\nconst stripIndent = require('strip-indent');\nconst detectIndent = require('detect-indent');\nconst darkPalette = {\n  addition: chalk.green,\n  attr: chalk.yellow,\n  attribute: chalk.blue,\n  attrString: chalk.cyan,\n  base: chalk.white,\n  builtIn: chalk.blue,\n  builtInName: chalk.blue,\n  bullet: chalk.magenta,\n  class: chalk.green,\n  code: chalk.yellow,\n  comment: chalk.white.dim,\n  deletion: chalk.red,\n  doctag: chalk.blue,\n  emphasis: chalk.magenta,\n  function: chalk.white,\n  formula: chalk.green,\n  keyword: chalk.red,\n  lineNumbers: chalk.grey,\n  literal: chalk.magenta,\n  link: chalk.blue.underline,\n  meta: chalk.cyan,\n  name: chalk.cyan,\n  number: chalk.green,\n  params: chalk.blue,\n  quote: chalk.gray,\n  regexp: chalk.magenta,\n  selectorAttr: chalk.green,\n  selectorClass: chalk.yellow,\n  selectorId: chalk.blue,\n  selectorPseudo: chalk.cyan,\n  selectorTag: chalk.magenta,\n  string: chalk.yellow,\n  strong: chalk.red,\n  subst: chalk.cyan,\n  symbol: chalk.cyan,\n  tag: chalk.blue,\n  templateTag: chalk.magenta,\n  templateVariable: chalk.green,\n  title: chalk.green,\n  trailingSpace: chalk,\n  type: chalk.magenta,\n  variable: chalk.red\n};\nconst filter = (node, opts) => {\n  let color;\n  let text;\n  let childText;\n  if (node.type === 'text') {\n    text = node.data;\n    return text;\n  }\n  if (node.name === 'span' && node.type === 'tag') {\n    color = camelCase(node.attribs.class.split('-')[1]);\n  }\n  if (node.childNodes && node.childNodes.length > 0) {\n    childText = node.childNodes.map(childNode => filter(childNode, opts)).join('');\n    if (typeof color === 'string') {\n      return opts.colors[color](childText);\n    }\n    return childText;\n  }\n  return '';\n};\nconst findLongestLine = (text, opts) => {\n  let tabPad = '';\n  if (opts.$indent.tabs) {\n    tabPad = String().padEnd(opts.consoleTabWidth, ' ');\n  }\n  const lines = stripAnsi(text).replace(/\\t/g, tabPad).split('\\n');\n  let max = 0;\n  lines.forEach(line => {\n    if (line.length > max) {\n      max = line.length;\n    }\n  });\n  return max;\n};\nconst padLine = (line, padding) => {\n  const padStr = String().padStart(padding, ' ');\n  return padStr + line + padStr;\n};\nconst getIndentStr = opts => {\n  if (opts.$indent.tabs) {\n    return String().padStart(1, '\\t');\n  }\n\n  // Opts.$indent.spaces === true\n  if (opts.tabsToSpaces === 0) {\n    return '\\u0000';\n  }\n  return String().padEnd(opts.tabsToSpaces, ' ');\n};\nconst syntaxHlStr = (lang, script, opts, indentStart) => {\n  const indentStr = getIndentStr(opts);\n  if (opts.$indent.tabs) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n  if (opts.$indent.spaces) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n  if (indentStart) {\n    script = indentStr + script;\n  }\n  const code = hljs.highlight(lang, script).value;\n  const html = `<code>${code}</code>`;\n  const $body = cheerio.load(html).root().find('code')[0];\n  const output = filter($body, opts);\n  return output;\n};\nconst syntaxHlJson = (json, opts) => {\n  const indentStr = getIndentStr(opts);\n  try {\n    json = JSON.stringify(json, (key, val) => {\n      if (val instanceof Function) {\n        return `[FUNCTION]${String(val)}[FUNCTION]`;\n      }\n      return val;\n    }, indentStr);\n  } catch (err) {\n    err.message = 'ðŸ¦…  Chromafi: ' + err.message;\n    throw new Error(err);\n  }\n  const highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, match => {\n    let colorClass = 'number';\n\n    // eslint-disable-next-line unicorn/prefer-starts-ends-with\n    if (/^\"/.test(match)) {\n      // eslint-disable-next-line unicorn/prefer-starts-ends-with\n      if (/:$/.test(match)) {\n        if (match.includes('-')) {\n          colorClass = 'attrString';\n          match = match.replace(/\"/g, '\\'');\n        } else {\n          colorClass = 'attr';\n          match = match.replace(/\"/g, '');\n        }\n      } else {\n        colorClass = 'string';\n        if (match.substr(1, 10) === '[FUNCTION]' && match.substr(match.length - 11, 10) === '[FUNCTION]') {\n          colorClass = 'function';\n        } else {\n          match = match.replace(/\"/g, '\\'');\n          match = match.replace(/\\\\n/g, '\\n');\n          match = match.replace(/\\\\t/g, indentStr);\n        }\n      }\n    } else if (/true|false/.test(match)) {\n      colorClass = 'literal';\n    } else if (/null/.test(match)) {\n      colorClass = 'literal';\n    }\n    return opts.colors[colorClass](match);\n  });\n  const getFnStrIndent = (fnStr, opts) => {\n    fnStr = fnStr.replace(/\\t/g, indentStr);\n    const indent = detectIndent(fnStr);\n    if (opts.$indent.spaces) {\n      const indentLevel = indent.amount / opts.tabsToSpaces;\n      return indentLevel;\n    }\n    if (opts.$indent.tabs) {\n      const indentLevel = indent.amount;\n      return indentLevel;\n    }\n  };\n  const lines = highlighted.split('\\n').map(line => {\n    const fnParts = line.split('[FUNCTION]');\n    if (fnParts.length === 3) {\n      const plain = stripAnsi(line);\n      let outerIndent;\n      if (opts.$indent.spaces) {\n        outerIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces;\n      }\n      if (opts.$indent.tabs) {\n        outerIndent = plain.match(/^\\t*/)[0].length;\n      }\n      const fnStr = fnParts[1].replace(/\"/g, '\\'').replace(/\\\\n/g, '\\n').replace(/\\\\t/g, '\\t');\n      const innerIndent = getFnStrIndent(fnStr, opts);\n      const indentOffset = Math.abs(outerIndent - (innerIndent - 1));\n      const re = new RegExp(`\\n(\\t){${indentOffset}}`, 'g');\n      const reTabbed = fnStr.replace(re, '\\n').replace(/\\\\t/g, indentStr);\n      const preFn = fnParts[0].substr(0, fnParts[0].length - 1);\n      const postFn = fnParts[2].substr(1);\n      const jsHighlighted = syntaxHlStr('javascript', reTabbed, opts);\n      return preFn + jsHighlighted + postFn;\n    }\n    return line;\n  }).join('\\n');\n  return lines;\n};\nconst lineNumberPad = (number, opts) => {\n  if (!opts.lineNumbers) {\n    return '';\n  }\n  let output = '';\n  const offsetLineN = number + (opts.lineNumberStart - 1);\n  if (opts.$indent.spaces) {\n    const padStr = String().padStart(opts.lineNumberPad, ' ');\n    const prePad = opts.lineNumberPad + opts.$maxDigitWidth;\n    output = String(offsetLineN).padStart(prePad) + padStr;\n  }\n\n  // Indent using spaces - up to the tabwidth required to contain number str\n  if (opts.$indent.tabs) {\n    output = String(offsetLineN).padStart(opts.$maxTabSpace, ' ');\n  }\n  return opts.colors.lineNumbers(output);\n};\nconst cropPadAndNumber = (text, opts) => {\n  let output = '';\n  const lines = text.split('\\n');\n  const maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length;\n  // Tabs needed to contain digits (so we dont break code tab indentation)\n  const tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth);\n  const maxTabSpace = tabsNeeded * opts.consoleTabWidth;\n  const longestLineLen = findLongestLine(text, opts);\n  opts.$maxTabSpace = maxTabSpace;\n  opts.$maxDigitWidth = maxDigitWidth;\n  lines.forEach((line, i) => {\n    const lineNumber = i + 1;\n    if (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n      return;\n    }\n    const lineNo = lineNumberPad(lineNumber, opts);\n    const tabCount = (line.match(/\\t/g) || []).length;\n    const tabAdjust = tabCount * opts.consoleTabWidth;\n    const plain = stripAnsi(line).replace(/\\t/g, '');\n    let runLengthLine;\n    if (opts.lineEndPad === true) {\n      const linePad = String().padEnd(longestLineLen - plain.length - tabAdjust, ' ');\n      runLengthLine = line + opts.colors.trailingSpace(linePad);\n    } else {\n      runLengthLine = line;\n    }\n    let lineOutput;\n    if (opts.tabsToSpaces === false) {\n      lineOutput = lineNo + runLengthLine;\n    }\n    if (typeof opts.tabsToSpaces === 'number') {\n      lineOutput = lineNo + padLine(runLengthLine, opts.codePad);\n    }\n    output += lineOutput + '\\n';\n  });\n  return opts.colors.base(output);\n};\nconst decorate = (ansiStr, opts) => {\n  // AnsiMark has been removed for causing problems.\n  ansiStr = cropPadAndNumber(ansiStr, opts);\n  return ansiStr;\n};\nconst nameifyArrowFn = (fn, opts) => {\n  if (Reflect.has(fn, 'prototype') && Reflect.has(fn.prototype, 'constructor')) {\n    return '';\n  }\n  return `${opts.arrowKeyword} ${fn.name} = `;\n};\nconst procOpts = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let options = {\n    lineNumbers: true,\n    lang: 'javascript',\n    lineNumberPad: 0,\n    lineNumberStart: 1,\n    start: 1,\n    end: Infinity,\n    stripIndent: true,\n    codePad: 1,\n    colors: darkPalette,\n    tabsToSpaces: 4,\n    consoleTabWidth: 8,\n    arrowKeyword: 'const',\n    lineEndPad: true\n  };\n  options = merge(options, opts);\n  options.$indent = {\n    spaces: typeof options.tabsToSpaces === 'number',\n    tabs: typeof options.tabsToSpaces === 'boolean' && options.tabsToSpaces === false,\n    size: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n  };\n  return options;\n};\nconst chromafi = (value, opts) => {\n  opts = procOpts(opts);\n  if (typeof value === 'function') {\n    value = nameifyArrowFn(value, opts) + String(value);\n    const indentStart = true;\n    value = syntaxHlStr('javascript', value, opts, indentStart);\n    value = stripIndent(value);\n    value = decorate(value, opts);\n    return value;\n  }\n  if (typeof value === 'string') {\n    value = syntaxHlStr(opts.lang, value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n  if (typeof value === 'object') {\n    value = syntaxHlJson(value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n  throw new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.');\n};\nchromafi.hljs = hljs; // Expose hljs for modification\n\nmodule.exports = chromafi;","map":{"version":3,"names":["hljs","require","cheerio","camelCase","chalk","stripAnsi","merge","stripIndent","detectIndent","darkPalette","addition","green","attr","yellow","attribute","blue","attrString","cyan","base","white","builtIn","builtInName","bullet","magenta","class","code","comment","dim","deletion","red","doctag","emphasis","function","formula","keyword","lineNumbers","grey","literal","link","underline","meta","name","number","params","quote","gray","regexp","selectorAttr","selectorClass","selectorId","selectorPseudo","selectorTag","string","strong","subst","symbol","tag","templateTag","templateVariable","title","trailingSpace","type","variable","filter","node","opts","color","text","childText","data","attribs","split","childNodes","length","map","childNode","join","colors","findLongestLine","tabPad","$indent","tabs","String","padEnd","consoleTabWidth","lines","replace","max","forEach","line","padLine","padding","padStr","padStart","getIndentStr","tabsToSpaces","syntaxHlStr","lang","script","indentStart","indentStr","spaces","highlight","value","html","$body","load","root","find","output","syntaxHlJson","json","JSON","stringify","key","val","Function","err","message","Error","highlighted","match","colorClass","test","includes","substr","getFnStrIndent","fnStr","indent","indentLevel","amount","fnParts","plain","outerIndent","innerIndent","indentOffset","Math","abs","re","RegExp","reTabbed","preFn","postFn","jsHighlighted","lineNumberPad","offsetLineN","lineNumberStart","prePad","$maxDigitWidth","$maxTabSpace","cropPadAndNumber","maxDigitWidth","tabsNeeded","ceil","maxTabSpace","longestLineLen","i","lineNumber","firstLine","lastLine","lineNo","tabCount","tabAdjust","runLengthLine","lineEndPad","linePad","lineOutput","codePad","decorate","ansiStr","nameifyArrowFn","fn","Reflect","has","prototype","arrowKeyword","procOpts","options","start","end","Infinity","size","chromafi","module","exports"],"sources":["C:/Users/ankit/Desktop/FUND/funding/node_modules/@trufflesuite/chromafi/index.js"],"sourcesContent":["const hljs = require('highlight.js')\nconst cheerio = require('cheerio')\nconst camelCase = require('camelcase')\nconst chalk = require('chalk')\nconst stripAnsi = require('strip-ansi')\nconst merge = require('lodash.merge')\nconst stripIndent = require('strip-indent')\nconst detectIndent = require('detect-indent')\n\nconst darkPalette = {\n\taddition: chalk.green,\n\tattr: chalk.yellow,\n\tattribute: chalk.blue,\n\tattrString: chalk.cyan,\n\tbase: chalk.white,\n\tbuiltIn: chalk.blue,\n\tbuiltInName: chalk.blue,\n\tbullet: chalk.magenta,\n\tclass: chalk.green,\n\tcode: chalk.yellow,\n\tcomment: chalk.white.dim,\n\tdeletion: chalk.red,\n\tdoctag: chalk.blue,\n\temphasis: chalk.magenta,\n\tfunction: chalk.white,\n\tformula: chalk.green,\n\tkeyword: chalk.red,\n\tlineNumbers: chalk.grey,\n\tliteral: chalk.magenta,\n\tlink: chalk.blue.underline,\n\tmeta: chalk.cyan,\n\tname: chalk.cyan,\n\tnumber: chalk.green,\n\tparams: chalk.blue,\n\tquote: chalk.gray,\n\tregexp: chalk.magenta,\n\tselectorAttr: chalk.green,\n\tselectorClass: chalk.yellow,\n\tselectorId: chalk.blue,\n\tselectorPseudo: chalk.cyan,\n\tselectorTag: chalk.magenta,\n\tstring: chalk.yellow,\n\tstrong: chalk.red,\n\tsubst: chalk.cyan,\n\tsymbol: chalk.cyan,\n\ttag: chalk.blue,\n\ttemplateTag: chalk.magenta,\n\ttemplateVariable: chalk.green,\n\ttitle: chalk.green,\n\ttrailingSpace: chalk,\n\ttype: chalk.magenta,\n\tvariable: chalk.red\n}\n\nconst filter = (node, opts) => {\n\tlet color\n\tlet text\n\tlet childText\n\n\tif (node.type === 'text') {\n\t\ttext = node.data\n\t\treturn text\n\t}\n\n\tif (node.name === 'span' && node.type === 'tag') {\n\t\tcolor = camelCase(node.attribs.class.split('-')[1])\n\t}\n\n\tif (node.childNodes && node.childNodes.length > 0) {\n\t\tchildText = node.childNodes.map(childNode => filter(childNode, opts)).join('')\n\n\t\tif (typeof color === 'string') {\n\t\t\treturn opts.colors[color](childText)\n\t\t}\n\n\t\treturn childText\n\t}\n\n\treturn ''\n}\n\nconst findLongestLine = (text, opts) => {\n\tlet tabPad = ''\n\n\tif (opts.$indent.tabs) {\n\t\ttabPad = String().padEnd(opts.consoleTabWidth, ' ')\n\t}\n\n\tconst lines = stripAnsi(text)\n\t\t.replace(/\\t/g, tabPad)\n\t\t.split('\\n')\n\n\tlet max = 0\n\n\tlines.forEach(line => {\n\t\tif (line.length > max) {\n\t\t\tmax = line.length\n\t\t}\n\t})\n\n\treturn max\n}\n\nconst padLine = (line, padding) => {\n\tconst padStr = String().padStart(padding, ' ')\n\treturn padStr + line + padStr\n}\n\nconst getIndentStr = opts => {\n\tif (opts.$indent.tabs) {\n\t\treturn String().padStart(1, '\\t')\n\t}\n\n\t// Opts.$indent.spaces === true\n\tif (opts.tabsToSpaces === 0) {\n\t\treturn '\\u0000'\n\t}\n\n\treturn String().padEnd(opts.tabsToSpaces, ' ')\n}\n\nconst syntaxHlStr = (lang, script, opts, indentStart) => {\n\tconst indentStr = getIndentStr(opts)\n\n\tif (opts.$indent.tabs) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (opts.$indent.spaces) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (indentStart) {\n\t\tscript = indentStr + script\n\t}\n\n\tconst code = hljs.highlight(lang, script).value\n\tconst html = `<code>${code}</code>`\n\tconst $body = cheerio.load(html).root().find('code')[0]\n\tconst output = filter($body, opts)\n\n\treturn output\n}\n\nconst syntaxHlJson = (json, opts) => {\n\tconst indentStr = getIndentStr(opts)\n\n\ttry {\n\t\tjson = JSON.stringify(json, (key, val) => {\n\t\t\tif (val instanceof Function) {\n\t\t\t\treturn `[FUNCTION]${String(val)}[FUNCTION]`\n\t\t\t}\n\t\t\treturn val\n\t\t}, indentStr)\n\t} catch (err) {\n\t\terr.message = 'ðŸ¦…  Chromafi: ' + err.message\n\t\tthrow new Error(err)\n\t}\n\n\tconst highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, match => {\n\t\tlet colorClass = 'number'\n\n\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\tif (/^\"/.test(match)) {\n\t\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\t\tif (/:$/.test(match)) {\n\t\t\t\tif (match.includes('-')) {\n\t\t\t\t\tcolorClass = 'attrString'\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t} else {\n\t\t\t\t\tcolorClass = 'attr'\n\t\t\t\t\tmatch = match.replace(/\"/g, '')\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcolorClass = 'string'\n\n\t\t\t\tif (match.substr(1, 10) === '[FUNCTION]' &&\n\t\t\t\t\tmatch.substr(match.length - 11, 10) === '[FUNCTION]') {\n\t\t\t\t\tcolorClass = 'function'\n\t\t\t\t} else {\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t\tmatch = match.replace(/\\\\n/g, '\\n')\n\t\t\t\t\tmatch = match.replace(/\\\\t/g, indentStr)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (/true|false/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t} else if (/null/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t}\n\n\t\treturn opts.colors[colorClass](match)\n\t})\n\n\tconst getFnStrIndent = (fnStr, opts) => {\n\t\tfnStr = fnStr.replace(/\\t/g, indentStr)\n\t\tconst indent = detectIndent(fnStr)\n\n\t\tif (opts.$indent.spaces) {\n\t\t\tconst indentLevel = indent.amount / opts.tabsToSpaces\n\t\t\treturn indentLevel\n\t\t}\n\n\t\tif (opts.$indent.tabs) {\n\t\t\tconst indentLevel = indent.amount\n\t\t\treturn indentLevel\n\t\t}\n\t}\n\n\tconst lines = highlighted.split('\\n').map(line => {\n\t\tconst fnParts = line.split('[FUNCTION]')\n\t\tif (fnParts.length === 3) {\n\t\t\tconst plain = stripAnsi(line)\n\n\t\t\tlet outerIndent\n\n\t\t\tif (opts.$indent.spaces) {\n\t\t\t\touterIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces\n\t\t\t}\n\t\t\tif (opts.$indent.tabs) {\n\t\t\t\touterIndent = plain.match(/^\\t*/)[0].length\n\t\t\t}\n\n\t\t\tconst fnStr = fnParts[1]\n\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t.replace(/\\\\n/g, '\\n')\n\t\t\t\t.replace(/\\\\t/g, '\\t')\n\n\t\t\tconst innerIndent = getFnStrIndent(fnStr, opts)\n\t\t\tconst indentOffset = Math.abs(outerIndent - (innerIndent - 1))\n\n\t\t\tconst re = new RegExp(`\\n(\\t){${indentOffset}}`, 'g')\n\t\t\tconst reTabbed = fnStr\n\t\t\t\t.replace(re, '\\n')\n\t\t\t\t.replace(/\\\\t/g, indentStr)\n\n\t\t\tconst preFn = fnParts[0].substr(0, fnParts[0].length - 1)\n\t\t\tconst postFn = fnParts[2].substr(1)\n\t\t\tconst jsHighlighted = syntaxHlStr('javascript', reTabbed, opts)\n\n\t\t\treturn preFn + jsHighlighted + postFn\n\t\t}\n\n\t\treturn line\n\t}).join('\\n')\n\n\treturn lines\n}\n\nconst lineNumberPad = (number, opts) => {\n\tif (!opts.lineNumbers) {\n\t\treturn ''\n\t}\n\n\tlet output = ''\n\n\tconst offsetLineN = number + (opts.lineNumberStart - 1)\n\n\tif (opts.$indent.spaces) {\n\t\tconst padStr = String().padStart(opts.lineNumberPad, ' ')\n\t\tconst prePad = opts.lineNumberPad + opts.$maxDigitWidth\n\t\toutput = String(offsetLineN).padStart(prePad) + padStr\n\t}\n\n\t// Indent using spaces - up to the tabwidth required to contain number str\n\tif (opts.$indent.tabs) {\n\t\toutput = String(offsetLineN).padStart(opts.$maxTabSpace, ' ')\n\t}\n\n\treturn opts.colors.lineNumbers(output)\n}\n\nconst cropPadAndNumber = (text, opts) => {\n\tlet output = ''\n\n\tconst lines = text.split('\\n')\n\tconst maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length\n\t// Tabs needed to contain digits (so we dont break code tab indentation)\n\tconst tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth)\n\tconst maxTabSpace = tabsNeeded * opts.consoleTabWidth\n\tconst longestLineLen = findLongestLine(text, opts)\n\n\topts.$maxTabSpace = maxTabSpace\n\topts.$maxDigitWidth = maxDigitWidth\n\n\tlines.forEach((line, i) => {\n\t\tconst lineNumber = i + 1\n\t\tif (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n\t\t\treturn\n\t\t}\n\n\t\tconst lineNo = lineNumberPad(lineNumber, opts)\n\n\t\tconst tabCount = (line.match(/\\t/g) || []).length\n\t\tconst tabAdjust = (tabCount * opts.consoleTabWidth)\n\n\t\tconst plain = stripAnsi(line).replace(/\\t/g, '')\n\t\tlet runLengthLine\n\t\tif (opts.lineEndPad === true) {\n\t\t\tconst linePad = String().padEnd((longestLineLen - plain.length) - tabAdjust, ' ')\n\t\t\trunLengthLine = line + opts.colors.trailingSpace(linePad)\n\t\t} else {\n\t\t\trunLengthLine = line\n\t\t}\n\n\t\tlet lineOutput\n\n\t\tif (opts.tabsToSpaces === false) {\n\t\t\tlineOutput = lineNo + runLengthLine\n\t\t}\n\n\t\tif (typeof opts.tabsToSpaces === 'number') {\n\t\t\tlineOutput = lineNo + padLine(runLengthLine, opts.codePad)\n\t\t}\n\n\t\toutput += lineOutput + '\\n'\n\t})\n\n\treturn opts.colors.base(output)\n}\n\nconst decorate = (ansiStr, opts) => {\n\t// AnsiMark has been removed for causing problems.\n\tansiStr = cropPadAndNumber(ansiStr, opts)\n\treturn ansiStr\n}\n\nconst nameifyArrowFn = (fn, opts) => {\n\tif (Reflect.has(fn, 'prototype') &&\n\t\tReflect.has(fn.prototype, 'constructor')) {\n\t\treturn ''\n\t}\n\n\treturn `${opts.arrowKeyword} ${fn.name} = `\n}\n\nconst procOpts = (opts = {}) => {\n\tlet options = {\n\t\tlineNumbers: true,\n\t\tlang: 'javascript',\n\t\tlineNumberPad: 0,\n\t\tlineNumberStart: 1,\n\t\tstart: 1,\n\t\tend: Infinity,\n\t\tstripIndent: true,\n\t\tcodePad: 1,\n\t\tcolors: darkPalette,\n\t\ttabsToSpaces: 4,\n\t\tconsoleTabWidth: 8,\n\t\tarrowKeyword: 'const',\n\t\tlineEndPad: true\n\t}\n\n\toptions = merge(options, opts)\n\n\toptions.$indent = {\n\t\tspaces: typeof options.tabsToSpaces === 'number',\n\t\ttabs: typeof options.tabsToSpaces === 'boolean' &&\n\t\t\toptions.tabsToSpaces === false,\n\t\tsize: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n\t}\n\n\treturn options\n}\n\nconst chromafi = (value, opts) => {\n\topts = procOpts(opts)\n\n\tif (typeof value === 'function') {\n\t\tvalue = nameifyArrowFn(value, opts) + String(value)\n\t\tconst indentStart = true\n\t\tvalue = syntaxHlStr('javascript', value, opts, indentStart)\n\t\tvalue = stripIndent(value)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'string') {\n\t\tvalue = syntaxHlStr(opts.lang, value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'object') {\n\t\tvalue = syntaxHlJson(value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tthrow new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.')\n}\n\nchromafi.hljs = hljs // Expose hljs for modification\n\nmodule.exports = chromafi\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}